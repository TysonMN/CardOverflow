@page "/TestCards"
@using CardOverflow.Api
@using CardOverflow.Entity
@using System
@using System.Linq
@inject CardRepository CardRepository

<p>Let's test your progress!</p>

@if (Cards == null) {
  <p><em>Loading...</em></p>
} else if (!Cards.Any()) {
  <p>No cards left!</p>
} else {
  // tabindex="0" makes keyboard shortcuts work, consider moving it up when you better understand the ramifications
  <div tabindex="0" onkeydown=@OnKeyDown>
    <p>@Cards.FirstOrDefault()?.Question</p>
    @if (IsAnswerHidden) {
      <button class="btn btn-primary" onclick="@ShowAnswer">Show answer</button>
    } else {
      <p>@Cards.FirstOrDefault()?.Answer</p>
      <p>How hard was it?</p>
      <button class="btn btn-primary" onclick="@(() => Evaluate(0))">Again</button> // todo show how long until this card comes back
      <button class="btn btn-primary" onclick="@(() => Evaluate(1))">Hard</button>
      <button class="btn btn-primary" onclick="@(() => Evaluate(2))">Good</button>
      <button class="btn btn-primary" onclick="@(() => Evaluate(3))">Easy</button>
    }
  </div>
}

@functions {
  LinkedList<Card> Cards;
  bool IsAnswerHidden = true;

  protected override async Task OnInitAsync() {
    Cards = CardRepository.GetCards().OrderBy(a => Guid.NewGuid()).Apply(x => new LinkedList<Card>(x));
  }

  void Evaluate(int difficulty) {
    if (!IsAnswerHidden) {
      IsAnswerHidden = true;
      Cards.RemoveFirst();
    }
  }

  void ShowAnswer() =>
    IsAnswerHidden = false;

  void OnKeyDown(UIKeyboardEventArgs eventArgs) {
    Console.WriteLine(Json.Serialize(eventArgs));
    if (eventArgs.Key == "ArrowDown" || eventArgs.Key == "ArrowRight") {
      ShowAnswer();
    } else if (eventArgs.Key == "0") {
      Evaluate(0);
    } else if (eventArgs.Key == "1") {
      Evaluate(1);
    } else if (eventArgs.Key == "2") {
      Evaluate(2);
    } else if (eventArgs.Key == "3") {
      Evaluate(3);
    }
  }

}
