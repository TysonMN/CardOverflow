@page "{*clientPath}"
@using Microsoft.AspNetCore.Mvc.ViewFeatures
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>CardOverflow.Web</title>
  <base href="~/" />
  <environment include="Development">
    <link rel="stylesheet" href="css/bootstrap/bootstrap.min.css" />
    <script>
      var wait = ms => new Promise((r, j) => setTimeout(r, ms)); // Inspired by https://github.com/martasp/BlazorLiveReload
      var failed = false;
      async function fetchAsync() {
        try {
          var xhttp = new XMLHttpRequest();
          xhttp.onreadystatechange = function () {
            if (this.status === 200 && failed) { // connected and previously failed
              location.reload();
            } else if (this.status === 0 && this.readyState === 4) { // connection broken
              failed = true;
            }
          };
          xhttp.open("GET", "/", true);
          xhttp.send();
        }
        catch (e) {
          failed = true;
          await wait(200);
          console.log("failed " + e);
        }
      }
      async function Pooling() {
        while (true) {
          fetchAsync();
          await wait(200);
        }
      }
      Pooling();
    </script>
  </environment>
  <environment exclude="Development">
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css"
          asp-fallback-href="css/bootstrap/bootstrap.min.css"
          asp-fallback-test-class="sr-only" asp-fallback-test-property="position" asp-fallback-test-value="absolute"
          crossorigin="anonymous"
          integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" />
  </environment>
  <link href="css/site.css" rel="stylesheet" />
</head>
<body>
  <app>@(await Html.RenderComponentAsync<App>())</app>

  <script src="_framework/components.server.js"></script>
</body>
</html>
