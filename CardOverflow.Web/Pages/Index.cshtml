@page "{*clientPath}"
@using Microsoft.AspNetCore.Mvc.ViewFeatures
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>CardOverflow.Web</title>
  <base href="~/" />
  <environment include="Development">
    <link rel="stylesheet" href="css/bootstrap/bootstrap.min.css" />
    <script>
      var wait = ms => new Promise((r, j) => setTimeout(r, ms)); // Inspired by https://github.com/martasp/BlazorLiveReload
      var failed = false;
      async function fetchAsync() {
        try {
          var xhttp = new XMLHttpRequest();
          xhttp.onreadystatechange = function () {
            if (this.status === 200 && failed) { // connected and previously failed
              location.reload();
            } else if (this.status === 0 && this.readyState === 4) { // connection broken
              failed = true;
            }
          };
          xhttp.open("GET", "/", true);
          xhttp.send();
        }
        catch (e) {
          failed = true;
          await wait(200);
          console.log("failed " + e);
        }
      }
      async function Pooling() {
        while (true) {
          fetchAsync();
          await wait(200);
        }
      }
      Pooling();
    </script>
  </environment>
  <environment exclude="Development">
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css"
          asp-fallback-href="css/bootstrap/bootstrap.min.css"
          asp-fallback-test-class="sr-only" asp-fallback-test-property="position" asp-fallback-test-value="absolute"
          crossorigin="anonymous"
          integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" />
  </environment>
  <link href="css/site.css" rel="stylesheet" />
  <script language="JavaScript">
    // https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API/Taking_still_photos
    function StartWebCam() {
      // The width and height of the captured photo. We will set the
      // width to the value defined here, but the height will be
      // calculated based on the aspect ratio of the input stream.

      var width = 320;    // We will scale the photo width to this
      var height = 0;     // This will be computed based on the input stream

      // |streaming| indicates whether or not we're currently streaming
      // video from the camera. Obviously, we start at false.

      var streaming = false;

      // The various HTML elements we need to configure or control. These
      // will be set by the startup() function.

      var video = null;
      var canvas = null;
      var photo = null;
      var startbutton = null;

      function startup() {
        video = document.getElementById('video');
        canvas = document.getElementById('canvas');
        photo = document.getElementById('photo');
        startbutton = document.getElementById('startbutton');
        rasterizebutton = document.getElementById('rasterizebutton');

        navigator.mediaDevices.getUserMedia({ video: true, audio: false })
          .then(function (stream) {
            video.srcObject = stream;
            video.play();
          })
          .catch(function (err) {
            console.log("An error occurred: " + err);
          });

        video.addEventListener('canplay', function (ev) {
          if (!streaming) {
            height = video.videoHeight / (video.videoWidth / width);

            // Firefox currently has a bug where the height can't be read from
            // the video, so we will make assumptions if this happens.

            if (isNaN(height)) {
              height = width / (4 / 3);
            }

            video.setAttribute('width', width);
            video.setAttribute('height', height);
            canvas.setAttribute('width', width);
            canvas.setAttribute('height', height);
            streaming = true;
          }
        }, false);

        startbutton.addEventListener('click', function (ev) {
          takepicture();
          ev.preventDefault();
        }, false);

        rasterizebutton.addEventListener('click', function (ev) {
          rasterize();
          ev.preventDefault();
        }, false);

        clearphoto();
      }

      // Fill the photo with an indication that none has been
      // captured.

      function clearphoto() {
        var context = canvas.getContext('2d');
        context.fillStyle = "#AAA";
        context.fillRect(0, 0, canvas.width, canvas.height);

        var data = canvas.toDataURL('image/png');
        photo.setAttribute('src', data);
      }

      function rasterize() {
        var data = canvas.toDataURL('image/png');
        photo.setAttribute('src', data);
      }

      // Capture a photo by fetching the current contents of the video
      // and drawing it into a canvas, then converting that to a PNG
      // format data URL. By drawing it on an offscreen canvas and then
      // drawing that to the screen, we can change its size and/or apply
      // other changes before drawing it.

      function takepicture() {
        var context = canvas.getContext('2d');
        if (width && height) {
          canvas.width = width;
          canvas.height = height;
          context.drawImage(video, 0, 0, width, height);

          // https://stackoverflow.com/questions/2368784
          // last known position
          var pos = { x: 0, y: 0 };

          window.addEventListener('resize', resize);
          document.addEventListener('mousemove', draw);
          document.addEventListener('mousedown', setPosition);
          document.addEventListener('mouseenter', setPosition);

          // new position from mouse event
          function setPosition(e) {
            pos.x = e.clientX - canvas.offsetLeft;
            pos.y = e.clientY - canvas.offsetTop;
          }

          // resize canvas
          function resize() {
            context.canvas.width = window.innerWidth;
            context.canvas.height = window.innerHeight;
          }

          function draw(e) {
            // mouse left button must be pressed
            if (e.buttons !== 1) return;

            context.beginPath(); // begin

            context.lineWidth = 5;
            context.lineCap = 'round';
            context.strokeStyle = '#c0392b';

            context.moveTo(pos.x, pos.y); // from
            setPosition(e);
            context.lineTo(pos.x, pos.y); // to

            context.stroke(); // draw it!
          }

          rasterize();
        } else {
          clearphoto();
        }
      }
      startup();
    }
  </script>
  <script language="JavaScript">
    function focusElement(element) {
      window.setTimeout(function () { // https://stackoverflow.com/questions/1096436/
        element.focus();
      }, 0);
    }
  </script>
</head>
<body>
  <app>@(await Html.RenderComponentAsync<App>())</app>

  <script src="_framework/components.server.js"></script>
</body>
</html>
