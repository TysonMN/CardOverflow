@page "/my/collate"
@page "/my/collate/{CollateId:int}"
@attribute [Authorize]
@using Microsoft.AspNetCore.Mvc
@using Microsoft.FSharp.Core
@using CardOverflow.Entity
@using CardOverflow.Debug
@using CardOverflow.Pure
@using CardOverflow.Api
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Identity
@using CardOverflow.Sanitation
@using CardOverflow.Server.Data
@using Microsoft.AspNetCore.WebUtilities
@inject NavigationManager NavigationManager
@inject IToastService ToastService
@inject DbExecutor DbExecutor

@if (_collates == null) {
  <p><em>"Loading..."</em></p>
} else {
  <div class="row">
    <div class="col-sm-10">
      <CollateEditor Collate=@_collates[_selectedIndex] />
    </div>
    <div class="col-sm-2 list-group">
      <h5 class="text-center">Card Templates</h5>
      <button type="button" class="btn btn-success mb-2" @onclick=@_Add>
        <span class="oi oi-plus"></span>
      </button>
      @foreach (var x in _collates.Select((t, i) => new { Collate = t, Index = i })) {
        <button class="list-group-item list-group-item-action @(x.Index == _selectedIndex ? "active" : "")"
                @onclick=@(() => _selectedIndex = x.Index)>
          @x.Collate.Editable.Name
        </button>
      }
    </div>
  </div>
}

@code {
  [Parameter] public int CollateId { get; set; }
  [CascadingParameter] Task<UserClaims> UserTask { get; set; }
  private UserClaims _user = UserClaims.init;
  private List<ViewCollateWithAllInstances> _collates;
  private int _selectedIndex;

  protected override async Task OnParametersSetAsync() {
    _user = await UserTask;
    if (_user.IsAuthenticated) {
      _collates = await DbExecutor.QueryAsync(db => SanitizeCollate.GetMine(db, _user.Id));
      _selectedIndex = (_collates.SingleOrDefault(x => x.Id == CollateId) ?? _collates.First())
        .Apply(_collates.IndexOf);
    }
  }

  private void _Add() {
    var t = ViewCollateWithAllInstances.initialize(_user.Id);
    _collates = _collates.Prepend(t).ToList();
    _selectedIndex = _collates.IndexOf(t);
  }

}
