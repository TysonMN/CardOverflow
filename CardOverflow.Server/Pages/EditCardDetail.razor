@using Microsoft.FSharp.Core
@using CardOverflow.Entity
@using CardOverflow.Debug
@using Microsoft.FSharp.Collections
@using CardOverflow.Pure
@using CardOverflow.Api
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Identity
@using CardOverflow.Sanitation
@using Syncfusion.EJ2.Blazor
@using Syncfusion.EJ2.Blazor.RichTextEditor
@inject IToastService ToastService
@inject DbExecutor DbExecutor

@if (Collates == null) {
  <p><em>Loading...</em></p>
} else {
  <EditForm Model=@EditCard OnValidSubmit=@UpdateCard @onkeydown=@OnKeyDown tabindex="0" style="outline: none;">
    <fieldset disabled=@_IsDisabled>
      <div class="form-group">
        <div class="row">
          <div class="col-sm">
            @if (EditCard.Kind.IsNewBranch_SourceCardId_Title || EditCard.Kind.IsUpdate_BranchId_Title) {
              <div class="input-group">
                <label for="branchTitleInput" class="col-form-label mr-2">
                  Branch Title:
                </label>
                <InputText @bind-Value=@EditCard.Title class="form-control" id="branchTitleInput" />
              </div>
            }
            @foreach (var field in EditCard.FieldValues) {
              <EditCardField Field=@field ValueUpdated=@(x => field.Value = x) IsDisabled=@_IsDisabled />
            }
          </div>
          <div class="col-sm">
            <div class="row">
              <a href="cardsetting" class="col-sm-2 mt-2">
                Card Setting
              </a>
              <div class="col-sm-10 px-0">
                <CardSettingSelector SettingSelected=_SetOption SelectedId=_SelectedCardSettingId />
              </div>
            </div>
            <div class="row">
              <a href="Collate/@SelectedCollateId" class="col-sm-2 mt-2">
                Card Template
              </a>
              <select value=@SelectedCollateId class="form-control col-sm-10" @onchange=@(x => x.Value.ToString().Apply(int.Parse).Do(id => UpdateSelectedCollate(id)))>
                @foreach (var collate in Collates) {
                  <option value=@collate.Id>@collate.Editable.Name</option>
                }
              </select>
            </div>
            <div class="row">
              <a href="Collate/@SelectedCollateId?InstanceId=@SelectedCollateInstanceId" class="col-sm-2 mt-2" tabindex="-1">
                Revision
              </a>
              <select value=@SelectedCollateInstanceId class="form-control col-sm-10" @onchange=@(x => x.Value.ToString().Apply(int.Parse).Do(UpdateSelectedCollateInstance))>
                @foreach (var instance in SelectedCollateInstances) {
                  <option value=@instance.Id>@instance.Created - @instance.EditSummary</option>
                }
              </select>
            </div>
            @if (EditCard.Backs.IsOk) {
              @foreach (var back in EditCard.Backs.ResultValue) {
                <iframe sandbox="allow-scripts" srcdoc=@back style="height: 80vh; width: 100%; resize: vertical;"></iframe>
              }
            } else {
              <span>
                Error: @EditCard.Backs.ErrorValue
              </span>
            }
          </div>
        </div>
      </div>
      <div class="row">
        <div class="col-sm">
          @if (EditCard.Kind.TryGetCopySourceInstanceId(out var instanceId)) {
            <span>Copied from</span>
            <a href="cardinstance/@instanceId">
              Card
            </a>
          }
          @if (EditCard.Kind.TryGetBranchSourceCardId(out var stackId)) {
            <span>Branched from</span>
            <a href="stack/@stackId">
              Card
            </a>
          }
        </div>
        <div class="col-sm">
          <div class="row mx-1">
            <span class="btn-group w-100">
              <InputText @bind-Value=@EditCard.EditSummary class="form-control w-100" placeholder="Edit Summary" />
              <button type="button" class="btn btn-primary" @onclick=@UpdateCard>Save</button>
            </span>
          </div>
          <div class="row float-right">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <span>
              Saved! Link to
              @*highTODO fix, there's no /branch*@
              <a href="branch/@resultingBranchId">
                card.
              </a>
            </span>
          </div>
        </div>
      </div>
    </fieldset>
  </EditForm>
}

@code {
  [Parameter] public ViewEditCardCommand EditCard { get; set; }
  [Parameter] public bool NewEditCardOnSave { get; set; }
  [Parameter] public IEnumerable<ViewCollateWithAllInstances> Collates { get; set; }
  [CascadingParameter] UserEntity User { get; set; }
  private IEnumerable<ViewCollateInstance> SelectedCollateInstances;
  private int SelectedCollateId;
  private int SelectedCollateInstanceId;
  private int _SelectedCardSettingId;
  private bool _IsDisabled;
  private int resultingBranchId;

  protected override async Task OnInitializedAsync() {
    if (Collates == null) {
      Collates = await DbExecutor.QueryAsync(db => SanitizeCollate.GetMineWith(db, User?.Id ?? 0, EditCard.CollateInstance.CollateId));
    }
    if (EditCard == null) {
      EditCard = new ViewEditCardCommand("Initial creation", new List<EditFieldAndValue>(), Collates.First().Instances.First(), UpsertKind.NewNewOriginal_TagIds(FSharpList<int>.Empty), null);
    }
    _SelectedCardSettingId = User.DefaultCardSettingId.Value;
    UpdateSelectedCollate(EditCard.CollateInstance.CollateId, EditCard.CollateInstance.Id);
  }

  private void _SetOption(int newId) {
    _SelectedCardSettingId = newId;
    //Card.CardSettingId = newId; //highTODO fix
  }

  async Task UpdateCard() {
    _IsDisabled = true;
    var result = await DbExecutor.QueryAsync(db => SanitizeCardRepository.Update(db, User.Id, EditCard));
    if (result.IsOk) {
      ToastService.ShowInfo("Saved!");
      resultingBranchId = result.ResultValue;
      if (NewEditCardOnSave) {
        var fieldValues = EditCard.FieldValues.Select(x => new EditFieldAndValue(x.EditField, "")).ToList();
        EditCard = new ViewEditCardCommand(EditCard.EditSummary, fieldValues, EditCard.CollateInstance, UpsertKind.NewNewOriginal_TagIds(FSharpList<int>.Empty), null);
        UpdateSelectedCollate(EditCard.CollateInstance.CollateId, EditCard.CollateInstance.Id);
        _IsDisabled = false;
      }
    } else {
      ToastService.ShowError(result.ErrorValue);
    }
  }

  void UpdateSelectedCollate(int collateId, int? instanceId = null) {
    SelectedCollateId = collateId;
    SelectedCollateInstances = Collates.Single(t => t.Id == collateId).Instances;
    UpdateSelectedCollateInstance(instanceId ?? SelectedCollateInstances.First().Id);
  }

  void UpdateSelectedCollateInstance(int instanceId) {
    SelectedCollateInstanceId = instanceId;
    EditCard.CollateInstance = Collates.SelectMany(x => x.Instances).Single(x => x.Id == instanceId);
    var valuesByField = EditCard.FieldValues.ToDictionary(fv => fv.EditField.Name, fv => fv.Value);
    EditCard.FieldValues = EditCard.CollateInstance.Fields
      .Select(ViewFieldModule.copyTo)
      .Select(field =>
        (valuesByField.ContainsKey(field.Name)
          ? valuesByField[field.Name] ?? ""
          : "")
          .Apply(value =>
            new EditFieldAndValue(
              field,
              value ?? "")
      )).ToList();
  }

  Task OnKeyDown(Microsoft.AspNetCore.Components.Web.KeyboardEventArgs eventArgs) =>
    eventArgs.CtrlKey && eventArgs.Key == "Enter"
      ? UpdateCard()
      : Task.CompletedTask;

}
