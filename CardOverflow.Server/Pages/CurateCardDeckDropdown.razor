@using Microsoft.FSharp.Core
@using CardOverflow.Entity
@using CardOverflow.Debug
@using CardOverflow.Pure
@using CardOverflow.Api
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Identity
@using CardOverflow.Sanitation
@inject IToastService ToastService
@inherits OwningComponentBase<CardOverflowDb>

<BSDropdown>
  <BSDropdownToggle Color="Color.Primary">Deck</BSDropdownToggle>
  <BSDropdownMenu>
    @foreach (var deck in decks) {
      <BSDropdownItem @onclick=@(() =>new SearchCommand(deck.Query).Apply(DeckClicked.InvokeAsync))>@deck.Name</BSDropdownItem>
    }
    <BSDropdownItem OnClick=NewDeckModal.Show><i class="fas fa-save"></i> Save</BSDropdownItem>
  </BSDropdownMenu>
</BSDropdown>
<BSModal @ref=NewDeckModal>
  <EditForm Model=NewDeck OnValidSubmit=SaveNewDeck>
    <BSModalHeader OnClick=NewDeckModal.Hide>Create a new deck</BSModalHeader>
    <BSModalBody>
      <div class="form-group">
        <label for="newDeckNameInput">Name</label>
        <InputText @bind-Value=NewDeck.Name class="form-control" id="newDeckNameInput" /> @*this seems to break validation: @bind-Value:event="oninput"*@
        <ValidationMessage For=@(() => NewDeck.Name) />
      </div>
      <div class="form-group">
        <label for="newDeckQueryInput">Query</label>
        <InputText @bind-Value=NewDeck.Query class="form-control" id="newDeckQueryInput" /> @*this seems to break validation: @bind-Value:event="oninput"*@
        <ValidationMessage For=@(() => NewDeck.Query) />
      </div>
      <DataAnnotationsValidator />
    </BSModalBody>
    <BSModalFooter>
      <BSButton Color="Color.Secondary" OnClick=NewDeckModal.Hide type="button">
        Cancel
      </BSButton>
      <BSButton Color="Color.Primary" type="submit">
        Save
      </BSButton>
    </BSModalFooter>
  </EditForm>
</BSModal>

@code {
  BSModal NewDeckModal;
  [CascadingParameter]
  UserEntity User { get; set; }
  [Parameter]
  public string Query { get; set; }
  [Parameter]
  public EventCallback<SearchCommand> DeckClicked { get; set; }
  List<ViewDeck> decks = new List<ViewDeck>();
  ViewDeck NewDeck = new ViewDeck();

  public override async Task SetParametersAsync(ParameterView parameters) {
    await base.SetParametersAsync(parameters);
    NewDeck = new ViewDeck(0, User.Id, "New Deck", Query);
  }

  protected override async Task OnInitializedAsync() =>
    decks = await SanitizeDeckRepository.Get(Service, User?.Id ?? 0);

  Task SaveNewDeck() {
    NewDeckModal.Hide();
    decks.Add(NewDeck);
    return SanitizeDeckRepository.CreateAndSaveAsync(Service, NewDeck);
  }

}
