@page "/gromplate"
@page "/gromplate/{SelectedId:int}"
@using Microsoft.FSharp.Core
@using CardOverflow.Entity
@using CardOverflow.Debug
@using CardOverflow.Pure
@using CardOverflow.Api
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Identity
@using CardOverflow.Sanitation
@inject DbExecutor DbExecutor

<div class="d-flex justify-content-between align-items-center">
  <SearchBar SearchClicked="@SearchClicked" BackLink="/gromplate/" CreateLink=@(x => $"/gromplate/{x}") Ids=@_instances?.Select(x => x.GromplateId.ToString())?.ToList() SelectedId=@SelectedId.ToString() />
</div>
@if (SelectedId == null) {
  @if (_instances == null) {
    <p><em>Loading...</em></p>
  } else {
    <table class="table">
      <tr>
        <th></th>
        <th>Users</th>
        <th>Name</th>
      </tr>
      @foreach (var instance in _instances) {
        <tr>
          <td>
            <HoverPreview IsCollected=@instance.IsCollected>
              <ResizingIframe GromplateInstanceId=@instance.Id Back />
            </HoverPreview>
          </td>
          <td>
            @instance.GromplateUsers
          </td>
          <td>
            <a href="/gromplate/@instance.GromplateId">
              @instance.Name
            </a>
          </td>
        </tr>
      }
    </table>
  }
  <Pager Details=@_details PageChanged=@PageChanged />
} else {
  <GromplateEditor GromplateId=@SelectedId.Value />
}

@code {
  [CascadingParameter] Task<UserClaims> UserTask { get; set; }
  private UserClaims _user = UserClaims.init;
  [Parameter] public int? SelectedId { get; set; }
  private IList<ViewSearchGromplateInstance> _instances;
  private PagedListDetails _details;
  private SearchCommand _search = new SearchCommand { Query = "" };

  public override async Task SetParametersAsync(ParameterView parameters) {
    await base.SetParametersAsync(parameters);
    _user = await UserTask;
    if (SelectedId == null && _instances == null) {
      await PageChanged(1);
    }
    StateHasChanged();
  }

  async Task PageChanged(int pageNumber) {
    var pagedList = await DbExecutor.QueryAsync(db => SanitizeGromplate.Search(db, _user.Id, pageNumber, _search.Query));
    _details = pagedList.Details;
    _instances = pagedList.Results.ToList();
  }

  Task SearchClicked(SearchCommand newSearch) {
    SelectedId = null;
    _search = newSearch;
    return PageChanged(1);
  }

}
