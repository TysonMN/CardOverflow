@using Microsoft.AspNetCore.Mvc
@using Microsoft.FSharp.Collections
@using Microsoft.FSharp.Core
@using CardOverflow.Entity
@using CardOverflow.Debug
@using CardOverflow.Pure
@using CardOverflow.Api
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Identity
@using CardOverflow.Sanitation
@using CardOverflow.Server.Data
@using Microsoft.AspNetCore.WebUtilities
@using ThoughtDesign.WebLibrary
@inject NavigationManager NavigationManager
@inject IToastService ToastService
@inject DbExecutor DbExecutor

<div class="d-flex justify-content-between mt-3">
  <div></div>
  <h3>Templates</h3>
  <div>
    @if (Leaf.CardTemplates.IsStandard) {
      <button type="button" class="btn btn-success" @onclick=AddTemplate disabled=@IsDisabled>
        <span class="oi oi-plus"></span>
      </button>
    }
  </div>
</div>
<div>
  @foreach (var cardTemplate in Leaf.JustCardTemplates) {
    <GromplateEditor_Template
                            Template=@cardTemplate
                            Css=@Leaf.Css
                            DisplayDelete=@(Leaf.JustCardTemplates.Count() >= 2)
                            Delete=@(() => DeleteTemplate(cardTemplate))
                            IsDisabled=@IsDisabled />
  }
</div>

@code {
  [Parameter] public ViewGrompleaf Leaf { get; set; }
  [Parameter] public EventCallback<GromplateType> UpdateGromplateType { get; set; }
  [Parameter] public bool IsDisabled { get; set; }

  private Task AddTemplate() =>
    Leaf.JustCardTemplates.Append(CardTemplate.initStandard).ToFList()
    .Apply(GromplateType.NewStandard)
    .Apply(UpdateGromplateType.InvokeAsync);

  private Task DeleteTemplate(CardTemplate cardTemplate) =>
    Leaf.JustCardTemplates.Where(x => x != cardTemplate).ToFList()
    .Apply(GromplateType.NewStandard)
    .Apply(UpdateGromplateType.InvokeAsync);

}
