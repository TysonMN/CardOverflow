@page "/template/{TemplateId:int}"
@using Microsoft.AspNetCore.Mvc
@using Microsoft.FSharp.Core
@using CardOverflow.Entity
@using CardOverflow.Debug
@using CardOverflow.Pure
@using CardOverflow.Api
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Identity
@using CardOverflow.Sanitation
@using CardOverflow.Server.Data
@using Microsoft.AspNetCore.WebUtilities
@inject NavigationManager NavigationManager
@inject IToastService ToastService
@inherits OwningComponentBase<CardOverflowDb>

@if (Template == null) {
  <p><em>@LoadingMessage</em></p>
} else {
  <div class="row">
    <div class="col-sm">
      @if (SelectedInstance == 0) {
        <TemplateEditorDetail IsDisabled=false Instance=@Editable />
      } else {
        <TemplateEditorDetail IsDisabled=true Instance=@Template.Instances.Single(x => x.Id == SelectedInstance) />
      }
    </div>
    <div class="col-sm-1 list-group">
      <h5>Revisions</h5>
      <button class="list-group-item list-group-item-action @(SelectedInstance == 0 ? "active" : "")"
              @onclick=@(() => Select(0))>
        Edit
      </button>
      <select class="form-control" @onchange=@(x => x.Value.ToString().Apply(int.Parse).Do(Select))>
        @foreach (var instance in Template.Instances) {
          <option value=@instance.Id selected=@(SelectedInstance == instance.Id)>
            @instance.Created
            @instance.EditSummary
          </option>
        }
      </select>
    </div>
  </div>
}

@code {
  [Parameter]
  public int TemplateId { get; set; }
  [CascadingParameter]
  UserEntity User { get; set; }
  string LoadingMessage = "Loading...";
  [Parameter]
  public ViewTemplateWithAllInstances Template { get; set; }
  ViewTemplateInstance Editable;
  int SelectedInstance;

  protected override async Task OnParametersSetAsync() {
    await base.OnParametersSetAsync();
    var x = Template == null
      ? await SanitizeTemplate.AllInstances(Service, TemplateId)
      : FSharpResult<ViewTemplateWithAllInstances, string>.NewOk(Template);
    if (x.IsOk) {
      Template = x.ResultValue;
      Editable = Template.Editable;
      SelectedInstance =
        NavigationManager.Uri
          .Apply(NavigationManager.ToAbsoluteUri).Query
          .Apply(QueryHelpers.ParseQuery)
          .TryGetValue("InstanceId", out var token) &&
        int.TryParse(token.First(), out int possibleId) &&
        Template.Instances.Any(i => i.Id == possibleId)
        ? possibleId
        : 0;
    } else {
      LoadingMessage = x.ErrorValue;
      ToastService.ShowError(x.ErrorValue);
    }
  }

  void Select(int id) =>
    SelectedInstance = id;

}
