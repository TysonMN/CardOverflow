@page "/card/{Id:int}/edit"
@page "/Curate/Card/Fork/{ParentId:int}"
@using Microsoft.FSharp.Core
@using CardOverflow.Entity
@using CardOverflow.Debug
@using CardOverflow.Pure
@using CardOverflow.Api
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Identity
@using CardOverflow.Sanitation
@using Syncfusion.EJ2.Blazor
@using Syncfusion.EJ2.Blazor.RichTextEditor
@inject IToastService ToastService
@inject DbExecutor DbExecutor

@if (Card == null) {
  <p><em>@LoadingMessage</em></p>
} else {
  <EditCardDetail Card=@Card EditCard=@Command />
}

@code {
  [Parameter] public int Id { get; set; }
  [Parameter] public int ParentId { get; set; }
  [CascadingParameter]
  UserEntity User { get; set; }
  string LoadingMessage = "Loading...";
  AcquiredCard Card;
  ViewEditCardCommand Command;

  private async Task _trySetCardAndCommand(AcquiredCard card) {
    var instanceId = card.CardInstanceMeta.Id == 0 ? ParentId : card.CardInstanceMeta.Id;
    var x = await (ParentId == 0
      ? DbExecutor.QueryAsync(db => SanitizeCardRepository.getEdit(db, instanceId))
      : DbExecutor.QueryAsync(db => SanitizeCardRepository.getFork(db, instanceId)));
    if (x.IsOk) {
      Card = card;
      Command = x.ResultValue;
    } else {
      LoadingMessage = x.ErrorValue;
      ToastService.ShowError(x.ErrorValue);
    }
  }

  public override async Task SetParametersAsync(ParameterView parameters) {
    await base.SetParametersAsync(parameters);
    if (ParentId == 0) {
      var x = await DbExecutor.QueryAsync(db => CardRepository.GetAcquired(db, User?.Id ?? 0, Id));
      if (x.IsOk) {
        await _trySetCardAndCommand(x.ResultValue);
      } else {
        LoadingMessage = x.ErrorValue;
        ToastService.ShowError(x.ErrorValue);
      }
    } else {
      await _trySetCardAndCommand(await DbExecutor.QueryAsync(db => CardRepository.getNew(db, User?.Id ?? 0)));
    }
    StateHasChanged();
  }

}
