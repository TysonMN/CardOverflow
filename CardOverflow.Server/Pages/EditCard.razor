@page "/branch/{BranchId:int}/edit"
@page "/curate/card/copy/{CopySourceInstanceId:int}"
@page "/curate/card/branch/{BranchSourceCardId:int}"
@attribute [Authorize]
@using Microsoft.FSharp.Core
@using CardOverflow.Entity
@using CardOverflow.Debug
@using CardOverflow.Pure
@using CardOverflow.Api
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Identity
@using CardOverflow.Sanitation
@using Syncfusion.EJ2.Blazor
@using Syncfusion.EJ2.Blazor.RichTextEditor
@inject IToastService ToastService
@inject DbExecutor DbExecutor

@if (_command == null) {
  <p><em>@LoadingMessage</em></p>
} else {
  <EditCardDetail EditCard=@_command />
}

@code {
  [Parameter] public int BranchId { get; set; }
  [Parameter] public int CopySourceInstanceId { get; set; }
  [Parameter] public int BranchSourceCardId { get; set; }
  [CascadingParameter] UserEntity User { get; set; }
  string LoadingMessage = "Loading...";
  ViewEditCardCommand _command;

  private async Task _TrySetCommandAndCard(Task<FSharpResult<ViewEditCardCommand, string>> result) {
    var x = await result;
    if (x.IsOk) {
      _command = x.ResultValue;
    } else {
      LoadingMessage = x.ErrorValue;
      ToastService.ShowError(x.ErrorValue);
    }
  }

  private Task<FSharpResult<ViewEditCardCommand, string>> _GetCommandAndCard() {
    if (BranchId != 0) {
      return DbExecutor.QueryAsync(db => SanitizeCardRepository.getUpsert(db, UpsertCardSource.NewVUpdateBranchId(BranchId)));
    } else if (CopySourceInstanceId != 0) {
      return DbExecutor.QueryAsync(db => SanitizeCardRepository.getUpsert(db, UpsertCardSource.NewVNewCopySourceInstanceId(CopySourceInstanceId)));
    } else if (BranchSourceCardId != 0) {
      return DbExecutor.QueryAsync(db => SanitizeCardRepository.getUpsert(db, UpsertCardSource.NewVNewBranchSourceCardId(BranchSourceCardId)));
    } else {
      return FSharpResult<ViewEditCardCommand, string>.NewError("0 is an invalid card.").Apply(Task.FromResult);
    }
  }

  public override async Task SetParametersAsync(ParameterView parameters) {
    await base.SetParametersAsync(parameters);
    if (User != null) {
      await _GetCommandAndCard().Apply(_TrySetCommandAndCard);
      StateHasChanged();
    }
  }

}
