@page "/card/{CardId:int}/edit"
@page "/curate/card/copy/{CopySourceInstanceId:int}"
@page "/curate/card/branch/{BranchSourceCardId:int}"
@attribute [Authorize]
@using Microsoft.FSharp.Core
@using CardOverflow.Entity
@using CardOverflow.Debug
@using CardOverflow.Pure
@using CardOverflow.Api
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Identity
@using CardOverflow.Sanitation
@using Syncfusion.EJ2.Blazor
@using Syncfusion.EJ2.Blazor.RichTextEditor
@inject IToastService ToastService
@inject DbExecutor DbExecutor

@if (Card == null) {
  <p><em>@LoadingMessage</em></p>
} else {
  <EditCardDetail Card=@Card EditCard=@Command />
}

@code {
  [Parameter] public int CardId { get; set; }
  [Parameter] public int CopySourceInstanceId { get; set; }
  [Parameter] public int BranchSourceCardId { get; set; }
  [CascadingParameter] UserEntity User { get; set; }
  string LoadingMessage = "Loading...";
  AcquiredCard Card;
  ViewEditCardCommand Command;

  private async Task _trySetCardAndCommand(AcquiredCard card, Task<FSharpResult<ViewEditCardCommand, string>> result) {
    var x = await result;
    if (x.IsOk) {
      Card = card;
      Command = x.ResultValue;
    } else {
      LoadingMessage = x.ErrorValue;
      ToastService.ShowError(x.ErrorValue);
    }
  }

  public override async Task SetParametersAsync(ParameterView parameters) {
    await base.SetParametersAsync(parameters);
    if (User != null) {
      if (CardId != 0) {
        var x = await DbExecutor.QueryAsync(db => CardRepository.GetAcquired(db, User.Id, CardId));
        if (x.IsOk) {
          var xx = DbExecutor.QueryAsync(db => SanitizeCardRepository.getEdit(db, x.ResultValue.CardInstanceMeta.Id));
          await _trySetCardAndCommand(x.ResultValue, xx);
        } else {
          LoadingMessage = x.ErrorValue;
          ToastService.ShowError(x.ErrorValue);
        }
      } else if (CopySourceInstanceId != 0) {
        var xx = DbExecutor.QueryAsync(db => SanitizeCardRepository.getCopy(db, CopySourceInstanceId));
        await _trySetCardAndCommand(await DbExecutor.QueryAsync(db => CardRepository.getNew(db, User.Id)), xx);
      } else if (BranchSourceCardId != 0) {
        var xx = DbExecutor.QueryAsync(db => SanitizeCardRepository.getBranch(db, BranchSourceCardId));
        await _trySetCardAndCommand(await DbExecutor.QueryAsync(db => CardRepository.getNew(db, User.Id)), xx);
      } else {
        var errorMessage = "0 is an invalid card.";
        LoadingMessage = errorMessage;
        ToastService.ShowError(errorMessage);
      }
      StateHasChanged();
    }
  }

}
