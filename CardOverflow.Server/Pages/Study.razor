@page "/study"
@using Microsoft.FSharp.Core
@using CardOverflow.Entity
@using CardOverflow.Debug
@using CardOverflow.Pure
@using CardOverflow.Api
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Identity
@using CardOverflow.Sanitation
@inject CardOverflowDb Db
@inject Scheduler Scheduler
@inject TimeProvider TimeProvider
@inject IJSRuntime Js

@if (todaysCards == null) {
  <p><em>Loading...</em></p>
} else {
  <div class="study-content">
    @if (error == null) {
      @* https://stackoverflow.com/questions/19739001/which-is-the-difference-between-srcdoc-and-src-datatext-html-in-an/ *@
      <iframe sandbox allow-scripts class="study-iframe" srcdoc="@iframeSrcdoc"></iframe>
    } else {
      <h2>Error!</h2>
      <p>@error</p>
      <p>If you're seeing this error message, please contact support with the error message to resolve this issue.</p> @*lowTODO show a better error message*@
    }
  </div>
  <div class="study-footer">
    @if (isFront == true) {
      <button class="btn btn-primary" onclick="@ShowBack">Show answer</button>
      <button class="btn btn-primary" onclick="@Speak">Speak!</button>
      @transcript
    } else if (isFront == false) {
      <button class="btn btn-primary" onclick="@(() => SaveScore(Score.Again))">Again</button> @*medTODO show how long until this card comes back*@
      <button class="btn btn-primary" onclick="@(() => SaveScore(Score.Hard))">Hard</button>
      <button class="btn btn-primary" onclick="@(() => SaveScore(Score.Good))">Good</button>
      <button class="btn btn-primary" onclick="@(() => SaveScore(Score.Easy))">Easy</button>
    } else {
      <button class="btn btn-primary" onclick="@ShowNextCard">Show next card</button>
    }
  </div>
}

@code {
  string iframeSrcdoc;
  string error;
  bool? isFront;
  [CascadingParameter]
  UserEntity User { get; set; }
  IList<FSharpResult<QuizCard, string>> todaysCards;
  DateTime frontVisible;
  string transcript;

  protected override async Task OnInitAsync() {
    todaysCards = (await CardRepository.GetTodaysCards(Db, User.Id)).ToList();
    ShowFront();
  }

  async Task SaveScore(Score score) {
    var (interval, easeFactor) = Scheduler.interval(todaysCards.First().ResultValue, score);
    await SanitizeHistoryRepository.AddAndSaveAsync(Db, User.Id, todaysCards.First().ResultValue.CardId, score, TimeProvider.utcNow, interval, easeFactor, TimeProvider.utcNow - frontVisible);
    // medTODO also need to update the AcquiredCard with the new interval (and maybe other stuff), due to a denormalized db. Move the Scheduler to that new function
    // medTODO needs `undo review` support
    todaysCards.RemoveAt(0);
    ShowFront();
  }

  void ShowFront() {
    frontVisible = TimeProvider.utcNow;
    if (todaysCards.First().IsOk) {
      isFront = true;
      iframeSrcdoc = todaysCards.First().ResultValue.Front;
    } else {
      error = todaysCards.First().ErrorValue;
    }
  }

  void ShowBack() {
    isFront = false;
    iframeSrcdoc = todaysCards.First().ResultValue.Back;
  }

  void ShowNextCard() {
    todaysCards.RemoveAt(0);
    ShowFront();
    error = null;
  }

  async Task Speak() {
    await Js.InvokeAsync<object>("Speak", todaysCards.First().ResultValue.FrontSynthVoice);
    await Js.InvokeAsync<object>("Listen", DotNetObjectRef.Create(this));
  }

  [JSInvokable]
  public Task<string> GetTranscript(string transcript) {
    Console.WriteLine(transcript);
    this.transcript = transcript;
    StateHasChanged();
    return Task.FromResult("C# received: " + transcript);
  }

}
