@page "/study"
@attribute [Authorize]
@using Microsoft.FSharp.Core
@using Microsoft.FSharp.Collections
@using CardOverflow.Entity
@using CardOverflow.Debug
@using CardOverflow.Pure
@using CardOverflow.Api
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Identity
@using CardOverflow.Sanitation
@using CardOverflow.Server.Shared
@inject DbExecutor DbExecutor
@inject Scheduler Scheduler
@inject TimeProvider TimeProvider
@inject IJSRuntime Js
@inject IToastService ToastService

@if (_selectedDeck == null) {
  <div class="container">
    <Heatmap />
    <table class="table">
      <tr>
        <th></th>
        <th>Due</th>
        <th></th>
        <th>
          <button class="btn btn-outline-success" @onclick=@_CreateDeck>
            <i class="fas fa-plus"></i>
          </button>
        </th>
      </tr>
      @foreach (var deck in _decks) {
        <tr>
          <td>
            <button @onclick=@(() => _selectedDeck = deck) class="btn btn-link">
              @deck.Name
            </button>
          </td>
          <td>
            @deck.DueCount
          </td>
          <td>
            @if (@deck.IsDefault) {
              <button type="button" class="btn bg-transparent" @onclick=@(() => ToastService.ShowInfo("This is the default deck."))>
                <i class="text-warning fas fa-star" title="The default deck"></i>
              </button>
            } else {
              <button type="button" class="btn bg-transparent" @onclick=@(() =>_SetDefault(deck.Id))>
                <i class="text-muted far fa-star"></i>
              </button>
            }
          </td>
          <td>
            <Study_DeckMenu Deck=deck
                            Delete=@(modal => _DeleteDeck(deck.Id, modal))
                            Create=@(x => _Create(x.Item1, x.Item2))
                            CancelCreate=_CancelCreateDeck
                            Rename=@(newName => _Rename(deck.Id, newName)) />
          </td>
        </tr>
      }
    </table>
  </div>
} else {
  <StudyDetail DeckId=@_selectedDeck.Id />
}

@code {
  [CascadingParameter] Task<UserClaims> UserTask { get; set; }
  private FSharpList<ViewDeck> _decks = FSharpList<ViewDeck>.Empty;
  private ViewDeck _selectedDeck;

  protected override async Task OnInitializedAsync() {
    var user = await UserTask;
    _decks = await DbExecutor.QueryAsync(db => SanitizeDeckRepository.get(db, user.Id, TimeProvider.utcNow));
  }

  private void _CreateDeck() =>
    _decks = _decks.Append(new ViewDeck(0, false, false, "New Deck", 0, 0)).ToFList();

  private void _CancelCreateDeck() =>
    _decks = _decks.Where(x => x.Id != default).ToFList();

  private async Task _DeleteDeck(int deckId, BSModal modal) {
    var user = await UserTask;
    var x = await DbExecutor.QueryAsync(db => SanitizeDeckRepository.delete(db, user.Id, deckId));
    if (x.IsOk) {
      _decks = _decks.Where(x => x.Id != deckId).ToFList();
      modal.Hide();
    } else {
      ToastService.ShowError(x.ErrorValue);
    }
  }

  private async Task _Create(string newName, BSModal modal) {
    var user = await UserTask;
    var x = await DbExecutor.QueryAsync(db => SanitizeDeckRepository.create(db, user.Id, newName));
    if (x.IsOk) {
      _decks.Single(x => x.Id == default).Id = x.ResultValue;
      modal.Hide();
    } else {
      ToastService.ShowError(x.ErrorValue);
    }
  }

  private void _Rename(int deckId, string newName) =>
    _decks.Single(x => x.Id == deckId).Name = newName;

  private async Task _SetDefault(int deckId) {
    var user = await UserTask;
    var x = await DbExecutor.QueryAsync(db => SanitizeDeckRepository.setDefault(db, user.Id, deckId));
    if (x.IsOk) {
      foreach (var deck in _decks) {
        deck.IsDefault = deck.Id == deckId;
      }
    } else {
      ToastService.ShowError(x.ErrorValue);
    }
  }

}
