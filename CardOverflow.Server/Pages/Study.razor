@page "/study"
@using Microsoft.FSharp.Core
@using CardOverflow.Entity
@using CardOverflow.Debug
@using CardOverflow.Pure
@using CardOverflow.Api
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Identity
@using CardOverflow.Sanitation
@using CardOverflow.Server.Shared
@inject DbExecutor DbExecutor
@inject Scheduler Scheduler
@inject TimeProvider TimeProvider
@inject IJSRuntime Js
@inject IToastService ToastService

@if (User == null) {
  <p><em>You aren't signed in dude.</em></p>
} else if (_selectedFilter == null) {
  <div class="container">
    <Heatmap />
    <table class="table">
      <tr>
        <th></th>
        <th>Due</th>
      </tr>
      @foreach (var filter in _filters) {
        <tr>
          <td>
            <button @onclick=@(() => _selectedFilter = filter) class="btn btn-link">
              @filter.Name
            </button>
          </td>
          <td>
            @filter.Due
          </td>
        </tr>
      }
    </table>
  </div>
} else {
  <StudyDetail Query=@_selectedFilter.Query />
}

@code {
  [CascadingParameter]
  UserEntity User { get; set; }
  private List<ViewFilterWithDue> _filters = new List<ViewFilterWithDue>();
  private ViewFilterWithDue _selectedFilter;

  public override async Task SetParametersAsync(ParameterView parameters) {
    await base.SetParametersAsync(parameters);
    _selectedFilter = null;
  }

  protected override async Task OnInitializedAsync() {
    if (User != null) {
      _filters = await DbExecutor.QueryAsync(db => SanitizeFilterRepository.GetWithDue(db, User.Id));
    }
  }

}
