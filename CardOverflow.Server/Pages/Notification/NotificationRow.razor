@using Microsoft.FSharp.Core
@using Microsoft.FSharp.Collections
@using FSharpx
@using CardOverflow.Entity
@using CardOverflow.Debug
@using CardOverflow.Pure
@using CardOverflow.Server.Pages.Stack
@using CardOverflow.Api
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Identity
@using CardOverflow.Sanitation
@using ThoughtDesign.WebLibrary
@inject DbExecutor DbExecutor
@inject NavigationManager NavigationManager
@inject IToastService ToastService
@inject TimeProvider TimeProvider

<tr>
  <td>
    @Sender()
  </td>
  <td>
    @if (Notification.Message.TryDeckAddedStack(out var deckAddedStack)) {
      <span>
        @Stack(deckAddedStack.New.BranchInstanceId)
        added to
        @Sender()&apos;s
        deck
        @Deck(@deckAddedStack.TheirDeck.Id, deckAddedStack.TheirDeck.Name).
        <CollectToggles Ids=@deckAddedStack.New
                        DeckId=@deckAddedStack.MyDeck.Select(x => x.Id) />
      </span>
    } else if (Notification.Message.TryDeckUpdatedStack(out var deckUpdatedStack)) {
      var collectedIds =
        deckUpdatedStack.Collected
          .Pipe(ListModule.TryHead)
          .Select(x => StackBranchInstanceIdsModule.fromTuple(x.StackId, x.BranchId, x.BranchInstanceId));
      <span>
        @Stack(deckUpdatedStack.New.BranchInstanceId)
        updated in
        @Sender()&apos;s
        deck
        @Deck(@deckUpdatedStack.TheirDeck.Id, deckUpdatedStack.TheirDeck.Name).
        <CollectToggles Ids=@deckUpdatedStack.New
                        DeckId=@(collectedIds.HasValue()
                                 ? FSharpOption<int>.None
                                 : deckUpdatedStack.MyDeck.Select(x => x.Id))
                        IsBranch=@true
                        CollectedIds=@collectedIds />
      </span>
    } else if (Notification.Message.TryDeckDeletedStack(out var deckDeletedStack)) {
      <span>
        @Stack(deckDeletedStack.Deleted.BranchInstanceId)
        deleted from
        @Sender()&apos;s
        deck
        @Deck(deckDeletedStack.TheirDeck.Id, deckDeletedStack.TheirDeck.Name).
      </span>
      <CollectToggles Ids=@deckDeletedStack.Deleted
                      CollectedIds=@(deckDeletedStack.Collected
                                      .Pipe(ListModule.TryHead)
                                      .Select(x => StackBranchInstanceIdsModule.fromTuple(x.StackId, x.BranchId, x.BranchInstanceId))) />
    }
  </td>
  <td>
    <button type="button" class="btn btn-outline-danger" @onclick=@_remove>
      <span class="oi oi-trash"></span>
    </button>
  </td>
  <td>
    <span title=@(Notification.TimeStamp + " UTC")>
      @ViewLogic.timestampToPretty(Notification.TimeStamp, TimeProvider.utcNow)
    </span>
  </td>
</tr>

@code {
  [CascadingParameter] Task<UserClaims> UserTask { get; set; }
  private UserClaims _user = UserClaims.init;
  [Parameter] public Pure.Notification Notification { get; set; }
  [Parameter] public EventCallback Remove { get; set; }

  public override async System.Threading.Tasks.Task SetParametersAsync(ParameterView parameters) {
    await base.SetParametersAsync(parameters);
    _user = await UserTask;
    StateHasChanged();
  }

  private async System.Threading.Tasks.Task _remove() {
    await DbExecutor.QueryAsync(db => NotificationRepository.remove(db, _user.Id, Notification.Id));
    await Remove.InvokeAsync(null);
  }

  private RenderFragment Sender() =>
    @<a href="user/@Notification.SenderId">@Notification.SenderDisplayName</a>;

  private RenderFragment Stack(int instanceId) =>
    @<a href="stack?branchinstance=@instanceId">
      Stack
    </a>;

  private RenderFragment Deck(int deckId, string deckName) =>
    @<span>&quot;<a href="deck/@deckId">@deckName</a>&quot;</span>;

}
