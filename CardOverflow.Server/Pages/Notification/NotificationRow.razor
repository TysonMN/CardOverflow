@using Microsoft.FSharp.Core
@using Microsoft.FSharp.Collections
@using static FSharpx.FSharpOption;
@using CardOverflow.Entity
@using CardOverflow.Debug
@using CardOverflow.Pure
@using CardOverflow.Server.Pages.Stack
@using CardOverflow.Api
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Identity
@using CardOverflow.Sanitation
@using ThoughtDesign.WebLibrary
@inject DbExecutor DbExecutor
@inject NavigationManager NavigationManager
@inject IToastService ToastService
@inject TimeProvider TimeProvider

<tr>
  <td>
    @Sender()
  </td>
  <td>
    @if (Notification.Message.TryDeckAddedStack(out var deckAddedStack)) {
      <span>
        <HoverPreview Padding="0">
          <ResizingIframeBranch LeafId=@(deckAddedStack.New.LeafId) Back />
        </HoverPreview>
        @Stack(deckAddedStack.New.LeafId)
        added to
        @Sender()&apos;s
        deck
        @Deck(@deckAddedStack.TheirDeck.Id, deckAddedStack.TheirDeck.Name).
      </span>
      <div class="float-right">
        <CollectToggles @ref="_addedStackCollectToggles"
                        Ids=@deckAddedStack.New
                        DeckId=@_getDeckId(deckAddedStack.MyDeck)
                        IsBranch=@true
                        CollectedIds=@_collectedState
                        UpdateCollectedIds=@(x => _collectedState = x) />
        <button type="button" class="btn btn-primary"
                @onclick=@(async () => await _addedStackCollectToggles.Collect(async () => await _remove()))>
          Sync & <span class="oi oi-trash"></span>
        </button>
      </div>
    } else if (Notification.Message.TryDeckUpdatedStack(out var deckUpdatedStack)) {
      var showBoth = _collectedState.HasValue() && _collectedState.Value.LeafId != deckUpdatedStack.New.LeafId;
      var newId = $"Notification-{Notification.Id}-New";
      var oldId = $"Notification-{Notification.Id}-Old";
      <span>
        @if (showBoth) {
          <BSTooltip Target="@newId" Placement="Placement.Top">Updated</BSTooltip>
        }
        <span id="@newId">
          <HoverPreview Padding="0">
            <ResizingIframeBranch LeafId=@deckUpdatedStack.New.LeafId Back />
          </HoverPreview>
        </span>
        @if (showBoth) {
          <BSTooltip Target="@oldId" Placement="Placement.Top">Yours</BSTooltip>
          <span id="@oldId">
            <HoverPreview Padding="0">
              <ResizingIframeBranch LeafId=@_collectedState.Value.LeafId Back />
            </HoverPreview>
          </span>
          <a href="stackdiff/@_collectedState.Value.LeafId/@deckUpdatedStack.New.LeafId" class="btn btn-info px-2 py-0" title="Go to diff.">
            &Delta;
          </a>
        }
        @Stack(deckUpdatedStack.New.LeafId)
        updated in
        @Sender()&apos;s
        deck
        @Deck(@deckUpdatedStack.TheirDeck.Id, deckUpdatedStack.TheirDeck.Name).
      </span>
      <div class="float-right">
        <CollectToggles @ref="_updatedStackCollectToggles"
                        Ids=@deckUpdatedStack.New
                        DeckId=@_getDeckId(deckUpdatedStack.MyDeck)
                        IsBranch=@true
                        CollectedIds=@_collectedState
                        UpdateCollectedIds=@(x => _collectedState = x) />
        <button type="button" class="btn btn-primary"
                @onclick=@(async () => await _updatedStackCollectToggles.Collect(async () => await _remove()))>
          Sync & <span class="oi oi-trash"></span>
        </button>
      </div>
    } else if (Notification.Message.TryDeckDeletedStack(out var deckDeletedStack)) {
      <span>
        <HoverPreview Padding="0">
          <ResizingIframeBranch LeafId=@(deckDeletedStack.Deleted.LeafId) Back />
        </HoverPreview>
        @Stack(deckDeletedStack.Deleted.LeafId)
        deleted from
        @Sender()&apos;s
        deck
        @Deck(deckDeletedStack.TheirDeck.Id, deckDeletedStack.TheirDeck.Name).
      </span>
      <div class="float-right">
        <CollectToggles @ref="_deletedStackCollectToggles"
                        Ids=@deckDeletedStack.Deleted
                        DeckId=@_getDeckId(deckDeletedStack.MyDeck)
                        IsBranch=@true
                        CollectedIds=@_collectedState
                        UpdateCollectedIds=@(x => _collectedState = x) />
        <button type="button" class="btn btn-primary"
                @onclick=@(async () => await _collectedState.Select(_ => {
                             _deletedStackCollectToggles.OpenDiscardModal(async () => await _remove());
                             return System.Threading.Tasks.Task.CompletedTask;
                           }).GetOrElse(_remove))>
          Sync & <span class="oi oi-trash"></span>
        </button>
      </div>
    }
  </td>
  <td>
    <button type="button" class="btn btn-outline-danger" @onclick=@_remove>
      <span class="oi oi-trash"></span>
    </button>
  </td>
  <td>
    <span title=@(Notification.Created + " UTC")>
      @ViewLogic.timestampToPretty(Notification.Created, TimeProvider.utcNow)
    </span>
  </td>
</tr>

@code {
  [CascadingParameter] Task<UserClaims> UserTask { get; set; }
  private UserClaims _user = UserClaims.init;
  [Parameter] public Pure.Notification Notification { get; set; }
  [Parameter] public EventCallback Remove { get; set; }
  private FSharpOption<StackLeafIds> _collectedState;
  private CollectToggles _addedStackCollectToggles;
  private CollectToggles _updatedStackCollectToggles;
  private CollectToggles _deletedStackCollectToggles;
  private FSharpOption<Guid> _getDeckId(FSharpOption<IdName> fallbackDeck) =>
    _collectedState.HasValue()
    ? FSharpOption<Guid>.None
    : fallbackDeck.Select(x => x.Id);

  public override async Task SetParametersAsync(ParameterView parameters) {
    await base.SetParametersAsync(parameters);
    _user = await UserTask;
    _collectedState =
      Notification.Message.TryDeckAddedStack(out var deckAddedStack)
      ? deckAddedStack.Collected
      : Notification.Message.TryDeckUpdatedStack(out var deckUpdatedStack)
      ? deckUpdatedStack.Collected
      : Notification.Message.TryDeckDeletedStack(out var deckDeletedStack)
      ? deckDeletedStack.Collected
      : FSharpOption<StackLeafIds>.None;
    StateHasChanged();
  }

  private async System.Threading.Tasks.Task _remove() {
    await DbExecutor.QueryAsync(db => NotificationRepository.remove(db, _user.Id, Notification.Id));
    await Remove.InvokeAsync(null);
  }

  private RenderFragment Sender() =>
  @<a href="user/@Notification.SenderId">@Notification.SenderDisplayName</a>;

private RenderFragment Stack(Guid leafId) =>
@<a href="stack?leaf=@leafId">
  Stack
</a>;

private RenderFragment Deck(Guid deckId, string deckName) =>
@<span>&quot;<a href="deck/@deckId">@deckName</a>&quot;</span>;

}
