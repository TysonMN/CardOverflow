@page "/diff/deck/{TheirDeckId:int}/{MyDeckId:int}"

@using Microsoft.FSharp.Core
@using CardOverflow.Entity
@using CardOverflow.Debug
@using CardOverflow.Pure
@using CardOverflow.Server.Pages.Stack
@using CardOverflow.Api
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Identity
@using CardOverflow.Sanitation
@using ThoughtDesign.WebLibrary
@using Microsoft.FSharp.Collections
@inject DbExecutor DbExecutor
@inject NavigationManager NavigationManager
@inject IToastService ToastService

@if (_diffState == null || _theirDeck == null || _myDeck == null) {
  <span>Loading...</span>
} else {
  <div class="row align-items-center text-center h3 border-bottom mb-3 pb-3">
    <div class="col">
      <div>
        <a href="deck/@_theirDeck.Id">@_theirDeck.Name</a>
      </div>
      <small>
        by <a href="user/@_theirDeck.AuthorId">@_theirDeck.AuthorName</a>
      </small>
    </div>
    <div class="col-1">
      vs.
    </div>
    <div class="col">
      <div>
        <a href="deck/@_myDeck.Id">@_myDeck.Name</a>
      </div>
      <small>
        by <a href="user/@_myDeck.AuthorId">@_myDeck.AuthorName</a>
      </small>
    </div>
  </div>
  @if (_diffState.AddedStack.Any()) {
    <div class="row">
      <div class="col text-center">
        <h4>
          Collect to sync with <a href="user/@_theirDeck.AuthorId">@_theirDeck.AuthorName</a>'s <a href="deck/@_theirDeck.Id">@_theirDeck.Name</a>
        </h4>
        @foreach (var ids in _diffState.AddedStack) {
          <div>
            <AcquireToggles Ids=@(new StackBranchInstanceIds(ids.StackId, ids.BranchId, ids.BranchInstanceId))
                            UpdateAcquiredCards=@(x => x.Single(x => x.Index == ids.Index).AcquiredCardId.Pipe(_switchToMyDeck)) />
            @CardPreview(ids.BranchInstanceId, ids.Index)
            @OtherDeckCheck(ids.DeckId)
          </div>
        }
      </div>
      <div class="col"></div>
    </div>
  }
  @if (_diffState.RemovedStack.Any()) {
    <div class="row">
      <div class="col"></div>
      <div class="col text-center">
        <h4>
          Discard to sync with <a href="user/@_theirDeck.AuthorId">@_theirDeck.AuthorName</a>'s <a href="deck/@_theirDeck.Id">@_theirDeck.Name</a>
        </h4>
        @foreach (var ids in _diffState.RemovedStack) {
          var ids2 = new StackBranchInstanceIds(ids.StackId, ids.BranchId, ids.BranchInstanceId);
          <div>
            <AcquireToggles Ids=@ids2
                            AcquiredIds=@(FSharpOption<StackBranchInstanceIds>.Some(ids2)) />
            @CardPreview(ids.BranchInstanceId, ids.Index)
            @OtherDeckCheck(ids.DeckId)
          </div>
        }
      </div>
    </div>
  }
  @if (_diffState.Unchanged.Any()) {
    <h4 class="text-center">
      Synced
    </h4>
    <div class="row">
      <div class="col-3"></div>
      <div class="col-6 text-center">
        @foreach (var unchanged in _diffState.Unchanged) {
          @CardPreview(unchanged.BranchInstanceId, unchanged.Index)
        }
      </div>
      <div class="col-3"></div>
    </div>
  }
}

@code {
  [CascadingParameter] Task<UserClaims> UserTask { get; set; }
  private UserClaims _user = UserClaims.init;
  [Parameter] public int TheirDeckId { get; set; }
  private PublicDeck _theirDeck;
  [Parameter] public int MyDeckId { get; set; }
  private PublicDeck _myDeck;
  private DiffStateSummary _diffState;

  public override async Task SetParametersAsync(ParameterView parameters) {
    await base.SetParametersAsync(parameters);
    _user = await UserTask;
    await DbExecutor.QueryAsync(db => SanitizeDeckRepository.diff(db, _user.Id, TheirDeckId, MyDeckId)).Match(ToastService, x => _diffState = x);
    await DbExecutor.QueryAsync(db => SanitizeDeckRepository.getPublic(db, _user.Id, TheirDeckId)).Match(ToastService, x => _theirDeck = x);
    await DbExecutor.QueryAsync(db => SanitizeDeckRepository.getPublic(db, _user.Id, MyDeckId)).Match(ToastService, x => _myDeck = x);
    StateHasChanged();
  }

  private async Task _switchToMyDeck(int acquiredCardId) =>
    await DbExecutor.QueryAsync(db => SanitizeDeckRepository.@switch(db, _user.Id, MyDeckId, acquiredCardId)).Match(ToastService);

  private RenderFragment CardPreview(int branchInstanceId, short index) =>
    @<a href="stack?branchinstance=@branchInstanceId">
      <HoverPreview Padding="0">
        <ResizingIframe BranchInstance=@((branchInstanceId, index)) Back />
      </HoverPreview>
      @branchInstanceId
    </a>;

  private RenderFragment OtherDeckCheck(int cardsDeckId) =>
    cardsDeckId == MyDeckId
    ? (RenderFragment)null
    : @<span>Collect to move from @cardsDeckId to @MyDeckId.</span>;

}
