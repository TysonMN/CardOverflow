
@page "/cardoption"
@using Microsoft.FSharp.Core
@using CardOverflow.Entity
@using CardOverflow.Debug
@using CardOverflow.Pure
@using CardOverflow.Api
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Identity
@using CardOverflow.Sanitation
@using CardOverflow.Server.Data
@inherits OwningComponentBase<CardOverflowDb>

@if (User == null) {
  <span>You need to log in dude.</span>
} else if (_options == null) {
  <p><em>Loading...</em></p>
} else {
  <div class="row">
    <div class="col-sm-10">
      <CardOptionEditorDetail Option=@_selected />
    </div>
    <div class="col-sm-2 list-group">
      <h5>Card Options</h5>
      <button type="button" class="btn btn-success" @onclick=@_Add>
        Add
      </button>
      @foreach (var x in _options.Select((x, i) => new { Option = x, Index = i })) {
        <button class="list-group-item list-group-item-action @(_selected.Id == x.Option.Id ? "active" : "")"
                @onclick=@(() => _Select(x.Index))>
          @if (x.Option.IsDefault) {
            <span class="oi oi-star"></span>
          }
          @x.Option.Name
        </button>
      }
    </div>
  </div>
}

@code {
  [CascadingParameter]
  public UserEntity User { get; set; }
  private List<ViewCardOption> _options;
  private ViewCardOption _selected;

  protected override async Task OnInitializedAsync() {
    if (User != null) {
      _options = await SanitizeCardOptionRepository.getAll(Service, User.Id);
      _selected = _options.Single(x => x.IsDefault);
    }
  }

  private void _Select(int index) =>
    _selected = _options.ElementAt(index);

  private void _Add() {
    var option = CardOptionsRepository.defaultCardOptions.Apply(ViewCardOption.load);
    option.Name = "New Card Options";
    option.IsDefault = false;
    _options.Add(option);
    _selected = option;
  }

}
