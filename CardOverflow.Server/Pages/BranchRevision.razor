@page "/branch/{Id:int}/revision"
@using Microsoft.FSharp.Core
@using CardOverflow.Entity
@using CardOverflow.Debug
@using CardOverflow.Pure
@using CardOverflow.Api
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Identity
@using CardOverflow.Sanitation
@inject DbExecutor DbExecutor
@inject IToastService ToastService

@if (_revision == null) {
  <p><em>Loading...</em></p>
} else {
  <div class="d-flex justify-content-between">
    <a href="stack/@_revision.SortedMeta.First().StackId">
      Return to Stack
    </a>
    <h3>
      @if (_revision.Name == null) {
        <span>&laquo; Default &raquo;</span>
      } else {
        <span>@_revision.Name</span>
      }
    </h3>
    <div>
      By <a href="user/@_revision.AuthorId">@_revision.Author</a>
    </div>
  </div>
  <ol class="list-group" style="list-style: decimal inside;">
    @foreach (var meta in _revision.SortedMeta) {
      <li class="list-group-item" style="display: list-item">
        <label>Created:</label> @meta.Created
        @if (meta.Modified != null) {
          <label>Modified:</label> @meta.Modified.Value;
        }
        <ResizingIframeBranch BranchInstanceId=@meta.Id MaxIndexInclusive=@meta.MaxIndexInclusive Back />
      </li>
    }
  </ol>
}

@code {
  [Parameter] public int Id { get; set; }
  [CascadingParameter] Task<UserClaims> UserTask { get; set; }
  private UserClaims _user = UserClaims.init;
  private CardOverflow.Pure.BranchRevision _revision;

  public override async Task SetParametersAsync(ParameterView parameters) {
    await base.SetParametersAsync(parameters);
    var user = await UserTask;
    var x = await DbExecutor.QueryAsync(db => StackRepository.Revisions(db, user.Id, Id));
    if (x.IsOk) {
      _revision = x.ResultValue;
    } else {
      ToastService.ShowError(x.ErrorValue);
    }
    StateHasChanged();
  }

}
