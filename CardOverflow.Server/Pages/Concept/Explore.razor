@using Microsoft.FSharp.Core
@using CardOverflow.Entity
@using CardOverflow.Debug
@using CardOverflow.Pure
@using CardOverflow.Api
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Identity
@using CardOverflow.Sanitation
@inject DbExecutor DbExecutor

<div class="d-flex justify-content-between align-items-center">
  <SearchBar SearchClicked="@SearchClicked" BackLink="/concept/" CreateLink=@(x => $"/concept/{x}") Ids=@_concepts?.Select(x => x.Id.ToString())?.ToList() SelectedId=@SelectedConceptId.ToString() />
</div>
@if (SelectedConceptId == default && ExampleId == default && LeafId == default) {
  @if (_concepts == null) {
    <p><em>Loading...</em></p>
  } else {
    <table class="table">
      <tr>
        <th></th>
        <th>Users</th>
        <th>Name</th>
      </tr>
      @foreach (var concept in _concepts) {
        <tr>
          <td>
            <HoverPreview IsCollected=@concept.IsCollected>
              <ResizingIframeExample LeafId=@concept.Leaf.Id Front />
            </HoverPreview>
          </td>
          <td>
            @concept.Users
          </td>
          <td>
            <a href="/concept/@concept.Id">
              @concept.Leaf.StrippedFront
            </a>
          </td>
        </tr>
      }
    </table>
  }
  <Pager Details=@_details PageChanged=@PageChanged />
} else {
  <Concept ConceptId=@SelectedConceptId ExampleId=@ExampleId LeafId=@LeafId Index=@Index />
}

@code {
  [CascadingParameter] Task<UserClaims> UserTask { get; set; }
  private UserClaims _user = UserClaims.init;
  [Parameter] public Guid? SelectedConceptId { get; set; }
  [Parameter] public Guid? ExampleId { get; set; }
  [Parameter] public Guid? LeafId { get; set; }
  [Parameter] public short? Index { get; set; }
  private IList<CardOverflow.Pure.ExploreConceptSummary> _concepts;
  private PagedListDetails _details;
  private SearchCommand _search = new SearchCommand { Query = "" };

  public override async Task SetParametersAsync(ParameterView parameters) {
    await base.SetParametersAsync(parameters);
    _user = await UserTask;
    if (SelectedConceptId == default && ExampleId == default && LeafId == default && _concepts == default) {
      await PageChanged(1);
    }
    StateHasChanged();
  }

  async Task PageChanged(int pageNumber) {
    var pagedList = await DbExecutor.QueryAsync(db => SanitizeConceptRepository.search(db, _user.Id, pageNumber, _search));
    _details = pagedList.Details;
    _concepts = pagedList.Results.ToList();
  }

  Task SearchClicked(SearchCommand newSearch) {
    SelectedConceptId = null;
    _search = newSearch;
    return PageChanged(1);
  }

}
