@page "/CardTemplate/"
@page "/CardTemplate/{TemplateId:int}"
@using Microsoft.AspNetCore.Mvc
@using Microsoft.FSharp.Core
@using CardOverflow.Entity
@using CardOverflow.Debug
@using CardOverflow.Pure
@using CardOverflow.Api
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Identity
@using CardOverflow.Sanitation
@using CardOverflow.Server.Data
@using Microsoft.AspNetCore.WebUtilities
@inject NavigationManager NavigationManager
@inject IToastService ToastService
@inject DbExecutor DbExecutor

@if (_templates == null) {
  <p><em>"Loading..."</em></p>
} else {
  <div class="row">
    <div class="col-sm-10">
      <CardTemplateEditor Template=@_templates[_selectedIndex] />
    </div>
    <div class="col-sm-2 list-group">
      <h5 class="text-center">Card Templates</h5>
      <button type="button" class="btn btn-success mb-2" @onclick=@_Add>
        <span class="oi oi-plus"></span>
      </button>
      @foreach (var x in _templates.Select((t, i) => new { Template = t, Index = i })) {
        <button class="list-group-item list-group-item-action @(x.Index == _selectedIndex ? "active" : "")"
                @onclick=@(() => _selectedIndex = x.Index)>
          @x.Template.Editable.Name
        </button>
      }
    </div>
  </div>
}

@code {
  [Parameter]
  public int TemplateId { get; set; }
  [CascadingParameter]
  UserEntity User { get; set; }
  private List<ViewCardTemplateWithAllInstances> _templates;
  private int _selectedIndex;

  protected override async Task OnInitializedAsync() {
    if (User != null) {
      _templates = await DbExecutor.QueryAsync(db => SanitizeCardTemplate.GetMine(db, User.Id));
      var selected = TemplateId == 0
        ? _templates.First()
        : _templates.SingleOrDefault(x => x.Id == TemplateId);
      if (selected == null) {
        var r = await DbExecutor.QueryAsync(db => SanitizeCardTemplate.AllInstances(db, TemplateId));
        if (r.IsOk) {
          selected = r.ResultValue;
          _templates = _templates.Prepend(selected).ToList();
        } else {
          ToastService.ShowError(r.ErrorValue);
          selected = _templates.First();
        }
      }
      _selectedIndex = _templates.IndexOf(selected);
    }
  }

  private void _Add() {
    var t = ViewCardTemplateWithAllInstances.initialize(User.Id);
    _templates = _templates.Prepend(t).ToList();
    _selectedIndex = _templates.IndexOf(t);
  }

}
