@using Microsoft.FSharp.Core
@using CardOverflow.Entity
@using CardOverflow.Debug
@using CardOverflow.Pure
@using CardOverflow.Api
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Identity
@using CardOverflow.Sanitation
@using CardOverflow.Server.Data
@inject DbExecutor DbExecutor
@inject IToastService ToastService
@inject UserContentHttpClient UserContentHttpClient
@inject TimeProvider TimeProvider

<div class="d-flex justify-content-end">
  By @(_branch.Author)
  @if (_branch.AuthorId == _user.Id) {
    <a href="branch/@_branch.Id/edit" title="Edit">
      <span class="oi oi-pencil" />
    </a>
  }
  <a href="curate/stack/copy/@Instance.Id" title="Edit a Copy">
    <span class="fas fa-copy" />
  </a>
  <a href="/branch/@_branch.Id/revision" title="Revisions">
    <i class="fas fa-history"></i>
  </a>
  @if (Instance.IsLatest) {
    <span class="fas fa-sync text-success" title="Up to date" />
  } else {
    <a href="stackdiff/@Instance.Id">
      <span class="fas fa-sync text-danger" title="Out of date" />
    </a>
  }
</div>

@code {
  [CascadingParameter] Task<UserClaims> UserTask { get; set; }
  private UserClaims _user = UserClaims.init;
  [Parameter] public BranchInstanceMeta Instance { get; set; }
  [Parameter] public CardOverflow.Pure.ExploreStack Stack { get; set; }
  private Branch _branch => Stack.Branches.Single(b => b.Id == Instance.BranchId);

  public override async Task SetParametersAsync(ParameterView parameters) {
    await base.SetParametersAsync(parameters);
    _user = await UserTask;
    StateHasChanged();
  }

}
