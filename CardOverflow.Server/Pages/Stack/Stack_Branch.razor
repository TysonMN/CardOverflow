@using System.Linq
@using Microsoft.FSharp.Core
@using Microsoft.FSharp.Collections
@using CardOverflow.Entity
@using CardOverflow.Debug
@using CardOverflow.Pure
@using CardOverflow.Api
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Identity
@using CardOverflow.Sanitation
@using CardOverflow.Server.Data
@inject DbExecutor DbExecutor
@inject IToastService ToastService
@inject UserContentHttpClient UserContentHttpClient
@inject TimeProvider TimeProvider

<div class="d-flex h-100">
  <AcquireToggles Instance=@Branch.Instance
                  IsBranch=true
                  AcquiredIds=@AcquiredIds
                  NewAcquiredIds=@(FSharpOption<Ids>.Some(new Ids(Branch.Instance.StackId, Branch.Id, Branch.Instance.Id)))
                  Users=@Branch.Users
                  Subusers=@(_displayAllRevisions && _revisions != default ? (int?) _revisions.SortedMeta.First().Users : null)
                  UpdateAcquiredCards=@UpdateAcquiredCards
                  UpdateAcquiredIds=@UpdateAcquiredIds />
  <button class="list-group-item list-group-item-action @(Selected.Id == Branch.Instance.Id ? "active" : "border-0")" @onclick="@(() => InstanceSelected.InvokeAsync(Branch.Instance))">
    <span class="font-weight-bolder">
      @if (Branch.Name == null) {
        <span>&laquo; Default &raquo;</span>
      } else {
        @Branch.Name
      }
    </span>
    <span class="font-italic float-right">
      by <a href="@($"/user/{Branch.AuthorId}")" style="color:unset">@Branch.Author</a>
    </span>
    @if (_revisions != null && _displayAllRevisions) {
      <div>
        <Stack_BranchSummary Instance=@_revisions.SortedMeta.First() />
      </div>
    }
  </button>
  <BSDropdown Class="align-self-center" DropdownDirection="DropdownDirection.Left">
    <BSDropdownToggle Class="pl-3 bg-transparent"></BSDropdownToggle>
    <BSDropdownMenu>
      @if (Branch.AuthorId == _user.Id) {
        <BSDropdownItem Href="@($"branch/{Branch.Id}/edit")"><span class="oi oi-pencil"></span> Edit</BSDropdownItem>
      }
      <BSDropdownItem Href="@($"curate/stack/copy/{Branch.Instance.Id}")"><span class="fas fa-copy"></span> Copy to a new Stack</BSDropdownItem>
      <BSDropdownItem Href="@($"/branch/{Branch.Id}/revision")" target="_blank"><i class="fas fa-history"></i> Revisions (in new window)</BSDropdownItem>
      <BSDropdownItem OnClick=@toggleRevisions><i class="fas fa-history"></i> Revisions Toggle (this window)</BSDropdownItem>
      @if (Branch.Name != null) {
        <BSDropdownItem Href="@($"stackdiff/{Branch.Instance.Id}")">&Delta; Compare with &laquo; Default &raquo;</BSDropdownItem>
      }
      @if (AcquiredIds?.Value?.BranchInstanceId != null && Branch.Instance.Id != AcquiredIds.Value.BranchInstanceId) {
        <BSDropdownItem Href="@($"stackdiff/{Branch.Instance.Id}/Selected Branch/{AcquiredIds.Value.BranchInstanceId}/Your Collected Branch")">&Delta; Compare with your collected branch</BSDropdownItem>
      }
    </BSDropdownMenu>
  </BSDropdown>
</div>
@if (_revisions != null && _displayAllRevisions) {
  foreach (var revision in _revisions.SortedMeta.Skip(1)) {
    <div class="d-flex h-100 pl-5">
      <AcquireToggles Instance=@revision
                      AcquiredIds=@AcquiredIds
                      NewAcquiredIds=@(FSharpOption<Ids>.Some(new Ids(revision.StackId, revision.BranchId, revision.Id)))
                      Users=@revision.Users
                      UpdateAcquiredCards=@UpdateAcquiredCards
                      UpdateAcquiredIds=@UpdateAcquiredIds />
      <button class="list-group-item list-group-item-action @(Selected.Id == revision.Id ? "active" : "border-0")" @onclick="@(() => InstanceSelected.InvokeAsync(revision))">
        <Stack_BranchSummary Instance=@revision />
      </button>
    </div>
  }
}

@code {
  [CascadingParameter] Task<UserClaims> UserTask { get; set; }
  private UserClaims _user = UserClaims.init;
  [Parameter] public Branch Branch { get; set; }
  [Parameter] public EventCallback<BranchInstanceMeta> InstanceSelected { get; set; }
  [Parameter] public FSharpOption<Ids> AcquiredIds { get; set; }
  [Parameter] public EventCallback<FSharpOption<Ids>> UpdateAcquiredIds { get; set; }
  [Parameter] public BranchInstanceMeta Selected { get; set; }
  [Parameter] public EventCallback<List<AcquiredCard>> UpdateAcquiredCards { get; set; }
  private bool _displayAllRevisions;
  private BranchRevision _revisions;

  public override async Task SetParametersAsync(ParameterView parameters) {
    await base.SetParametersAsync(parameters);
    _user = await UserTask;
    if (Selected.BranchId == Branch.Id && Selected.Id != Branch.Instance.Id && !_displayAllRevisions) {
      await toggleRevisions();
    }
    StateHasChanged();
  }

  private void sub1() {
    foreach (var revision in _revisions.SortedMeta.Where(x => x.IsAcquired)) {
      revision.Users--;
    }
  }

  private async Task toggleRevisions() {
    _displayAllRevisions = !_displayAllRevisions;
    if (_revisions == null) {
      await DbExecutor.QueryAsync(db => StackRepository.Revisions(db, _user.Id, Branch.Id)).Match(ToastService, x => {
        _revisions = x;
        sub1();
      });
    }
    if (!_displayAllRevisions && _revisions.SortedMeta.Skip(1).Select(x => x.Id).Contains(Selected.Id)) {
      await InstanceSelected.InvokeAsync(Branch.Instance);
    }
  }

}
