@using System.Linq
@using Microsoft.FSharp.Core
@using Microsoft.FSharp.Collections
@using CardOverflow.Entity
@using CardOverflow.Debug
@using CardOverflow.Pure
@using CardOverflow.Api
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Identity
@using CardOverflow.Sanitation
@using CardOverflow.Server.Data
@inject DbExecutor DbExecutor
@inject IToastService ToastService
@inject UserContentHttpClient UserContentHttpClient
@inject TimeProvider TimeProvider

<div class="d-flex justify-content-between">
  <h4>Branches</h4>
  <a class="btn btn-outline-success" href="curate/stack/branch/@Root.StackId" title="Add a Branch">
    <i class="fas fa-plus"></i>
  </a>
</div>
<div class="list-group">
  @foreach (var branch in Branches) {
    <div class="d-flex h-100">
      @if (Status.BranchInstanceId?.Value == branch.Instance.Id) {
        <button class="btn btn-unacquire-card">
          <div class="d-flex align-items-center flex-column align-middle">
            <i class="fas fa-bookmark"></i>
            @branch.Users
          </div>
        </button>
      } else {
        <button class="btn btn-acquire-card" @onclick=@(() => _Acquire(ExploreStackAcquiredStatus.NewLatestBranchAcquired(branch.Instance.Id)))>
          <div class="d-flex align-items-center flex-column align-middle">
            <i class="fas fa-bookmark"></i>
            @branch.Users
          </div>
        </button>
      }
      <button class="list-group-item list-group-item-action @(Selected.Id == branch.Instance.Id ? "active" : "border-0")" @onclick="@(() => InstanceSelected.InvokeAsync(branch.Instance))">
        @if (@branch.Name == null) {
          <span class="font-weight-bolder text-center d-block">&laquo; Default &raquo;</span>
        } else {
          @branch.Name
        }
      </button>
    </div>
  }
</div>

@code {
  [CascadingParameter] Task<UserClaims> UserTask { get; set; }
  private UserClaims _user = UserClaims.init;
  [Parameter] public List<Branch> Branches { get; set; }
  [Parameter] public EventCallback<BranchInstanceMeta> InstanceSelected { get; set; }
  [Parameter] public ExploreStackAcquiredStatus Status { get; set; }
  [Parameter] public EventCallback<ExploreStackAcquiredStatus> UpdateStatus { get; set; }
  [Parameter] public BranchInstanceMeta Selected { get; set; }
  [Parameter] public BranchInstanceMeta Root { get; set; }
  [Parameter] public EventCallback<List<AcquiredCard>> UpdateAcquiredCards { get; set; }

  public override async Task SetParametersAsync(ParameterView parameters) {
    await base.SetParametersAsync(parameters);
    _user = await UserTask;
    StateHasChanged();
  }

  private async Task _Acquire(ExploreStackAcquiredStatus status) {
    var x = await DbExecutor.QueryAsync(db => StackRepository.AcquireCardAsync(db, _user.Id, status.BranchInstanceId.Value));
    if (x.IsOk) {
      var ac = await DbExecutor.QueryAsync(db => StackRepository.GetAcquired(db, _user.Id, Root.StackId));
      if (ac.IsOk) {
        await UpdateAcquiredCards.InvokeAsync(ac.ResultValue);
        _UpdateUsers(-1, Status.BranchInstanceId?.Value);
        Status = status;
        await UpdateStatus.InvokeAsync(Status);
        _UpdateUsers(1, Status.BranchInstanceId?.Value);
      } else {
        ToastService.ShowError(ac.ErrorValue);
      }
    } else {
      ToastService.ShowError(x.ErrorValue);
    }
  }

  private void _UpdateUsers(int i, int? instanceId) {
    var branch = Branches.SingleOrDefault(x => x.Instance.Id == instanceId);
    if (branch != null) {
      branch.Summary.Users = branch.Summary.Users + i;
    }
    if (instanceId == Root.Id) {
      Root.Users = Root.Users + i;
    }
  }

}
