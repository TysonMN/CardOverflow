@using Microsoft.FSharp.Core
@using CardOverflow.Entity
@using CardOverflow.Debug
@using CardOverflow.Pure
@using CardOverflow.Api
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Identity
@using CardOverflow.Sanitation
@inject IToastService ToastService
@inject DbExecutor DbExecutor
@inject NavigationManager NavigationManager

<AuthorizeView>
  <div class="d-flex justify-content-between align-items-center">
    <SearchBar SearchClicked="@SearchClicked" BackLink="/my/stack" CreateLink=@(x => $"/my/stack?leaf={x}") Ids=@cards?.Select(x => x.LeafMeta.Id.ToString())?.Distinct()?.ToList() SelectedId=@SelectedInstanceId.ToString() Query=@search.Query />
  </div>
  @if (SelectedInstanceId == null) {
    <div>
      @if (cards == null) {
        <p><em>Loading...</em></p>
      } else {
        <table class="table">
          <tr>
            <th>Preview</th>
            <th>Name</th>
            <th style="min-width: 4rem;">Due</th>
            <th>Tags</th>
          </tr>
          @foreach (var card in cards) {
            <tr>
              <td>
                <HoverPreview IsCollected=@card.LeafMeta.IsCollected>
                  <ResizingIframeBranch LeafId=@card.LeafMeta.Id MaxIndexInclusive=@card.LeafMeta.MaxIndexInclusive Front />
                </HoverPreview>
              </td>
              <td>
                <a href="/my/stack?leaf=@card.LeafMeta.Id">
                  @card.LeafMeta.StrippedFront
                </a>
              </td>
              <td>
                <Due DueDate=@card.Due />
              </td>
              <td>
                @(string.Join(", ", card.Tags))
              </td>
            </tr>
          }
        </table>
      }
      <Pager Details=@details PageChanged=@PageChanged />
    </div>
  } else {
    <Stack LeafId=@SelectedInstanceId.Value IsCurate=true Index=@Index />
  }
</AuthorizeView>

@code {
  [CascadingParameter] Task<UserClaims> UserTask { get; set; }
  private UserClaims _user = UserClaims.init;
  [Parameter] public int? SelectedInstanceId { get; set; }
  [Parameter] public short? Index { get; set; }
  private SearchCommand search = new SearchCommand("", SearchOrder.Popularity);
  private List<Card> cards;
  private PagedListDetails details;

  public override async Task SetParametersAsync(ParameterView parameters) {
    await base.SetParametersAsync(parameters);
    _user = await UserTask;
    if (_user.IsAuthenticated) {
      if (SelectedInstanceId == null && cards == null) {
        await PageChanged(1);
      }
      if (SelectedInstanceId != null) {
        if (cards == null || (cards != null && !cards.Any(card => card.LeafMeta.Id == SelectedInstanceId.Value))) {
          var x = await DbExecutor.QueryAsync(db => CardRepository.getCollectedInstanceFromInstance(db, _user.Id, SelectedInstanceId.Value));
          if (x.IsOk) {
            if (SelectedInstanceId != x.ResultValue) {
              NavigationManager.NavigateTo($"my/stack?leaf={x.ResultValue}");
            } else {
              SelectedInstanceId = x.ResultValue;
            }
          } else {
            SelectedInstanceId = null;
            ToastService.ShowError(x.ErrorValue);
          }
        }
      }
    }
    StateHasChanged();
  }

  async Task PageChanged(int pageNumber) {
    var pagedList = await DbExecutor.QueryAsync(db => SanitizeStackRepository.GetCollectedPages(db, _user.Id, pageNumber, search));
    details = pagedList.Details;
    cards = pagedList.Results.Where(x => x.IsOk).Select(x => x.ResultValue).ToList();
    if (pagedList.Results.Any(x => x.IsError)) {
      foreach (var error in pagedList.Results.Where(x => x.IsError).Select(x => x.ErrorValue)) {
        ToastService.ShowError(error);
      }
      ToastService.ShowError("Please contact us with these errors.");
    }
  }

  Task SearchClicked(SearchCommand newSearch) {
    SelectedInstanceId = null;
    search = newSearch;
    return PageChanged(1);
  }

}
