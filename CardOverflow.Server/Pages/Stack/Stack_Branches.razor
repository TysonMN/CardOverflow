@using System.Linq
@using Microsoft.FSharp.Core
@using Microsoft.FSharp.Collections
@using CardOverflow.Entity
@using CardOverflow.Debug
@using CardOverflow.Pure
@using CardOverflow.Api
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Identity
@using CardOverflow.Sanitation
@using CardOverflow.Server.Data
@inject DbExecutor DbExecutor
@inject IToastService ToastService
@inject UserContentHttpClient UserContentHttpClient
@inject TimeProvider TimeProvider

<table style="width:100%">
  <thead>
    <tr>
      <th scope="col" style="text-align:center;">
        <AcquireToggles Instance=@Stack.Default.Instance
                        IsStack=true
                        AcquiredIds=@AcquiredIds
                        NewAcquiredIds=@(FSharpOption<Ids>.Some(new Ids(Stack.Id, Stack.Default.Instance.BranchId, Stack.Default.Instance.Id)))
                        BranchUsers=@Stack.Users
                        UpdateAcquiredCards=@UpdateAcquiredCards
                        UpdateAcquiredIds=@UpdateAcquiredIds />
      </th>
      <th scope="col" style="width:100%; text-align:center;">
        <h4>Branches</h4>
      </th>
      <th scope="col">
        <a class="btn btn-outline-success" href="stack/branchstack/@Selected.StackId" title="Add a Branch">
          <i class="fas fa-plus"></i>
        </a>
      </th>
    </tr>
  </thead>
  <tbody>
    @foreach (var branch in Branches) {
      <Stack_Branch Branch=@branch
                    InstanceSelected=@InstanceSelected
                    AcquiredIds=@AcquiredIds
                    UpdateAcquiredIds=@UpdateAcquiredIds
                    Selected=@Selected
                    UpdateAcquiredCards=@UpdateAcquiredCards />
    }
  </tbody>
</table>

@code {
  [CascadingParameter] Task<UserClaims> UserTask { get; set; }
  private UserClaims _user = UserClaims.init;
  [Parameter] public ExploreStack Stack { get; set; }
  [Parameter] public List<Branch> Branches { get; set; }
  [Parameter] public EventCallback<BranchInstanceMeta> InstanceSelected { get; set; }
  [Parameter] public FSharpOption<Ids> AcquiredIds { get; set; }
  [Parameter] public EventCallback<FSharpOption<Ids>> UpdateAcquiredIds { get; set; }
  [Parameter] public BranchInstanceMeta Selected { get; set; }
  [Parameter] public EventCallback<List<AcquiredCard>> UpdateAcquiredCards { get; set; }

  public override async Task SetParametersAsync(ParameterView parameters) {
    await base.SetParametersAsync(parameters);
    _user = await UserTask;
    StateHasChanged();
  }

}
