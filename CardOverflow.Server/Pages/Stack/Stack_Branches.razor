@using System.Linq
@using Microsoft.FSharp.Core
@using Microsoft.FSharp.Collections
@using CardOverflow.Entity
@using CardOverflow.Debug
@using CardOverflow.Pure
@using CardOverflow.Api
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Identity
@using CardOverflow.Sanitation
@using CardOverflow.Server.Data
@inject DbExecutor DbExecutor
@inject IToastService ToastService
@inject UserContentHttpClient UserContentHttpClient
@inject TimeProvider TimeProvider

<div class="d-flex justify-content-between">
  <h4>
    @if (Stack.IsAnyAcquired) {
      <i class="ml-2 fas fa-bookmark text-success"></i>
      @(Stack.Users + 1)
    } else {
      <i class="ml-2 fas fa-bookmark"></i>
      @Stack.Users
    }
  </h4>
  <h4>Branches</h4>
  <a class="btn btn-outline-success" href="curate/stack/branch/@Selected.StackId" title="Add a Branch">
    <i class="fas fa-plus"></i>
  </a>
</div>
<div class="list-group">
  @foreach (var branch in Branches) {
    <Stack_Branch Branch=@branch
                  InstanceSelected=@InstanceSelected
                  AcquiredIds=@AcquiredIds
                  UpdateAcquiredIds=@UpdateAcquiredIds
                  Selected=@Selected
                  UpdateAcquiredCards=@UpdateAcquiredCards />
  }
</div>

@code {
  [CascadingParameter] Task<UserClaims> UserTask { get; set; }
  private UserClaims _user = UserClaims.init;
  [Parameter] public ExploreStack Stack { get; set; }
  [Parameter] public List<Branch> Branches { get; set; }
  [Parameter] public EventCallback<BranchInstanceMeta> InstanceSelected { get; set; }
  [Parameter] public FSharpOption<Ids> AcquiredIds { get; set; }
  [Parameter] public EventCallback<FSharpOption<Ids>> UpdateAcquiredIds { get; set; }
  [Parameter] public BranchInstanceMeta Selected { get; set; }
  [Parameter] public EventCallback<List<AcquiredCard>> UpdateAcquiredCards { get; set; }

  public override async Task SetParametersAsync(ParameterView parameters) {
    await base.SetParametersAsync(parameters);
    _user = await UserTask;
    StateHasChanged();
  }

}
