@using System.Linq
@using Microsoft.FSharp.Core
@using Microsoft.FSharp.Collections
@using CardOverflow.Entity
@using CardOverflow.Debug
@using CardOverflow.Pure
@using CardOverflow.Api
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Identity
@using CardOverflow.Sanitation
@using CardOverflow.Server.Data
@using ThoughtDesign.WebLibrary
@inject DbExecutor DbExecutor
@inject IToastService ToastService
@inject UserContentHttpClient UserContentHttpClient
@inject TimeProvider TimeProvider

<table style="width:100%">
  <thead>
    <tr>
      @if (IsExplore) {
        <th scope="col" style="text-align:center;">
          <AcquireToggles IsStack=true
                          AcquiredIds=@AcquiredIds
                          Ids=@(new StackBranchInstanceIds(Stack.Id, Stack.Default.Instance.BranchId, Stack.Default.Instance.Id))
                          BranchUsers=@Stack.Users
                          UpdateAcquiredCards=@UpdateAcquiredCards
                          UpdateAcquiredIds=@UpdateAcquiredIds />
        </th>
      }
      <th scope="col" style="width:100%; text-align:center;">
        @if (AcquiredIds == default) {
          <h4>Branches</h4>
        } else {
          <div class="btn-group" role="group">
            <a class="btn btn-@(IsExplore ? "primary" : "light")" href="stack?branchinstance=@AcquiredIds.Value.BranchInstanceId">
              All Branches
            </a>
            <a class="btn btn-@(!IsExplore ? "primary" : "light")" href="my/stack?branchinstance=@AcquiredIds.Value.BranchInstanceId">
              My Branch
            </a>
          </div>
        }
      </th>
      @if (IsExplore) {
        <th scope="col">
          <a class="btn btn-outline-success" href="stack/branchstack/@Selected.StackId" title="Add a Branch">
            <i class="fas fa-plus"></i>
          </a>
        </th>
      }
    </tr>
  </thead>
  @if (IsExplore) {
    <tbody>
      @foreach (var branch in Branches) {
        <Stack_Branch Branch=@branch
                      InstanceSelected=@InstanceSelected
                      AcquiredIds=@AcquiredIds
                      UpdateAcquiredIds=@UpdateAcquiredIds
                      Selected=@Selected
                      UpdateAcquiredCards=@UpdateAcquiredCards />
      }
    </tbody>
  }
</table>

@code {
  [CascadingParameter] Task<UserClaims> UserTask { get; set; }
  private UserClaims _user = UserClaims.init;
  [Parameter] public ExploreStack Stack { get; set; }
  [Parameter] public List<Branch> Branches { get; set; }
  [Parameter] public EventCallback<BranchInstanceMeta> InstanceSelected { get; set; }
  [Parameter] public FSharpOption<StackBranchInstanceIds> AcquiredIds { get; set; }
  [Parameter] public EventCallback<FSharpOption<StackBranchInstanceIds>> UpdateAcquiredIds { get; set; }
  [Parameter] public BranchInstanceMeta Selected { get; set; }
  [Parameter] public EventCallback<List<CollectedCard>> UpdateAcquiredCards { get; set; }
  [Parameter] public bool IsExplore { get; set; }

  public override async Task SetParametersAsync(ParameterView parameters) {
    await base.SetParametersAsync(parameters);
    _user = await UserTask;
    StateHasChanged();
  }

}
