@using Microsoft.FSharp.Core
@using CardOverflow.Entity
@using CardOverflow.Legacy
@using CardOverflow.Debug
@using CardOverflow.Pure
@using CardOverflow.Api
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Identity
@using CardOverflow.Sanitation
@using CardOverflow.Server.Data
@inject DbExecutor DbExecutor
@inject IToastService ToastService

<div>
  Used by <span class="badge badge-success">@Stack.Summary.Users</span>
  <AuthorizeView>
    <Authorized>
      @if (Stack.IsAnyAcquired) {
        <button class="btn btn-outline-danger" @onclick=@(() => _modal.Show())>
          Discard
        </button>
      } else {
        <button class="btn btn-primary" @onclick=@_acquire>
          Collect
        </button>
      }
    </Authorized>
    <NotAuthorized>
      <p>Log in to Collect</p>
    </NotAuthorized>
  </AuthorizeView>
</div>

<BSModal @ref=_modal>
  <BSModalHeader>
    Are you sure you want to discard?
  </BSModalHeader>
  <BSModalBody>
    <div>
      Discarding a card will delete all all of it's associated Tags, Relationships, and History. Are you sure you want to discard?
    </div>
    <div class="small">
      <em>Suspending will preserve the above data and prevent the card from appearing when you Study.</em>
    </div>
  </BSModalBody>
  <BSModalFooter>
    <div>
      <BSButton Color="Color.Secondary" OnClick=_modal.Hide type="button">
        Cancel
      </BSButton>
      <BSButton Color="Color.Danger" @onclick=@_discard>
        Discard
      </BSButton>
    </div>
  </BSModalFooter>
</BSModal>

@code {
  [CascadingParameter] Task<UserClaims> UserTask { get; set; }
  [Parameter] public CardOverflow.Pure.ExploreStack Stack { get; set; }
  [Parameter] public EventCallback<CardOverflow.Pure.ExploreStack> UpdateStack { get; set; }
  private BSModal _modal;

  private async Task _acquire() {
    var user = await UserTask;
    await DbExecutor.QueryAsync(db => StackRepository.AcquireCardAsync(db, user.Id, Stack.Instance.Id)).Match(ToastService, async _ => {
      Stack.AcquiredIds = FSharpOption<Ids>.Some(new Ids(Stack.Id, Stack.Instance.BranchId, Stack.Instance.Id));
      Stack.Instance.IsAcquired = true;
      Stack.Summary.Users++;
      await UpdateStack.InvokeAsync(Stack);
    });
  }

  private async Task _discard() {
    var user = await UserTask;
    await DbExecutor.QueryAsync(db => StackRepository.unacquireStack(db, user.Id, Stack.Id)).Match(ToastService, async _ => {
      Stack.AcquiredIds = FSharpOption<Ids>.None;
      Stack.Instance.IsAcquired = false;
      Stack.Summary.Users--;
      _modal.Hide();
      await UpdateStack.InvokeAsync(Stack);
    });
  }

}
