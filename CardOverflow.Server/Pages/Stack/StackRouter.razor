@page "/stack"
@page "/stack/{StackId:int}"
@page "/{My}/stack"

@using Microsoft.FSharp.Core
@using CardOverflow.Entity
@using CardOverflow.Debug
@using CardOverflow.Pure
@using CardOverflow.Api
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Identity
@using CardOverflow.Sanitation
@using ThoughtDesign.WebLibrary
@inject DbExecutor DbExecutor
@inject NavigationManager NavigationManager
@implements IDisposable

@if (StackId.HasValue || _branchId.HasValue || _branchInstanceId.HasValue) {
  <Stack StackId=@StackId BranchId=@_branchId BranchInstanceId=@_branchInstanceId IsCurate=@_isCurate />
} else if (_isCurate) {
  <Curate />
} else {
  <Explore />
}

@code {
  [Parameter] public int? StackId { get; set; }
  [Parameter] public string My { get; set; }
  private int? _branchInstanceId { get; set; }
  private int? _branchId;
  private bool _isCurate => My?.ToLower() == "my";

  protected override void OnInitialized() {
    GetQueryStringValues();
    NavigationManager.LocationChanged += HandleLocationChanged; // https://chrissainty.com/working-with-query-strings-in-blazor/
  }

  void HandleLocationChanged(object sender, LocationChangedEventArgs e) {
    GetQueryStringValues();
    StateHasChanged();
  }

  void GetQueryStringValues() {
    if (StackId == null) {
      NavigationManager.TryGetQueryString<int?>("branch", out _branchId);
      if (_branchInstanceId == null) {
        NavigationManager.TryGetQueryString<int?>("branchinstance", out var branchInstanceId);
        _branchInstanceId = branchInstanceId;
      }
    }
  }

  public void Dispose() {
    NavigationManager.LocationChanged -= HandleLocationChanged;
  }

}
