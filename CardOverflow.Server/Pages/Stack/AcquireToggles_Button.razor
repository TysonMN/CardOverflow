@using System.Linq
@using Microsoft.FSharp.Core
@using Microsoft.FSharp.Collections
@using CardOverflow.Entity
@using CardOverflow.Debug
@using CardOverflow.Pure
@using CardOverflow.Api
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Identity
@using CardOverflow.Sanitation
@using CardOverflow.Server.Data
@inject DbExecutor DbExecutor
@inject IToastService ToastService
@inject UserContentHttpClient UserContentHttpClient
@inject TimeProvider TimeProvider

<style>
  .btn-striped {
    background-image: linear-gradient(45deg, rgba(255, 255, 255, .35) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, .35) 50%, rgba(255, 255, 255, .35) 75%, transparent 75%, transparent);
    background-size: 1rem 1rem;
  }

    .btn-striped:hover:enabled {
      background-image: none;
    }

    .btn-striped .users {
      color: black;
    }
</style>
<button class="btn @Css" @onclick=@OnClick>
  <div class="d-flex align-items-center flex-column align-middle">
    <i class="fas fa-bookmark" style="position:absolute; transform: scaleY(1.5) scaleX(@(_scaleX()));"></i>
    <div class="users">
      @if (BranchUsers != default) {
        @BranchUsers
      } else {
        <span>&nbsp;</span>
      }
    </div>
    @if (InstanceUsers != default) {
      <div>
        @InstanceUsers
      </div>
    }
  </div>
</button>

@code {
  [Parameter] public string Css { get; set; }
  [Parameter] public EventCallback OnClick { get; set; }
  [Parameter] public int? BranchUsers { get; set; }
  [Parameter] public int? InstanceUsers { get; set; }
  private double _scaleX() => Math.Max(1.5, (BranchUsers?.ToString() ?? "").Length);

}
