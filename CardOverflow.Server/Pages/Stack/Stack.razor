@using Microsoft.FSharp.Core
@using CardOverflow.Pure
@using System.Linq
@using CardOverflow.Entity
@using CardOverflow.Legacy
@using CardOverflow.Debug
@using CardOverflow.Api
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Identity
@using CardOverflow.Sanitation
@using CardOverflow.Server.Data
@inject DbExecutor DbExecutor
@inject IToastService ToastService
@inject NavigationManager NavigationManager
@inject TimeProvider TimeProvider

@if (_stack == null || Selected == null) {
  <p><em>@_LoadingMessage</em></p>
} else {
  <div class="row">
    <div class="col-xl">
      @if (!Selected.IsLatest) {
        <div class="alert alert-warning" role="alert">
          This is an old revision created
          <span title=@Selected.Created>
            @(ViewLogic.timestampToPretty(Selected.Created, TimeProvider.utcNow)).
          </span>
          The present URL is a permanent link to this revision, which may differ significantly from the
          <a href="stack/@Selected.StackId">
            current revision.
          </a>
          <a href="stackdiff/@Selected.Id">
            Here's the difference
          </a>
          between this old revision and the current revision. Only the card is old - other information like Tags, Comments, and Branches are current.
        </div>
      }
      <Stack_IFrameHeader Stack=@_stack Instance=@Selected UpdateStack=@(x => _stack = x) />
      @foreach (var i in Selected.Indexes) {
        <div class="row">
          <div class=@(_isAcquired() ? "col-10" : "col")>
            <ResizingIframe BranchInstance=@((Selected.Id, i)) Back />
          </div>
          @if (_isAcquired()) {
            <div class="col-2">
              <Stack_Acquired AcquiredCard=@(AcquiredCards.Single(x => x.BranchInstanceMeta.Id == Selected.Id && x.Index == i)) CardStateUpdated=@_CardStateUpdated />
            </div>
          }
        </div>
      }
    </div>
  </div>
  <div class="row">
    <div class="col-xl">
      <Stack_Tag Stack=@_stack />
      <Stack_Relationship Stack=@_stack />
    </div>
    <div class="col-xl">
      <Stack_Comments Stack=@_stack />
    </div>
    <div class="col-xl">
      <Stack_Branch Branches=@_stack.Branches
                    InstanceSelected=@(x => Selected = x)
                    Status=@_stack.AcquiredStatus
                    UpdateStatus=@(x => _stack.AcquiredStatus = x)
                    Selected=@Selected
                    Root=@_stack.Instance
                    UpdateAcquiredCards=@(x => AcquiredCards = x) />
    </div>
  </div>
}

@code {
  [Parameter] public int? StackId { get; set; }
  [Parameter] public int? BranchId { get; set; }
  [Parameter] public int? BranchInstanceId { get; set; }
  [Parameter] public bool IsCurate { get; set; }
  [CascadingParameter] UserEntity User { get; set; }
  CardOverflow.Pure.ExploreStack _stack;
  BranchInstanceMeta Selected;
  List<AcquiredCard> AcquiredCards = new List<AcquiredCard>();
  private string _LoadingMessage = "Loading...";
  private bool _isAcquired() => AcquiredCards.Any(x => x.BranchInstanceMeta.Id == Selected.Id);

  public override async Task SetParametersAsync(ParameterView parameters) {
    await base.SetParametersAsync(parameters);
    if (StackId.HasValue) {
      var x = await DbExecutor.QueryAsync(db => ExploreStackRepository.get(db, User?.Id ?? 0, StackId.Value));
      if (x.IsOk) {
        _stack = x.ResultValue;
        Selected = _stack.Instance;
      } else {
        showError(x.ErrorValue);
      }
    } else if (BranchInstanceId.HasValue) {
      var x = await DbExecutor.QueryAsync(db => ExploreStackRepository.instance(db, User?.Id ?? 0, BranchInstanceId.Value));
      if (x.IsOk) {
        var (instance, stack) = x.ResultValue;
        _stack = stack;
        Selected = _stack.Instance;
        if (instance.Id != stack.Instance.Id) {
          Selected = instance;
        }
      } else {
        showError(x.ErrorValue);
      }
    }
    if (User != null && _stack != null) {
      var r = await DbExecutor.QueryAsync(db => StackRepository.GetAcquired(db, User.Id, _stack.Id));
      if (r.IsOk) {
        AcquiredCards = r.ResultValue;
      } // the only error so far is due to not acquiring the card, so intentionally not showing it.
    }
    StateHasChanged();
  }

  private void showError(string error) {
    ToastService.ShowError(error);
    _LoadingMessage = error;
  }

  private void _CardStateUpdated(CardState state) {
    if (state.IsSuspended && AcquiredCards.All(x => x.CardState.IsSuspended)) {
      _stack.Summary.Users--;
    } else if (!state.IsSuspended && AcquiredCards.All(x => !x.CardState.IsSuspended)) {
      _stack.Summary.Users++;
    }
  }

}
