@using System.Linq
@using Microsoft.FSharp.Core
@using Microsoft.FSharp.Collections
@using CardOverflow.Entity
@using CardOverflow.Debug
@using CardOverflow.Pure
@using CardOverflow.Api
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Identity
@using CardOverflow.Sanitation
@using CardOverflow.Server.Data
@inject DbExecutor DbExecutor
@inject IToastService ToastService
@inject UserContentHttpClient UserContentHttpClient
@inject TimeProvider TimeProvider

<style>
  .btn-striped {
    background-image: linear-gradient(45deg, rgba(255, 255, 255, .35) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, .35) 50%, rgba(255, 255, 255, .35) 75%, transparent 75%, transparent);
    background-size: 1rem 1rem
  }
</style>
@if (AcquiredIds?.Value?.BranchInstanceId == Instance.Id) {
  <AcquireToggles_Button Css="btn-unacquire-card"
                         OnClick=@(() => _modal.Show())
                         Users=@(Users + 1)
                         Subusers=@(Subusers + 1) />
} else {
  @if (AcquiredIds?.Value?.BranchId == Instance.BranchId && IsBranch) {
    <AcquireToggles_Button Css="btn-acquire-card btn-success btn-striped"
                           OnClick=@_Acquire
                           Users=@(Users + 1)
                           Subusers=@Subusers />

  } else {
    <AcquireToggles_Button Css="btn-acquire-card"
                           OnClick=@_Acquire
                           Users=@Users
                           Subusers=@Subusers />
  }
}

<BSModal @ref=_modal>
  <BSModalHeader>
    Are you sure you want to discard?
  </BSModalHeader>
  <BSModalBody>
    <div>
      Discarding a card will delete all all of it's associated Tags, Relationships, and History. Are you sure you want to discard?
    </div>
    <div class="small">
      <em>Suspending will preserve the above data and prevent the card from appearing when you Study.</em>
    </div>
  </BSModalBody>
  <BSModalFooter>
    <div>
      <BSButton Color="Color.Secondary" OnClick=_modal.Hide type="button">
        Cancel
      </BSButton>
      <BSButton Color="Color.Danger" @onclick=@_Discard>
        Discard
      </BSButton>
    </div>
  </BSModalFooter>
</BSModal>

@code {
  [CascadingParameter] Task<UserClaims> UserTask { get; set; }
  private UserClaims _user = UserClaims.init;
  [Parameter] public FSharpOption<Ids> AcquiredIds { get; set; }
  [Parameter] public EventCallback<FSharpOption<Ids>> UpdateAcquiredIds { get; set; }
  [Parameter] public BranchInstanceMeta Instance { get; set; }
  [Parameter] public EventCallback<List<AcquiredCard>> UpdateAcquiredCards { get; set; }

  [Parameter] public int Users { get; set; }
  [Parameter] public int? Subusers { get; set; }
  [Parameter] public FSharpOption<Ids> NewAcquiredIds { get; set; }
  [Parameter] public bool IsBranch { get; set; }
  private BSModal _modal;

  public override async Task SetParametersAsync(ParameterView parameters) {
    await base.SetParametersAsync(parameters);
    _user = await UserTask;
    StateHasChanged();
  }

  private async Task _Acquire() {
    if (_user.Id == 0) {
      ToastService.ShowError("You need to log in to collect this card.");
    } else {
      await DbExecutor.QueryAsync(db => StackRepository.AcquireCardAsync(db, _user.Id, NewAcquiredIds.Value.BranchInstanceId)).Match(ToastService, async x => {
        await DbExecutor.QueryAsync(db => StackRepository.GetAcquired(db, _user.Id, Instance.StackId)).Match(ToastService, async cards => {
          await UpdateAcquiredCards.InvokeAsync(cards);
          await UpdateAcquiredIds.InvokeAsync(NewAcquiredIds);
        });
      });
    }
  }

  private async Task _Discard() {
    var user = await UserTask;
    await DbExecutor.QueryAsync(db => StackRepository.unacquireStack(db, user.Id, Instance.StackId)).Match(ToastService, async _ => {
      await UpdateAcquiredCards.InvokeAsync(ResizeArray.empty<AcquiredCard>());
      await UpdateAcquiredIds.InvokeAsync(FSharpOption<Ids>.None);
      _modal.Hide();
    });
  }

}
