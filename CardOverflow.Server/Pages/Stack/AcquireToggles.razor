@using System.Linq
@using Microsoft.FSharp.Core
@using Microsoft.FSharp.Collections
@using CardOverflow.Entity
@using CardOverflow.Debug
@using CardOverflow.Pure
@using CardOverflow.Api
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Identity
@using CardOverflow.Sanitation
@using CardOverflow.Server.Data
@inject DbExecutor DbExecutor
@inject IToastService ToastService
@inject UserContentHttpClient UserContentHttpClient
@inject TimeProvider TimeProvider

<style>
  .btn-striped {
    background-image: linear-gradient(45deg, rgba(255, 255, 255, .35) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, .35) 50%, rgba(255, 255, 255, .35) 75%, transparent 75%, transparent);
    background-size: 1rem 1rem
  }
</style>
@if (AcquiredIds?.Value?.BranchInstanceId == Instance.Id) {
  <button class="btn btn-unacquire-card">
    <div class="d-flex align-items-center flex-column align-middle">
      <i class="fas fa-bookmark"></i>
      <div>
        @(Users + 1)
      </div>
      @if (Subusers != default) {
        <div>
          (@(Subusers + 1))
        </div>
      }
    </div>
  </button>
} else {
  @if (AcquiredIds?.Value?.BranchId == Instance.BranchId && IsBranch) {
    <button class="btn btn-acquire-card btn-success btn-striped" @onclick=@_Acquire>
      <div class="d-flex align-items-center flex-column align-middle">
        <i class="fas fa-bookmark"></i>
        <div>
          @(Users + 1)
        </div>
        @if (Subusers != default) {
          <div>
            (@Subusers)
          </div>
        }
      </div>
    </button>
  } else {
    <button class="btn btn-acquire-card" @onclick=@_Acquire>
      <div class="d-flex align-items-center flex-column align-middle">
        <i class="fas fa-bookmark"></i>
        <div>
          @Users
        </div>
        @if (Subusers != default) {
          <div>
            (@Subusers)
          </div>
        }
      </div>
    </button>
  }
}

@code {
  [CascadingParameter] Task<UserClaims> UserTask { get; set; }
  private UserClaims _user = UserClaims.init;
  [Parameter] public FSharpOption<Ids> AcquiredIds { get; set; }
  [Parameter] public EventCallback<FSharpOption<Ids>> UpdateAcquiredIds { get; set; }
  [Parameter] public BranchInstanceMeta Instance { get; set; }
  [Parameter] public EventCallback<List<AcquiredCard>> UpdateAcquiredCards { get; set; }

  [Parameter] public int Users { get; set; }
  [Parameter] public int? Subusers { get; set; }
  [Parameter] public FSharpOption<Ids> NewAcquiredIds { get; set; }
  [Parameter] public bool IsBranch { get; set; }

  public override async Task SetParametersAsync(ParameterView parameters) {
    await base.SetParametersAsync(parameters);
    _user = await UserTask;
    StateHasChanged();
  }

  private async Task _Acquire() {
    await DbExecutor.QueryAsync(db => StackRepository.AcquireCardAsync(db, _user.Id, NewAcquiredIds.Value.BranchInstanceId)).Match(ToastService, async x => {
      await DbExecutor.QueryAsync(db => StackRepository.GetAcquired(db, _user.Id, Instance.StackId)).Match(ToastService, async cards => {
        await UpdateAcquiredCards.InvokeAsync(cards);
        await UpdateAcquiredIds.InvokeAsync(NewAcquiredIds);
      });
    });
  }

}
