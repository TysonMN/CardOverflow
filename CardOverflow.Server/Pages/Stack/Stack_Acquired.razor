@using Microsoft.FSharp.Core
@using CardOverflow.Entity
@using CardOverflow.Debug
@using CardOverflow.Pure
@using CardOverflow.Api
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Identity
@using CardOverflow.Sanitation
@using CardOverflow.Server.Data
@inject DbExecutor DbExecutor
@inject IToastService ToastService
@inject UserContentHttpClient UserContentHttpClient
@inject TimeProvider TimeProvider

<div>
  <div class="d-flex">
    <strong class="my-2">
      Setting:&nbsp;
    </strong>
    <CardSettingSelector SettingSelected=_SetSetting SelectedId=@AcquiredCard.CardSettingId />
  </div>
  <div class="d-flex">
    <strong class="my-2">
      Deck:&nbsp;
    </strong>
    <DeckSelector DeckSelected=_SetDeck SelectedId=@AcquiredCard.DeckId />
  </div>
  <div class="d-flex justify-content-between">
    <div>
      <strong>
        Due:
      </strong>
      <span title=@(AcquiredCard.Due + "UTC")>
        <Due DueDate=@AcquiredCard.Due />
      </span>
    </div>
    @if (!_showAdvanced) {
      <button class="btn" @onclick=@(() => _showAdvanced = true)>
        <i class="fas fa-ellipsis-h"></i>
      </button>
    }
  </div>
  @if (_showAdvanced) {
    <div>
      <strong>
        State:
      </strong>
      @AcquiredCard.CardState
    </div>
    <div>
      <strong>
        Is Lapsed:
      </strong>
      @AcquiredCard.IsLapsed
    </div>
    <div>
      <strong>
        Ease Factor:
      </strong>
      @(AcquiredCard.EaseFactorInPermille * 10)%
    </div>
    <div>
      @if (AcquiredCard.CardState.IsSuspended) {
        <button class="btn btn-outline-primary" @onclick=@(() => _editState(CardState.Normal))>
          Unsuspend
        </button>
      } else {
        <button class="btn btn-outline-primary" @onclick=@(() => _editState(CardState.Suspended))>
          Suspend
        </button>
      }
    </div>
  }
</div>

@code {
  [CascadingParameter] Task<UserClaims> UserTask { get; set; }
  [Parameter] public AcquiredCard AcquiredCard { get; set; }
  [Parameter] public EventCallback<CardState> CardStateUpdated { get; set; }
  private bool _showAdvanced;

  private async Task _SetSetting(int newId) {
    var user = await UserTask;
    var r = await DbExecutor.QueryAsync(db => SanitizeCardSettingRepository.setCard(db, user.Id, AcquiredCard.AcquiredCardId, newId));
    if (r.IsOk) {
      ToastService.ShowInfo("Card setting saved!");
    } else {
      ToastService.ShowError(r.ErrorValue);
    }
  }

  private async Task _SetDeck(int newId) {
    var user = await UserTask;
    var r = await DbExecutor.QueryAsync(db => SanitizeDeckRepository.@switch(db, user.Id, newId, AcquiredCard.AcquiredCardId));
    if (r.IsOk) {
      ToastService.ShowInfo("Deck saved!");
    } else {
      ToastService.ShowError(r.ErrorValue);
    }
  }

  private async Task _editState(CardState state) {
    var user = await UserTask;
    var x = await DbExecutor.QueryAsync(db => StackRepository.editState(db, user.Id, AcquiredCard.AcquiredCardId, state));
    if (x.IsOk) {
      AcquiredCard.CardState = state;
      await CardStateUpdated.InvokeAsync(state);
    } else {
      ToastService.ShowError(x.ErrorValue);
    }
  }

}
