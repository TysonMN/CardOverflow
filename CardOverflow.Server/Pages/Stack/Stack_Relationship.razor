@using Microsoft.FSharp.Core
@using CardOverflow.Entity
@using CardOverflow.Debug
@using CardOverflow.Pure
@using CardOverflow.Api
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Identity
@using CardOverflow.Sanitation
@using CardOverflow.Server.Data
@inject DbExecutor DbExecutor
@inject IToastService ToastService
@inject UserContentHttpClient UserContentHttpClient

<div class=@(_showAddRelationship ? "" : "d-flex justify-content-between")>
  <h4>Relationships</h4>
  @if (Stack.IsAnyCollected) {
    @if (_showAddRelationship) {
      <EditForm Model=@Command OnValidSubmit=@Add>
        <div class="form-group btn-group">
          <InputText @bind-Value=@Command.TargetStackLink class="form-control" placeholder="Related Card Link (or #)" /> @*this seems to break validation: @bind-Value:event="oninput"*@
          <InputText @bind-Value=@Command.Name class="form-control" placeholder="New Relationship Name" /> @*this seems to break validation: @bind-Value:event="oninput"*@
          <button type="submit" class="btn btn-primary">Add</button>
        </div>
        <ValidationSummary />
        <DataAnnotationsValidator />
      </EditForm>
    } else {
      <button class="btn btn-outline-success" @onclick=@(() => _showAddRelationship = true)>
        <i class="fas fa-plus"></i>
      </button>
    }
  }
</div>
<ul class="list-unstyled">
  @foreach (var (relationship, stackId) in Stack.Relationships.Where(x => x.IsCollected).Select(x => (x, x.SourceStackId == Stack.Id ? x.TargetStackId : x.SourceStackId))) {
    <li>
      <button type="button" class="btn btn-outline-collected btn-sm" @onclick=@(() => Unacquire(relationship.Name, relationship.SourceStackId, relationship.TargetStackId))>
        <HoverPreview IsCollected=@relationship.IsCollected Padding="0">
          <ChildContent>
            <ResizingIframe StackId=@stackId Front />
          </ChildContent>
          <AdditionalHoverTarget>
            <span class="badge badge-success">@relationship.Users</span>
          </AdditionalHoverTarget>
        </HoverPreview>
        @relationship.PrimaryName<sub><small>@relationship.SecondaryName</small></sub>
      </button>
      <a href="/stack/@stackId">@getHtml(stackId)</a>
    </li>
  }
  @foreach (var (relationship, stackId) in Stack.Relationships.Where(x => !x.IsCollected).Select(x => (x, x.SourceStackId == Stack.Id ? x.TargetStackId : x.SourceStackId))) {
    <li>
      <button type="button" class="btn btn-outline-uncollected btn-sm" @onclick=@(() => Collect(relationship.Name, relationship.SourceStackId, relationship.TargetStackId))>
        <HoverPreview IsCollected=@relationship.IsCollected Padding="0">
          <ChildContent>
            <ResizingIframe StackId=@stackId Front />
          </ChildContent>
          <AdditionalHoverTarget>
            <span class="badge badge-success">@relationship.Users</span>
          </AdditionalHoverTarget>
        </HoverPreview>
        @relationship.PrimaryName<sub><small>@relationship.SecondaryName</small></sub>
      </button>
      <a href="/stack/@stackId">@htmlByCardId[stackId]</a>
    </li>
  }
</ul>

@code {
  [CascadingParameter] Task<UserClaims> UserTask { get; set; }
  private UserClaims _user = UserClaims.init;
  [Parameter] public CardOverflow.Pure.ExploreStack Stack { get; set; }
  AddRelationshipCommand Command;
  IDictionary<int, string> htmlByCardId = new Dictionary<int, string>();
  private bool _showAddRelationship;

  public override async Task SetParametersAsync(ParameterView parameters) {
    await base.SetParametersAsync(parameters);
    Command = new AddRelationshipCommand { SourceStackId = Stack.Id };
    var relationshipIds = Stack.Relationships.SelectMany(x => new List<int> { x.SourceStackId, x.TargetStackId }).Distinct().Where(x => x != Stack.Id).ToList();
    htmlByCardId = relationshipIds.ToDictionary(x => x, _ => "");
    htmlByCardId = (await relationshipIds.Select(async x => (x, await UserContentHttpClient.GetStrippedFront(x)))
      .Apply(Task.WhenAll))
      .ToDictionary(x => x.Item1, x => x.Item2);
    _user = await UserTask;
    StateHasChanged();
  }

  string getHtml(int stackId) =>
    htmlByCardId.ContainsKey(stackId)
    ? htmlByCardId[stackId]
    : "Loading...";

  async Task Add() {
    var x = await DbExecutor.QueryAsync(db => SanitizeRelationshipRepository.Add(db, _user.Id, Command));
    if (x.IsOk) {
      var targetStackId = SanitizeRelationshipRepository.GetStackId(Command.TargetStackLink).ResultValue;
      Stack.Relationships = Stack.Relationships.Append(new ViewRelationship(Command.Name, Stack.Id, targetStackId, true, 1)).ToList();
      if (targetStackId != Stack.Id && !htmlByCardId.ContainsKey(targetStackId)) { // lazy GetStrippedFront - don't use TryAdd
        htmlByCardId.Add(targetStackId, await UserContentHttpClient.GetStrippedFront(targetStackId));
      }
    } else {
      ToastService.ShowError(x.ErrorValue);
    }
  }

  async Task Collect(string name, int sourceStackId, int targetStackId) {
    var x = await DbExecutor.QueryAsync(db => SanitizeRelationshipRepository.Add(db, _user.Id, new AddRelationshipCommand(name, sourceStackId, targetStackId.ToString())));
    if (x.IsOk) {
      Stack.Relationships.Single(r => r.SourceStackId == sourceStackId && r.TargetStackId == targetStackId && r.Name == name).IsCollected = true;
      Stack.Relationships.Single(r => r.SourceStackId == sourceStackId && r.TargetStackId == targetStackId && r.Name == name).Users++;
      StateHasChanged();
    } else {
      ToastService.ShowError(x.ErrorValue);
    }
  }

  async Task Unacquire(string name, int sourceStackId, int targetStackId) {
    await DbExecutor.CommandAsync(db => SanitizeRelationshipRepository.Remove(db, sourceStackId, targetStackId, _user.Id, name));
    Stack.Relationships.Single(r => r.SourceStackId == sourceStackId && r.TargetStackId == targetStackId && r.Name == name).IsCollected = false;
    Stack.Relationships.Single(r => r.SourceStackId == sourceStackId && r.TargetStackId == targetStackId && r.Name == name).Users--;
    StateHasChanged();
  }

}
