@page "/collateinstance/{InstanceId:int}"

@using Microsoft.AspNetCore.Mvc
@using Microsoft.FSharp.Core
@using CardOverflow.Entity
@using CardOverflow.Debug
@using CardOverflow.Pure
@using CardOverflow.Api
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Identity
@using CardOverflow.Sanitation
@using CardOverflow.Server.Data
@using Microsoft.AspNetCore.WebUtilities
@using ThoughtDesign.WebLibrary
@inject NavigationManager NavigationManager
@inject IToastService ToastService
@inject DbExecutor DbExecutor

@if (Instance == null) {
  <p><em>@_loadingMessage</em></p>
} else {
  <div class="row">
    <div class="col-sm">
      <EditForm Model=@Instance OnValidSubmit=@Submit>
        <fieldset disabled=@IsDisabled>
          <div class="input-group">
            <label for="nameInput" class="col-form-label mr-2">
              Name:
            </label>
            <InputText id="nameInput" @bind-Value=@Instance.Name class="form-control mb-2" />
          </div>
          <div class="row">
            <table class="table-borderless my-3">
              <thead>
                <tr>
                  <th>Field Name</th>
                  <th></th>
                  <th></th>
                </tr>
              </thead>
              <tbody>
                @foreach (var (field, i) in Instance.Fields.Select((x, i) => (x, i))) {
                  <tr>
                    <td>
                      <InputText @bind-Value=@field.Name class="form-control" />
                      <ValidationMessage For=@(() => field.Name) />
                    </td>
                    <td>
                      <button type="button" class="btn" @onclick=@(() => DeleteField(i)) disabled=@IsDisabled>
                        <span class="oi oi-trash"></span>
                      </button>
                    </td>
                  </tr>
                }
                <tr>
                  <td></td>
                  <td></td>
                  <td>
                    <button type="button" class="btn btn-success" @onclick=AddField disabled=@IsDisabled>
                      <span class="oi oi-plus"></span>
                    </button>
                  </td>
                </tr>
              </tbody>
            </table>
            <div class="col-sm">
              <h5 class="text-center">CSS</h5>
              <InputTextArea @bind-Value=@Instance.Css class="form-control code" rows="25" />
              <ValidationMessage For=@(() => Instance.Css) />
            </div>
          </div>
          <div class="row">
            @foreach (var template in Instance.JustTemplates) {
              <CollateEditor_Template Template=@template />
            }
          </div>
        </fieldset>
        <div class="float-right mt-3 mr-3">
          <div class="row">
            <div class="btn-group">
              @if (IsDisabled && Collate != null) {
                <h5 class="mt-2 mr-2">Revision</h5>
                <select class="form-control" @onchange=@(x => x.Value.ToString().Apply(int.Parse).Apply(id => Instance = Collate.Instances.Single(x => x.Id == id)))>
                  @foreach (var instance in Collate.Instances.OrderByDescending(x => x.Created)) {
                    <option value=@instance.Id selected=@(Instance.Id == instance.Id)>
                      @instance.EditSummary - @instance.Created
                    </option>
                  }
                </select>
                <button class="btn btn-primary" type="button" @onclick=@(() => { IsDisabled = false; Instance.EditSummary = ""; })>
                  Edit
                </button>
              } else {
                <InputText @bind-Value=@Instance.EditSummary class="form-control" placeholder="Edit Summary" style="width: 500px;" disabled=@IsDisabled />
                <button type="submit" class="btn btn-primary" disabled=@IsDisabled>Save</button>
              }
            </div>
          </div>
          <div class="row">
            <DataAnnotationsValidator />
            <ValidationSummary />
          </div>
        </div>
      </EditForm>
    </div>
  </div>
}
@code {
  [Parameter] public int CollateId { get; set; }
  [Parameter] public int InstanceId { get; set; }
  [Parameter] public ViewCollateInstance Instance { get; set; }
  [Parameter] public bool IsDisabled { get; set; } = true;
  [CascadingParameter] UserEntity User { get; set; }
  [Parameter] public ViewCollateWithAllInstances Collate { get; set; }
  private string _loadingMessage = "Loading...";

  private async Task _isChildComponent() {
    var x = (Collate == null || (Collate.Id != CollateId && CollateId != 0))
      ? await DbExecutor.QueryAsync(db => SanitizeCollate.AllInstances(db, CollateId))
      : FSharpResult<ViewCollateWithAllInstances, string>.NewOk(Collate);
    if (x.IsOk) {
      Collate = x.ResultValue;
      Instance = Collate.Instances.SingleOrDefault(x => x.Id == NavigationManager.GetQueryInt("InstanceId")) ?? Collate.Instances.First();
    } else {
      _loadingMessage = x.ErrorValue;
      ToastService.ShowError(x.ErrorValue);
    }
  }

  private async Task _isInstancePage() {
    var x = await DbExecutor.QueryAsync(db => SanitizeCollate.instance(db, InstanceId));
    if (x.IsOk) {
      Instance = x.ResultValue;
    } else {
      _loadingMessage = x.ErrorValue;
      ToastService.ShowError(x.ErrorValue);
    }
  }

  protected override async Task OnParametersSetAsync() {
    await base.OnParametersSetAsync();
    await (InstanceId == 0
      ? _isChildComponent()
      : _isInstancePage());
  }

  async Task Submit() {
    IsDisabled = true;
    var x = await DbExecutor.QueryAsync(db => SanitizeCollate.Update(db, User.Id, Instance));
    if (x.IsOk) {
      ToastService.ShowSuccess("Saved!");
    } else {
      ToastService.ShowError(x.ErrorValue);
      IsDisabled = false;
    }
  }

  void DeleteField(int ordinal) {
    Instance.Fields.RemoveAt(ordinal);
  }

  void AddField() {
    Instance.Fields.Add(new ViewField {
      Name = "New Field"
    });
  }

}
