@using Microsoft.FSharp.Core
@using CardOverflow.Entity
@using CardOverflow.Debug
@using CardOverflow.Pure
@using CardOverflow.Api
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Identity
@using CardOverflow.Sanitation
@using CardOverflow.Server.Data
@inject DbExecutor DbExecutor
@inject IToastService ToastService
@inject UserContentHttpClient UserContentHttpClient
@inject TimeProvider TimeProvider

<div class="d-flex justify-content-between align-items-center">
  <ExploreCardState Card=@Card UpdateCard=@(x => Card = x) />
  <div>
    By @Card.Author
    @if (Card.AuthorId == User?.Id) {
      <a href="card/@Card.Id/edit" title="Edit">
        <span class="oi oi-pencil" />
      </a>
    }
    <a href="curate/card/copy/@Instance.Id" title="Edit a Copy">
      <span class="fas fa-copy" />
    </a>
    <a href="curate/card/branch/@Card.Id" title="Add a Branch">
      <span class="fas fa-code-branch" />
    </a>
    <a href="/card/@Card.Id/revision" title="Revisions">
      <i class="fas fa-history"></i>
    </a>
    @if (Instance.IsLatest) {
      <span class="fas fa-sync text-success" title="Up to date" />
    } else {
      <a href="carddiff/@Instance.Id">
        <span class="fas fa-sync text-danger" title="Out of date" />
      </a>
    }
  </div>
</div>

@code {
  [CascadingParameter] UserEntity User { get; set; }
  [Parameter] public BranchInstanceMeta Instance { get; set; }
  [Parameter] public CardOverflow.Pure.ExploreCard Card { get; set; }

}
