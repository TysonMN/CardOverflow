@page "/Manage"
@using Microsoft.FSharp.Core
@using CardOverflow.Entity
@using CardOverflow.Debug
@using CardOverflow.Pure
@using CardOverflow.Api
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Identity
@using CardOverflow.Sanitation
@inject CardOverflowDb Db

@if (concepts == null) {
  <p><em>Loading...</em></p>
} else {
  <div>
    @if (editingConcept != null) {
      <ManageEditModal Concept=@editingConcept UpdateConcept=@UpdateConcept Close=@CloseEditConceptModal />
    }
    <table>
      <tr>
        <th>Facet Count</th>
        <th>Name</th>
      </tr>
      @foreach (var concept in concepts) {
        <tr>
          <td>
            @concept.AcquiredFacets.Count()
          </td>
          <td class="@(editingConcept?.Id == concept.Id ? "manage-selected" : "")"
              onclick=@(() =>  ConceptClick(concept.Id))>
            <div class="manage-tooltip-target">
              @concept.Name
              <ul class="manage-tooltip-content">
                @foreach (var facet in @concept.AcquiredFacets) {
                  <li>@facet.Description</li>
                  <li>
                    @* https://stackoverflow.com/questions/19739001/which-is-the-difference-between-srcdoc-and-src-datatext-html-in-an/ *@
                    <ul>
                      @foreach (var card in facet.Cards) {
                        <li>
                          <iframe sandbox allow-scripts class="manage-iframe-tooltip" srcdoc="@card.Front"></iframe>
                        </li>
                      }
                    </ul>
                  </li>
                }
              </ul>
            </div>
          </td>
        </tr>
      }
    </table>
  </div>
}

@code {
  IList<AcquiredConcept> concepts;
  AcquiredConcept editingConcept;
  int userId = 3;

  protected override async Task OnInitAsync() {
    concepts = (await ConceptRepository.GetAcquiredConceptsAsync(Db, 3)).ToList();
  }

  void ConceptClick(int conceptId) {
    var clickedConcept = concepts.First(x => x.Id == conceptId);
    editingConcept =
      new AcquiredConcept {
        Id = conceptId,
        Name = clickedConcept.Name,
        AcquiredFacets = clickedConcept.AcquiredFacets, // medTODO clone
    };
    StateHasChanged();
  }

  void CloseEditConceptModal() {
    editingConcept = null;
  }

  async Task UpdateConcept() {
    var result = SanitizeConceptRepository.Update(Db, userId, editingConcept.Id, editingConcept.Name);
    if (result.IsOk) {
      await result.ResultValue;
      var targetConcept = concepts.First(x => x.Id == editingConcept.Id);
      targetConcept.Name = editingConcept.Name;
      CloseEditConceptModal();
    } else {
      // lowToMedTODO this returns an error; show it
    }
  }

}
