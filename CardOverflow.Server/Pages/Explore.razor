@page "/explore"
@page "/card"
@page "/card/{SelectedCardId:int}"
@using Microsoft.FSharp.Core
@using CardOverflow.Entity
@using CardOverflow.Debug
@using CardOverflow.Pure
@using CardOverflow.Api
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Identity
@using CardOverflow.Sanitation
@inherits OwningComponentBase<CardOverflowDb>

@if (cards == null) {
  <p><em>Loading...</em></p>
} else {
  <SearchBar SearchClicked="@SearchClicked" LinkPrefix="/card/" Ids=@cards.Select(x => x.Id.ToString()).ToList() SelectedId=@SelectedCardId.ToString() />
  if (SelectedCardId == null) {
    <table class="table">
      <tr>
        <th></th>
        <th>Users</th>
        <th>Name</th>
      </tr>
      @foreach (var card in cards) {
        <tr>
          <td>
            <div class="curate-tooltip-target">
              &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
              <span class="oi oi-eye@(card.LatestMeta.IsAcquired ? " text-success" : "")" aria-hidden="true"></span>
              &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
              <div class="curate-tooltip-content">
                <ResizingIframe SrcUrl=@("/card/" + card.Id + "/front")></ResizingIframe>
              </div>
            </div>
          </td>
          <td>
            @card.Users
          </td>
          <td>
            <a href="/card/@card.Id">
              @card.LatestMeta.StrippedFront
            </a>
          </td>
        </tr>
      }
    </table>
    <Pager Details=@details PageChanged=@PageChanged />
  } else {
    <ExploreCard Id=@SelectedCardId.Value />
  }
}

@code {
  IList<CardOverflow.Pure.ExploreCardSummary> cards;
  PagedListDetails details;
  [CascadingParameter]
  UserEntity User { get; set; }
  [Parameter]
  public int? SelectedCardId { get; set; }
  SearchCommand search = new SearchCommand { Query = "" };

  protected override Task OnInitializedAsync() {
    return PageChanged(1);
  }

  async Task PageChanged(int pageNumber) {
    var pagedList = await SanitizeCardRepository.SearchAsync(Service, User?.Id ?? 0, pageNumber, search);
    details = pagedList.Details;
    cards = pagedList.Results.ToList();
  }

  Task SearchClicked(SearchCommand newSearch) {
    SelectedCardId = null;
    search = newSearch;
    return PageChanged(1);
  }

}
