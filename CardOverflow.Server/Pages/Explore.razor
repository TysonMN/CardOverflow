@page "/explore"
@page "/card/{SelectedCardId:int}"
@using Microsoft.FSharp.Core
@using CardOverflow.Entity
@using CardOverflow.Debug
@using CardOverflow.Pure
@using CardOverflow.Api
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Identity
@using CardOverflow.Sanitation
@inject DbExecutor DbExecutor

<div class="d-flex justify-content-between align-items-center">
  <SearchBar SearchClicked="@SearchClicked" BackLink="/explore/" CreateLink=@(x => $"/card/{x}") Ids=@cards?.Select(x => x.Id.ToString())?.ToList() SelectedId=@SelectedCardId.ToString() />
</div>
@if (SelectedCardId == null) {
  @if (cards == null) {
    <p><em>Loading...</em></p>
  } else {
    <table class="table">
      <tr>
        <th></th>
        <th>Users</th>
        <th>Name</th>
      </tr>
      @foreach (var card in cards) {
        <tr>
          <td>
            <div class="curate-tooltip-target">
              &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
              <span class="oi oi-eye@(card.IsAcquired ? " text-success" : "")" aria-hidden="true"></span>
              &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
              <div class="curate-tooltip-content">
                <ResizingIframe SrcUrl=@("/card/" + card.Id + "/front")></ResizingIframe>
              </div>
            </div>
          </td>
          <td>
            @card.Users
          </td>
          <td>
            <a href="/card/@card.Id">
              @card.Instance.StrippedFront
            </a>
          </td>
        </tr>
      }
    </table>
  }
  <Pager Details=@details PageChanged=@PageChanged />
} else {
  <ExploreCard CardId=@SelectedCardId.Value />
}

@code {
  [CascadingParameter] UserEntity User { get; set; }
  [Parameter] public int? SelectedCardId { get; set; }
  private IList<CardOverflow.Pure.ExploreCardSummary> cards;
  private PagedListDetails details;
  private SearchCommand search = new SearchCommand { Query = "" };

  public override async Task SetParametersAsync(ParameterView parameters) {
    await base.SetParametersAsync(parameters);
    if (SelectedCardId == null && cards == null) {
      await PageChanged(1);
      StateHasChanged();
    }
  }

  async Task PageChanged(int pageNumber) {
    var pagedList = await DbExecutor.QueryAsync(db => SanitizeCardRepository.SearchAsync(db, User?.Id ?? 0, pageNumber, search));
    details = pagedList.Details;
    cards = pagedList.Results.ToList();
  }

  Task SearchClicked(SearchCommand newSearch) {
    SelectedCardId = null;
    search = newSearch;
    return PageChanged(1);
  }

}
