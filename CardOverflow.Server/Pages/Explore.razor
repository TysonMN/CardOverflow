@page "/explore"
@page "/card/{SelectedStackId:int}"
@using Microsoft.FSharp.Core
@using CardOverflow.Entity
@using CardOverflow.Debug
@using CardOverflow.Pure
@using CardOverflow.Api
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Identity
@using CardOverflow.Sanitation
@inject DbExecutor DbExecutor

<div class="d-flex justify-content-between align-items-center">
  <SearchBar SearchClicked="@SearchClicked" BackLink="/explore/" CreateLink=@(x => $"/stack/{x}") Ids=@branches?.Select(x => x.Id.ToString())?.ToList() SelectedId=@SelectedStackId.ToString() />
</div>
@if (SelectedStackId == null) {
  @if (branches == null) {
    <p><em>Loading...</em></p>
  } else {
    <table class="table">
      <tr>
        <th></th>
        <th>Users</th>
        <th>Name</th>
      </tr>
      @foreach (var branch in branches) {
        <tr>
          <td>
            <div class="curate-tooltip-target">
              &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
              <span class="oi oi-eye@(branch.IsAcquired ? " text-success" : "")" aria-hidden="true"></span>
              &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
              <div class="curate-tooltip-content">
                <ResizingIframeBranch BranchInstanceId=@branch.Instance.Id Front />
              </div>
            </div>
          </td>
          <td>
            @branch.Users
          </td>
          <td>
            <a href="/branch/@branch.Id">
              @branch.Instance.StrippedFront
            </a>
          </td>
        </tr>
      }
    </table>
  }
  <Pager Details=@details PageChanged=@PageChanged />
} else {
  <ExploreStack StackId=@SelectedStackId.Value />
}

@code {
  [CascadingParameter] UserEntity User { get; set; }
  [Parameter] public int? SelectedStackId { get; set; }
  private IList<CardOverflow.Pure.ExploreBranchSummary> branches;
  private PagedListDetails details;
  private SearchCommand search = new SearchCommand { Query = "" };

  public override async Task SetParametersAsync(ParameterView parameters) {
    await base.SetParametersAsync(parameters);
    if (SelectedStackId == null && branches == null) {
      await PageChanged(1);
      StateHasChanged();
    }
  }

  async Task PageChanged(int pageNumber) {
    var pagedList = await DbExecutor.QueryAsync(db => SanitizeStackRepository.SearchAsync(db, User?.Id ?? 0, pageNumber, search)); // highTODO this should return stacks, not branches
    details = pagedList.Details;
    branches = pagedList.Results.ToList();
  }

  Task SearchClicked(SearchCommand newSearch) {
    SelectedStackId = null;
    search = newSearch;
    return PageChanged(1);
  }

}
