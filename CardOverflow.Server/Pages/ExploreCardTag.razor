@using Microsoft.FSharp.Core
@using CardOverflow.Entity
@using CardOverflow.Debug
@using CardOverflow.Pure
@using CardOverflow.Api
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Identity
@using CardOverflow.Sanitation
@using CardOverflow.Server.Data
@inject DbExecutor DbExecutor
@inject IToastService ToastService
@inject UserContentHttpClient UserContentHttpClient

  <div>
    <div class="d-flex justify-content-between">
      <h3>Tags</h3>
      @if (Card.IsAcquired) {
        <TagAdder CardId=@Card.Id AddTag=@(x => AcquireTag(x.Text)) />
      }
    </div>
    <ul class="d-flex flex-wrap list-unstyled">
      @foreach (var tag in @Card.Tags.Where(x => x.IsAcquired).OrderByDescending(x => x.Count).ThenBy(x => x.Name)) {
        <li class="m-1">
          <button type="button" class="btn btn-outline-success btn-sm" @onclick=@(() => DeleteTag(tag.Name))>
            <span class="badge badge-success">@tag.Count</span> @tag.Name
          </button>
        </li>
      }
      @foreach (var tag in @Card.Tags.Where(x => !x.IsAcquired).OrderByDescending(x => x.Count).ThenBy(x => x.Name)) {
        <li class="m-1">
          <button type="button" class="btn btn-outline-dark btn-sm" @onclick=@(() => AcquireTag(tag.Name, false)) disabled=@(!Card?.Instance?.IsAcquired ?? true)>
            <span class="badge badge-success">@tag.Count</span> @tag.Name
          </button>
        </li>
      }
    </ul>
  </div>

  @code {
    [CascadingParameter] UserEntity User { get; set; }
    [Parameter] public CardOverflow.Pure.ExploreCard Card { get; set; }

    async Task AcquireTag(string name, bool isNew = true) {
      var x = await DbExecutor.QueryAsync(db => SanitizeTagRepository.AddTo(db, User.Id, name, Card.Id));
      if (x.IsOk) {
        if (isNew) {
          Card.Tags = Card.Tags.Append(new ViewTag(name, 0, false)).ToFList();
        }
        Card.Tags.Single(t => t.Name == name).IsAcquired = true;
        Card.Tags.Single(t => t.Name == name).Count++;
        StateHasChanged();
      } else {
        ToastService.ShowError(x.ErrorValue);
      }
    }

    async Task DeleteTag(string tag) {
      var x = await DbExecutor.QueryAsync(db => SanitizeTagRepository.DeleteFrom(db, User.Id, tag, Card.Id));
      if (x.IsOk) {
        Card.Tags.Single(t => t.Name == tag).IsAcquired = false;
        Card.Tags.Single(t => t.Name == tag).Count--;
        StateHasChanged();
      } else {
        ToastService.ShowError(x.ErrorValue);
      }
    }

  }
