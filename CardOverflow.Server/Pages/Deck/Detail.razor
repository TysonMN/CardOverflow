@page "/deck/{DeckId:guid}"

@using Microsoft.FSharp.Core
@using CardOverflow.Entity
@using CardOverflow.Debug
@using CardOverflow.Pure
@using CardOverflow.Server.Pages.Concept
@using CardOverflow.Api
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Identity
@using CardOverflow.Sanitation
@using ThoughtDesign.WebLibrary
@inject DbExecutor DbExecutor
@inject NavigationManager NavigationManager
@inject IToastService ToastService
@inherits QueryStringBase

@if (_deck == null) {
  <span>Loading...</span>
} else {
  <h3>
    <div class="row">
      <div class="col">
        Deck:
        <a href="deck/@_deck.Id">
          @_deck.Name
        </a>
        <small> - by <a href="user/@_deck.AuthorId">@_deck.AuthorName</a></small>
      </div>
      <div class="float-right">
        <FollowButtons Deck=@_deck />
      </div>
    </div>
  </h3>
}
<div class="d-flex justify-content-between align-items-center">
  <SearchBar SearchClicked="@SearchClicked" BackLink=@($"/deck/{DeckId}") CreateLink=@(x => $"/deck/{DeckId}?leaf={x}") Ids=@_concepts?.Select(x => x.Leaf.Id.ToString())?.Distinct()?.ToList() SelectedId=@_selectedLeafId.ToString() />
</div>
@if (_selectedLeafId == default) {
  @if (_concepts == null) {
    <p><em>Loading...</em></p>
  } else {
    <table class="table">
      <tr>
        <th></th>
        <th>Users</th>
        <th>Name</th>
      </tr>
      @foreach (var concept in _concepts) {
        <tr>
          <td>
            <HoverPreview IsCollected=@concept.IsCollected>
              <ResizingIframeBranch LeafId=@concept.Leaf.Id Front />
            </HoverPreview>
          </td>
          <td>
            @concept.Users
          </td>
          <td>
            <a href="/deck/@DeckId?leaf=@concept.Leaf.Id">
              @concept.Leaf.StrippedFront
            </a>
          </td>
        </tr>
      }
    </table>
  }
  <Pager Details=@_details PageChanged=@PageChanged />
} else {
  <Concept LeafId=@_selectedLeafId.Value />
}

@code {
  [CascadingParameter] Task<UserClaims> UserTask { get; set; }
  private UserClaims _user = UserClaims.init;
  [Parameter] public Guid DeckId { get; set; }
  private IList<CardOverflow.Pure.ExploreConceptSummary> _concepts;
  private PagedListDetails _details;
  private SearchCommand _search = new SearchCommand { Query = "" };
  private Guid? _selectedLeafId;
  private DeckWithFollowMeta _deck;

  public override async Task SetParametersAsync(ParameterView parameters) {
    await base.SetParametersAsync(parameters);
    _user = await UserTask;
    if (_selectedLeafId == default) {
      await PageChanged(1);
    }
    await DbExecutor.QueryAsync(db => SanitizeDeckRepository.getDeckWithFollowMeta(db, _user.Id, DeckId)).Match(ToastService, x => _deck = x);
    StateHasChanged();
  }

  async Task PageChanged(int pageNumber) {
    var pagedList = await DbExecutor.QueryAsync(db => SanitizeConceptRepository.searchDeck(db, _user.Id, pageNumber, _search, DeckId));
    _details = pagedList.Details;
    _concepts = pagedList.Results.ToList();
  }

  Task SearchClicked(SearchCommand newSearch) {
    _selectedLeafId = null;
    _search = newSearch;
    return PageChanged(1);
  }

  protected override void GetQueryStringValues() =>
    NavigationManager.TryGetQueryString<Guid?>("leaf", out _selectedLeafId);

}
