@using Microsoft.FSharp.Core
@using CardOverflow.Entity
@using CardOverflow.Debug
@using CardOverflow.Pure
@using CardOverflow.Api
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Identity
@using CardOverflow.Sanitation
@inject IToastService ToastService
@inject DbExecutor DbExecutor

<h5>
  Filters
</h5>
<div class="list-group">
  @foreach (var filter in _filters) {
    <div class="list-group-item d-flex justify-content-between p-0 border-0">
      <button @onclick=@(() => new SearchCommand(filter.Query, SearchOrder.Popularity).Apply(DeckClicked.InvokeAsync)) class="btn btn-light flex-fill text-left">@filter.Name</button>
      <button @onclick=@(() => Edit(filter)) class="oi oi-pencil btn btn-light"></button>
    </div>
  }
  <button class="btn btn-success" @onclick=@Create>
    <span class="oi oi-plus"></span>
  </button>
</div>

<BSModal @ref=Modal>
  <EditForm Model=_activeFilter OnValidSubmit=Save>
    <BSModalHeader OnClick=Modal.Hide>
      @if (_activeFilter.Id == 0) {
        <span>Create a new deck</span>
      } else {
        <span>Edit deck</span>
      }
    </BSModalHeader>
    <BSModalBody>
      <div class="form-group">
        <label for="newDeckNameInput">Name</label>
        <InputText @bind-Value=_activeFilter.Name class="form-control" id="newDeckNameInput" /> @*this seems to break validation: @bind-Value:event="oninput"*@
        <ValidationMessage For=@(() => _activeFilter.Name) />
      </div>
      <div class="form-group">
        <label for="newDeckQueryInput">Query</label>
        <InputText @bind-Value=_activeFilter.Query class="form-control" id="newDeckQueryInput" /> @*this seems to break validation: @bind-Value:event="oninput"*@
        <ValidationMessage For=@(() => _activeFilter.Query) />
      </div>
      <DataAnnotationsValidator />
    </BSModalBody>
    <BSModalFooter Class="d-flex justify-content-between">
      <BSButton Color="Color.Danger" OnClick=@Delete type="button">
        <span class="oi oi-trash"></span>
      </BSButton>
      <div>
        <BSButton Color="Color.Secondary" OnClick=Modal.Hide type="button">
          Cancel
        </BSButton>
        <BSButton Color="Color.Primary" type="submit">
          Save
        </BSButton>
      </div>
    </BSModalFooter>
  </EditForm>
</BSModal>

@code {
  [CascadingParameter] UserEntity User { get; set; }
  [Parameter] public string Query { get; set; }
  [Parameter] public EventCallback<SearchCommand> DeckClicked { get; set; }
  private List<ViewFilter> _filters = new List<ViewFilter>();
  private ViewFilter _activeFilter = new ViewFilter();
  BSModal Modal;

  protected override async Task OnInitializedAsync() {
    _filters = await DbExecutor.QueryAsync(db => SanitizeFilterRepository.Get(db, User?.Id ?? 0));
  }

  async Task Save() {
    var newId = await DbExecutor.QueryAsync(db => SanitizeFilterRepository.UpsertAsync(db, _activeFilter));
    if (_activeFilter.Id == 0) {
      _activeFilter.Id = newId;
      _filters.Add(_activeFilter);
    }
    Modal.Hide();
  }

  async Task Delete() {
    _filters.Remove(_activeFilter);
    var x = await DbExecutor.QueryAsync(db => SanitizeFilterRepository.Delete(db, User.Id, _activeFilter));
    if (x.IsOk) {
      ToastService.ShowSuccess("Deleted!");
    } else {
      ToastService.ShowError(x.ErrorValue);
    }
    Modal.Hide();
  }

  void Create() {
    _activeFilter = new ViewFilter(0, User.Id, "New Filter", Query);
    Modal.Show();
  }

  Task Edit(ViewFilter filter) {
    _activeFilter = filter;
    Modal.Show();
    return DeckClicked.InvokeAsync(new SearchCommand(filter.Query, SearchOrder.Popularity));
  }

}
