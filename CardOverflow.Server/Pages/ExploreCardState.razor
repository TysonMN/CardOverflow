@using Microsoft.FSharp.Core
@using CardOverflow.Entity
@using CardOverflow.Legacy
@using CardOverflow.Debug
@using CardOverflow.Pure
@using CardOverflow.Api
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Identity
@using CardOverflow.Sanitation
@using CardOverflow.Server.Data
@inject DbExecutor DbExecutor
@inject IToastService ToastService

<div>
  Used by <span class="badge badge-success">@Stack.Summary.Users</span>
  @if (User == null) {
    <p>Log in to Get</p>
  } else {
    @if (Stack.IsAnyAcquired) {
      <button class="btn btn-outline-danger" @onclick=@(() => _modal.Show())>
        Discard
      </button>
    } else {
      <button class="btn btn-primary" @onclick=@_acquire>
        Collect
      </button>
    }
  }
</div>

<BSModal @ref=_modal>
  <BSModalHeader>
    Are you sure you want to discard?
  </BSModalHeader>
  <BSModalBody>
    <div>
      Discarding a card will delete all all of it's associated Tags, Relationships, and History. Are you sure you want to discard?
    </div>
    <div class="small">
      <em>Suspending will preserve the above data and prevent the card from appearing when you Study.</em>
    </div>
  </BSModalBody>
  <BSModalFooter>
    <div>
      <BSButton Color="Color.Secondary" OnClick=_modal.Hide type="button">
        Cancel
      </BSButton>
      <BSButton Color="Color.Danger" @onclick=@_discard>
        Discard
      </BSButton>
    </div>
  </BSModalFooter>
</BSModal>

@code {
  [CascadingParameter] UserEntity User { get; set; }
  [Parameter] public CardOverflow.Pure.ExploreCard Stack { get; set; }
  [Parameter] public EventCallback<CardOverflow.Pure.ExploreCard> UpdateStack { get; set; }
  private BSModal _modal;

  private async Task _acquire() {
    await DbExecutor.CommandAsync(db => StackRepository.AcquireCardAsync(db, User.Id, Stack.Instance.Id));
    var ac = await DbExecutor.QueryAsync(db => StackRepository.GetAcquired(db, User.Id, Stack.Id));
    if (ac.IsOk) {
      Stack.AcquiredStatus = ExploreCardAcquiredStatus.NewExactInstanceAcquired(Stack.Instance.Id);
      Stack.Instance.IsAcquired = true;
      Stack.Summary.Users++;
      await UpdateStack.InvokeAsync(Stack);
    } else {
      ToastService.ShowError(ac.ErrorValue);
    }
  }

  private async Task _discard() {
    await DbExecutor.CommandAsync(db => StackRepository.deleteAcquiredCard(db, User.Id, Stack.Id));
    Stack.AcquiredStatus = ExploreCardAcquiredStatus.NotAcquired;
    Stack.Instance.IsAcquired = false;
    Stack.Summary.Users--;
    _modal.Hide();
    await UpdateStack.InvokeAsync(Stack);
  }

}
