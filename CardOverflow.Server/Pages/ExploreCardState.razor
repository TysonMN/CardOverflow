@using Microsoft.FSharp.Core
@using CardOverflow.Entity
@using CardOverflow.Legacy
@using CardOverflow.Debug
@using CardOverflow.Pure
@using CardOverflow.Api
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Identity
@using CardOverflow.Sanitation
@using CardOverflow.Server.Data
@inject DbExecutor DbExecutor
@inject IToastService ToastService

<div>
  Gotten by <span class="badge badge-success">@Card.Summary.Users</span>
  @if (User == null) {
    <p>Log in to Get</p>
  } else {
    @if (Card.IsAcquired) {
      <button class="btn btn-danger" @onclick=@_discard>
        Discard
      </button>
      @if (AcquiredCard.CardState.IsSuspended) {
        <button class="btn btn-primary" @onclick=@(() => _editState(CardState.Normal))>
          Unsuspend
        </button>
      } else {
        <button class="btn btn-primary" @onclick=@(() => _editState(CardState.Suspended))>
          Suspend
        </button>
      }
    } else {
      <button class="btn btn-primary" @onclick=@_acquire>
        Get
      </button>
    }
  }
</div>

@code {
  [CascadingParameter] UserEntity User { get; set; }
  [Parameter] public CardOverflow.Pure.ExploreCard Card { get; set; }
  [Parameter] public AcquiredCard AcquiredCard { get; set; }

  private async Task _acquire() {
    await DbExecutor.QueryAsync(db => CardRepository.AcquireCardAsync(db, User.Id, Card.Instance.Id));
    var ac = await DbExecutor.QueryAsync(db => CardRepository.GetAcquired(db, User.Id, Card.Id));
    if (ac.IsOk) {
      AcquiredCard = ac.ResultValue;
      Card.Instance.IsAcquired = true;
      Card.Summary.Users++;
    } else {
      ToastService.ShowError(ac.ErrorValue);
    }
  }

  private async Task _discard() {
    var x = await DbExecutor.QueryAsync(db => CardRepository.deleteAcquired(db, User.Id, AcquiredCard.AcquiredCardId));
    if (x.IsOk) {
      Card.Instance.IsAcquired = false;
      Card.Summary.Users--;
    } else {
      ToastService.ShowError(x.ErrorValue);
    }
  }

  private async Task _editState(CardState state) {
    var x = await DbExecutor.QueryAsync(db => CardRepository.editState(db, User.Id, AcquiredCard.AcquiredCardId, state));
    if (x.IsOk) {
      AcquiredCard.CardState = state;
    } else {
      ToastService.ShowError(x.ErrorValue);
    }
  }

}
