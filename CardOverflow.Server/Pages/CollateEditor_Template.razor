@using Microsoft.AspNetCore.Mvc
@using Microsoft.FSharp.Core
@using CardOverflow.Entity
@using CardOverflow.Debug
@using CardOverflow.Pure
@using CardOverflow.Api
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Identity
@using CardOverflow.Sanitation
@using CardOverflow.Server.Data
@using Microsoft.AspNetCore.WebUtilities
@using ThoughtDesign.WebLibrary
@inject NavigationManager NavigationManager
@inject IToastService ToastService
@inject DbExecutor DbExecutor

<div class="card">
  <div class="card-header">
    <h3>
      <a class="text-muted" type="button" @onclick=@_toggleCollapse>
        @if (isCollapsed) {
          <span class="oi oi-chevron-right"></span>
        } else {
          <span class="oi oi-chevron-bottom"></span>
        }
      </a>
      @Template.Name
    </h3>
  </div>
  @if (!isCollapsed) {
    <div class="card-body">
      <h5 class="text-center">Question Template</h5>
      <div class="row">
        <div class="col">
          <InputTextArea @bind-Value=@Template.Front class="form-control code" rows="25" />
          <ValidationMessage For=@(() => Template.Front) />
        </div>
        <div class="col">
          <iframe sandbox="allow-scripts" srcdoc=@_front style="height: 30vh; width: 100%; resize: vertical;"></iframe>
        </div>
      </div>
      <h5 class="text-center">Answer Template</h5>
      <div class="row">
        <div class="col">
          <InputTextArea @bind-Value=@Template.Back class="form-control code" rows="25" />
          <ValidationMessage For=@(() => Template.Back) />
        </div>
        <div class="col">
          <iframe sandbox="allow-scripts" srcdoc=@_back style="height: 30vh; width: 100%; resize: vertical;"></iframe>
        </div>
      </div>
    </div>
  }
</div>

@code {
  [Parameter] public Template Template { get; set; }
  [Parameter] public string Css { get; set; }
  bool isCollapsed;

  private void _toggleCollapse() => isCollapsed = !isCollapsed;
  private Tuple<string, string, string, string> _x => Template.FrontBackFrontSynthBackSynth(Css);
  private string _front => _x.Item1;
  private string _back => _x.Item2;

}
