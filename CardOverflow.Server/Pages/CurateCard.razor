@page "/Curate/Card/{Id:int}"
@using Microsoft.FSharp.Core
@using CardOverflow.Entity
@using CardOverflow.Debug
@using CardOverflow.Pure
@using CardOverflow.Api
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Identity
@using CardOverflow.Sanitation
@using Syncfusion.EJ2.Blazor
@using Syncfusion.EJ2.Blazor.RichTextEditor
@inject CardOverflowDb Db
@*medTODO add "next" and "previous" navigation buttons that move up/down the list, and it'll need to remember the search parameters*@

@if (Card == null) {
  <p><em>Loading...</em></p>
} else {
  <EditForm Model="@Card" OnValidSubmit="@UpdateCard">
    <div class="form-group">
      <div class="row">
        <div class="col-sm">
          @foreach (var field in Card.CardInstance.FieldValues) {
            <label><b>@field.Field.Name: </b></label>
            <EjsRichTextEditor @bind-Value=@field.Value>
              <RichTextEditorToolbarSettings Items=@Tools></RichTextEditorToolbarSettings>
            </EjsRichTextEditor>
          }
        </div>
        <div class="col-sm">
          <a href="CardTemplateInstance/@Card.CardTemplateInstance.Id">Card Template Instance</a>
          @* https://stackoverflow.com/questions/19739001/which-is-the-difference-between-srcdoc-and-src-datatext-html-in-an/ *@
          <iframe sandbox allow-scripts class="curate-iframe" srcdoc="@Card.CardInstance.FrontBackFrontSynthBackSynth.Item2"></iframe>
          Tags:
          <ul>
            @foreach (var tag in Card.Tags) {
              <li>
                @tag
              </li>
            }
          </ul>
        </div>
      </div>
    </div>
    <div class="modal-footer">
      <div class="row">
        <button type="submit" class="btn btn-primary">Save</button>
      </div>
      <div class="row">
        <DataAnnotationsValidator />
        <ValidationSummary />
      </div>
    </div>
  </EditForm>
}

@code {
  private object[] Tools = new object[] { "Bold", "Italic", "Underline", "SubScript", "SuperScript", "StrikeThrough", "FontName", "FontSize", "FontColor", "BackgroundColor", "|", "Formats", "Alignments", "OrderedList", "UnorderedList", "Outdent", "Indent", "|", "CreateTable", "CreateLink", "Image", "|", "ClearFormat", "SourceCode", "FullScreen", "|", "Undo", "Redo" };
  AcquiredCard Card;
  [Parameter]
  public int Id { get; set; }
  [CascadingParameter]
  UserEntity User { get; set; }

  protected override async Task OnInitializedAsync() {
    Card = (await CardRepository.GetAcquired(Db, User?.Id ?? 0, Id)).ResultValue; // medTODO report errors
  }

  async Task UpdateCard() {
    var result = SanitizeCardRepository.Update(Db, User.Id, Card);
    if (result.IsOk) {
      await result.ResultValue;
      // lowToMedTODO display message that save worked
    } else {
      // lowToMedTODO this returns an error; show it
    }
  }

}
