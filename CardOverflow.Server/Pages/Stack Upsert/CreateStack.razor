@page "/stack/create"
@attribute [Authorize]
@using Microsoft.FSharp.Core
@using CardOverflow.Entity
@using CardOverflow.Debug
@using CardOverflow.Pure
@using CardOverflow.Api
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Identity
@using CardOverflow.Sanitation
@using Syncfusion.EJ2.Blazor
@using Syncfusion.EJ2.Blazor.RichTextEditor
@inject IToastService ToastService
@inject DbExecutor DbExecutor

@if (_command == null || _gromplates == null) {
  <p><em>@LoadingMessage</em></p>
} else {
  <EditStackDetail EditStack=@_command Gromplates=@_gromplates NewEditStackOnSave=true />
}

@code {
  [CascadingParameter] Task<UserClaims> UserTask { get; set; }
  private UserClaims _user = UserClaims.init;
  string LoadingMessage = "Loading...";
  private ViewEditStackCommand _command;
  private List<ViewGromplateWithAllLeafs> _gromplates;

  protected override async Task OnParametersSetAsync() {
    await base.OnParametersSetAsync();
    _user = await UserTask;
    var x = await DbExecutor.QueryAsync(db => SanitizeStackRepository.getUpsert(db, _user.Id, UpsertCardSource.NewVNewOriginal_UserId(_user.Id), UpsertIdsC.Create())); // lowTODO just pass the userId normally, not as part of a DU
    if (x.IsOk) {
      _command = x.ResultValue;
    } else {
      ToastService.ShowError(x.ErrorValue);
    }
    _gromplates = (await DbExecutor.QueryAsync(db => SanitizeGromplate.GetMine(db, _user.Id))).ToList();
    StateHasChanged();
  }

}
