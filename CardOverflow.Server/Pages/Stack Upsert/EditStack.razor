@page "/stack/editbranch/{BranchId:guid}"
@page "/stack/copyleaf/{CopySourceLeafId:guid}"
@page "/stack/branchstack/{BranchSourceStackId:guid}"
@attribute [Authorize]
@using Microsoft.FSharp.Core
@using CardOverflow.Entity
@using CardOverflow.Debug
@using CardOverflow.Pure
@using CardOverflow.Api
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Identity
@using CardOverflow.Sanitation
@using Syncfusion.EJ2.Blazor
@using Syncfusion.EJ2.Blazor.RichTextEditor
@inject IToastService ToastService
@inject DbExecutor DbExecutor

@if (_command == null) {
  <p><em>@LoadingMessage</em></p>
} else {
  <EditStackDetail EditStack=@_command />
}

@code {
  [Parameter] public Guid BranchId { get; set; }
  [Parameter] public Guid CopySourceLeafId { get; set; }
  [Parameter] public Guid BranchSourceStackId { get; set; }
  string LoadingMessage = "Loading...";
  ViewEditStackCommand _command;

  private async Task _TrySetCommandAndCard(Task<FSharpResult<ViewEditStackCommand, string>> result) {
    var x = await result;
    if (x.IsOk) {
      _command = x.ResultValue;
    } else {
      LoadingMessage = x.ErrorValue;
      ToastService.ShowError(x.ErrorValue);
    }
  }

  private Task<FSharpResult<ViewEditStackCommand, string>> _GetCommandAndCard() {
    if (BranchId != default) {
      return DbExecutor.QueryAsync(db => SanitizeStackRepository.getUpsert(db, UpsertCardSource.NewVUpdate_BranchId(BranchId), UpsertIdsC.Create())); // highTODO this only makes 1 card id
    } else if (CopySourceLeafId != default) {
      return DbExecutor.QueryAsync(db => SanitizeStackRepository.getUpsert(db, UpsertCardSource.NewVNewCopySource_LeafId(CopySourceLeafId), UpsertIdsC.Create())); // highTODO this only makes 1 card id
    } else if (BranchSourceStackId != default) {
      return DbExecutor.QueryAsync(db => SanitizeStackRepository.getUpsert(db, UpsertCardSource.NewVNewBranch_SourceStackId(BranchSourceStackId), UpsertIdsC.Create())); // highTODO this only makes 1 card id
    } else {
      return FSharpResult<ViewEditStackCommand, string>.NewError("Invalid id provided.").Apply(Task.FromResult);
    }
  }

  public override async Task SetParametersAsync(ParameterView parameters) {
    await base.SetParametersAsync(parameters);
    await _GetCommandAndCard().Apply(_TrySetCommandAndCard);
    StateHasChanged();
  }

}
