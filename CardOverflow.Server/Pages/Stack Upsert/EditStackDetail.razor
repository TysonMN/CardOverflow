@using Microsoft.FSharp.Core
@using CardOverflow.Entity
@using CardOverflow.Debug
@using Microsoft.FSharp.Collections
@using CardOverflow.Pure
@using CardOverflow.Api
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Identity
@using CardOverflow.Sanitation
@using Syncfusion.EJ2.Blazor
@using Syncfusion.EJ2.Blazor.RichTextEditor
@inject IToastService ToastService
@inject DbExecutor DbExecutor

@if (Gromplates == null) {
  <p><em>Loading...</em></p>
} else {
  <EditForm Model=@EditStack OnValidSubmit=@UpdateCard @onkeydown=@OnKeyDown tabindex="0" style="outline: none;">
    <fieldset disabled=@_isDisabled>
      <div class="form-group">
        <div class="row">
          <div class="col-sm">
            @if (EditStack.Kind.IsNewBranch_Title || EditStack.Kind.IsNewLeaf_Title) {
              <div class="input-group">
                <label for="branchTitleInput" class="col-form-label mr-2">
                  Branch Title:
                </label>
                <InputText @bind-Value=@EditStack.Title class="form-control" id="branchTitleInput" />
              </div>
            }
            @foreach (var field in EditStack.FieldValues) {
              <EditStackField Field=@field ValueUpdated=@(x => { field.Value = x; trySetIndexCount(); }) IsDisabled=@_isDisabled />
            }
          </div>
          <div class="col-sm">
            <div class="row">
              <a href="Gromplate/@_selectedGromplateId" class="col-sm-2 mt-2">
                Card Template
              </a>
              <select value=@_selectedGromplateId class="form-control col-sm-10" @onchange=@(x => x.Value.ToString().Apply(Guid.Parse).Do(id => UpdateSelectedGromplate(id)))>
                @foreach (var gromplate in Gromplates) {
                  <option value=@gromplate.Id>@gromplate.Editable.Name</option>
                }
              </select>
            </div>
            <div class="row">
              <a href="Gromplate/@_selectedGromplateId?LeafId=@_selectedGrompleafId" class="col-sm-2 mt-2" tabindex="-1">
                Revision
              </a>
              <select value=@_selectedGrompleafId class="form-control col-sm-10" @onchange=@(x => x.Value.ToString().Apply(Guid.Parse).Do(UpdateSelectedGrompleaf))>
                @foreach (var leaf in _selectedGrompleafs) {
                  <option value=@leaf.Id>@leaf.Created - @leaf.EditSummary</option>
                }
              </select>
            </div>
            @if (EditStack.Backs.IsOk) {
              @foreach (var (back, i) in EditStack.Backs.ResultValue.Select((x, i) => (x, i))) {
                <iframe sandbox="allow-scripts" srcdoc=@back style="height: @(80/_indexCount)vh; width: 100%; resize: vertical;"></iframe>
                <EditStackDetail_Card Command=@_ccCommands.ElementAtOrDefault(i) UpdateCommand=@(command => _updateCardCommand(i, command)) />
              }
            } else {
              <span>
                Error: @EditStack.Backs.ErrorValue
              </span>
            }
          </div>
        </div>
      </div>
      <div class="row">
        <div class="col-sm">
          @if (EditStack.Kind.TryGetCopySourceLeafId(out var leafId)) {
            <span>Copied from</span>
            <a href="leaf/@leafId">
              Card
            </a>
          }
          @if (EditStack.Kind.IsNewBranch_Title) {
            <span>Branched from</span>
            <a href="stack/@EditStack.Ids.StackId">
              Stack
            </a>
          }
        </div>
        <div class="col-sm">
          <div class="row mx-1">
            <span class="btn-group w-100">
              <InputText @bind-Value=@EditStack.EditSummary class="form-control w-100" placeholder="Edit Summary" />
              <button type="button" class="btn btn-primary" @onclick=@UpdateCard>Save</button>
            </span>
          </div>
          <div class="row float-right">
            <DataAnnotationsValidator />
            <ValidationSummary />
            @if (_savedBranchId != default) {
              <span>
                Saved! Link to
                <a href="stack?branch=@_savedBranchId">
                  card.
                </a>
              </span>
            }
          </div>
        </div>
      </div>
    </fieldset>
  </EditForm>
}

@code {
  [Parameter] public ViewEditStackCommand EditStack { get; set; }
  [Parameter] public bool NewEditStackOnSave { get; set; }
  [Parameter] public List<ViewGromplateWithAllLeafs> Gromplates { get; set; }
  [CascadingParameter] Task<UserClaims> UserTask { get; set; }
  private List<EditCardCommand> _ccCommands = new List<EditCardCommand>();
  private UserClaims _user = UserClaims.init;
  private List<ViewGrompleaf> _selectedGrompleafs;
  private Guid _selectedGromplateId;
  private Guid _selectedGrompleafId;
  private bool _isDisabled;
  private Guid _savedBranchId;

  private void _updateCardCommand(int i, EditCardCommand command) {
    while (_ccCommands.ElementAtOrDefault(i) == default) {
      _ccCommands.Add(EditCardCommand.init);
    }
    _ccCommands[i] = command;
  }

  public override async Task SetParametersAsync(ParameterView parameters) {
    await base.SetParametersAsync(parameters);
    _user = await UserTask;
    if (Gromplates == null) {
      Gromplates = await DbExecutor.QueryAsync(db => SanitizeGromplate.GetMineWith(db, _user.Id, EditStack.Grompleaf.GromplateId));
    }
    if (EditStack == null) {
      EditStack = new ViewEditStackCommand("Initial creation", new List<EditFieldAndValue>(), Gromplates.First().Leafs.First(), UpsertKind.NewNewOriginal_TagIds(FSharpList<Guid>.Empty), null, UpsertIdsC.Create());
    }
    UpdateSelectedGromplate(EditStack.Grompleaf.GromplateId, EditStack.Grompleaf.Id);
    StateHasChanged();
  }

  //private void _SetOption(int newId) {
  //  EditStack.EditCard.CardSettingId = newId;
  //}

  async Task UpdateCard() {
    if (EditStack.Backs.IsOk) {
      if (EditStack.Kind.IsNewCopy_SourceLeafId_TagIds) {
        EditStack.Ids.CardIds = FSharpList<Guid>.Empty;
      }
      EditStack.Ids.CardIds = Ulid.resizeList(EditStack.Backs.ResultValue.Count(), EditStack.Ids.CardIds);
      _isDisabled = true;
      var result = await DbExecutor.QueryAsync(db => SanitizeStackRepository.Update(db, _user.Id, _ccCommands.ToFList(), EditStack));
      if (result.IsOk) {
        ToastService.ShowInfo("Saved!");
        _savedBranchId = result.ResultValue;
        if (NewEditStackOnSave) {
          var fieldValues = EditStack.FieldValues.Select(x => new EditFieldAndValue(x.EditField, "")).ToList();
          EditStack = new ViewEditStackCommand(EditStack.EditSummary, fieldValues, EditStack.Grompleaf, UpsertKind.NewNewOriginal_TagIds(FSharpList<Guid>.Empty), null, UpsertIdsC.Create());
          UpdateSelectedGromplate(EditStack.Grompleaf.GromplateId, EditStack.Grompleaf.Id);
          _isDisabled = false;
        }
      } else {
        ToastService.ShowError(result.ErrorValue);
        _isDisabled = false;
      }
    } else {
      ToastService.ShowError("Card is in an invalid state. Your cloze syntax is probably screwy.");
      _isDisabled = false;
    }
  }

  void UpdateSelectedGromplate(Guid gromplateId, Guid? leafId = null) {
    _selectedGromplateId = gromplateId;
    _selectedGrompleafs = Gromplates.Single(t => t.Id == gromplateId).Leafs;
    UpdateSelectedGrompleaf(leafId ?? _selectedGrompleafs.First().Id);
  }

  void UpdateSelectedGrompleaf(Guid leafId) {
    _selectedGrompleafId = leafId;
    EditStack.Grompleaf = Gromplates.SelectMany(x => x.Leafs).Single(x => x.Id == leafId);
    var valuesByField = EditStack.FieldValues.ToDictionary(fv => fv.EditField.Name, fv => fv.Value);
    EditStack.FieldValues = EditStack.Grompleaf.Fields
      .Select(ViewFieldModule.copyTo)
      .Select(field =>
        (valuesByField.ContainsKey(field.Name)
          ? valuesByField[field.Name] ?? ""
          : "")
          .Apply(value =>
            new EditFieldAndValue(
              field,
              value ?? "")
      )).ToList();
  }

  Task OnKeyDown(Microsoft.AspNetCore.Components.Web.KeyboardEventArgs eventArgs) =>
    eventArgs.CtrlKey && eventArgs.Key == "Enter"
      ? UpdateCard()
      : Task.CompletedTask;

  private int _indexCount = 1;
  private void trySetIndexCount() {
    var newIndexCount = EditStack.Backs.ResultValue.Count();
    if (_indexCount != newIndexCount) {
      _indexCount = newIndexCount;
    }
  }

}
