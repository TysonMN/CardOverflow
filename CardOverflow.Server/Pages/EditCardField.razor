@using Microsoft.FSharp.Core
@using CardOverflow.Entity
@using CardOverflow.Debug
@using Microsoft.FSharp.Collections
@using CardOverflow.Pure
@using CardOverflow.Api
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Identity
@using CardOverflow.Sanitation
@using Syncfusion.EJ2.Blazor
@using Syncfusion.EJ2.Blazor.RichTextEditor
@inject IToastService ToastService
@inject DbExecutor DbExecutor

<div class="d-flex justify-content-between">
  <label><b>@Field.EditField.Name: </b></label>
  <button class=@(Field.IsCommunal ? "btn btn-sm btn-primary" : "btn btn-sm btn-outline-primary" ) @onclick=@ToggleCommunal type="button" disabled=@MustBeCommunal>
    Communal
  </button>
</div>
@if (Field.IsCommunal) {
  <div>
    <span>Shared with:</span>
    @foreach (var instanceId in Field.CommunalCardInstanceIds.Where(x => x != Card.CardInstanceMeta.Id)) {
      <span class="curate-tooltip-target">
        <span class="oi oi-eye" aria-hidden="true" />
        <span class="curate-tooltip-content">
          <ResizingIframe CardInstanceId=@instanceId Front />
        </span>
      </span>
    }
  </div>
  <div class="d-flex justify-content-between">
    <button type="button" class="btn btn-primary" @onclick="@newClicked">
      New
    </button>
    <EditForm OnValidSubmit=@(() => Search(_searchCommand)) Model=@_searchCommand class="form-inline input-group">
      <InputText class="form-control" placeholder="Search" aria-label="Search" @bind-Value=@_searchCommand.Query />
      <button class="btn btn-primary" type="submit">
        <span class="oi oi-magnifying-glass" />
      </button>
      <DataAnnotationsValidator />
      <ValidationSummary />
    </EditForm>
  </div>
  @if (_isNew) {
    <EjsRichTextEditor @bind-Value=@Field.Value SaveInterval="10" Enabled=@(!IsDisabled)>
      <RichTextEditorIFrameSettings Enable="true" />
      <RichTextEditorToolbarSettings Items=@_tools />
      <RichTextEditorEvents ValueChange=@valueChanged />
    </EjsRichTextEditor>
    <ValidationMessage For=@(() => Field.Value) />
  } else {
    @foreach (var communalFieldInstance in _searchResults) {
      <div>
        <button type="button" class="btn btn-outline-success" @onclick=@(() => SearchResultClicked(communalFieldInstance)) style="position: absolute; right: 15px;">
          âœ”
        </button>
        <ResizingIframe CommunalFieldInstanceId=@communalFieldInstance.Id />
      </div>
    }
    @if (_readOnlyIsVisible) {
      <iframe srcdoc=@Field.Value style="width: 100%; resize:vertical;" />
    }
  }
} else {
  <EjsRichTextEditor @bind-Value=@Field.Value SaveInterval="10" Enabled=@(!IsDisabled)>
    <RichTextEditorIFrameSettings Enable="true" />
    <RichTextEditorToolbarSettings Items=@_tools />
    <RichTextEditorEvents ValueChange=@valueChanged />
  </EjsRichTextEditor>
  <ValidationMessage For=@(() => Field.Value) />
}

@code {
  [Parameter] public EditFieldAndValue Field { get; set; }
  [Parameter] public AcquiredCard Card { get; set; }
  [Parameter] public bool MustBeCommunal { get; set; }
  [Parameter] public bool IsDisabled { get; set; }
  [Parameter] public EventCallback<string> ValueUpdated { get; set; }
  private object[] _tools = new object[] { "Bold", "Italic", "Underline", "SubScript", "SuperScript", "StrikeThrough", "FontName", "FontSize", "FontColor", "BackgroundColor", "|", "Formats", "Alignments", "OrderedList", "UnorderedList", "Outdent", "Indent", "|", "CreateTable", "CreateLink", "Image", "|", "ClearFormat", "SourceCode", "FullScreen", "|", "Undo", "Redo" };
  private List<CommunalFieldInstance> _searchResults = new List<CommunalFieldInstance>();
  private SearchCommand _searchCommand = new SearchCommand("", SearchOrder.Popularity);
  private bool _readOnlyIsVisible;
  private bool _isNew = true;

  protected override void OnParametersSet() {
    base.OnParametersSet();
    if (MustBeCommunal) {
      Field.Communal = getFieldCommunal(FSharpOption<int>.None);
    }
    if ((Field.Communal?.Value?.InstanceId?.Value ?? 0) != 0) {
      _isNew = false;
      _readOnlyIsVisible = true;
    }
  }

  private void ToggleCommunal() =>
Field.Communal =
  Field.IsCommunal
  ? FSharpOption<CommunalFieldValue>.None
  : getFieldCommunal(FSharpOption<int>.None);

  private FSharpOption<CommunalFieldValue> getFieldCommunal(FSharpOption<int> instanceId) =>
    Field.CommunalCardInstanceIds.Append(Card.CardInstanceMeta.Id).ToList().Apply(x => new CommunalFieldValue(instanceId, x));

  private async Task Search(SearchCommand searchCommand) {
    _searchResults = await DbExecutor.QueryAsync(db => CommunalFieldRepository.Search(db, searchCommand.Query));
    _isNew = false;
    _readOnlyIsVisible = false;
  }

  private void newClicked() {
    _isNew = true;
    Field.Communal = getFieldCommunal(FSharpOption<int>.None);
  }

  private Task valueChanged(Syncfusion.EJ2.Blazor.RichTextEditor.ChangeEventArgs args) =>
    ValueUpdated.InvokeAsync(args.Value);

  private async Task SearchResultClicked(CommunalFieldInstance instance) {
    Field.Value = instance.Value;
    await ValueUpdated.InvokeAsync(instance.Value);
    Field.Communal = getFieldCommunal(instance.Id);
    _readOnlyIsVisible = true;
    _searchResults = new List<CommunalFieldInstance>();
  }

}
