@using Microsoft.FSharp.Core
@using CardOverflow.Entity
@using CardOverflow.Debug
@using Microsoft.FSharp.Collections
@using CardOverflow.Pure
@using CardOverflow.Api
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Identity
@using CardOverflow.Sanitation
@using Syncfusion.EJ2.Blazor
@using Syncfusion.EJ2.Blazor.RichTextEditor
@inject IToastService ToastService
@inject DbExecutor DbExecutor

@if (Gromplates == null) {
  <p><em>Loading...</em></p>
} else {
  <EditForm Model=@EditConcept OnValidSubmit=@UpdateCard @onkeydown=@OnKeyDown tabindex="0" style="outline: none;">
    <fieldset disabled=@_isDisabled>
      <div class="form-group">
        <div class="row">
          <div class="col-sm">
            @if (EditConcept.Kind.IsNewExample_Title || EditConcept.Kind.IsNewLeaf_Title) {
              <div class="input-group">
                <label for="exampleTitleInput" class="col-form-label mr-2">
                  Title:
                </label>
                <InputText @bind-Value=@EditConcept.Title class="form-control" id="exampleTitleInput" />
              </div>
            }
            @foreach (var field in EditConcept.FieldValues) {
              <EditConceptField Field=@field ValueUpdated=@(x => { field.Value = x; trySetIndexCount(); }) IsDisabled=@_isDisabled />
            }
          </div>
          <div class="col-sm">
            <div class="row">
              <a href="Gromplate/@_selectedGromplateId" class="col-sm-2 mt-2">
                Card Template
              </a>
              <select value=@_selectedGromplateId class="form-control col-sm-10" @onchange=@(x => x.Value.ToString().Apply(Guid.Parse).Do(id => UpdateSelectedGromplate(id)))>
                @foreach (var gromplate in Gromplates) {
                  <option value=@gromplate.Id>@gromplate.Editable.Name</option>
                }
              </select>
            </div>
            <div class="row">
              <a href="Gromplate/@_selectedGromplateId?LeafId=@_selectedTemplateRevisionId" class="col-sm-2 mt-2" tabindex="-1">
                Revision
              </a>
              <select value=@_selectedTemplateRevisionId class="form-control col-sm-10" @onchange=@(x => x.Value.ToString().Apply(Guid.Parse).Do(UpdateSelectedTemplateRevision))>
                @foreach (var leaf in _selectedTemplateRevisions) {
                  <option value=@leaf.Id>@leaf.Created - @leaf.EditSummary</option>
                }
              </select>
            </div>
            @if (EditConcept.Backs.IsOk) {
              @foreach (var (back, i) in EditConcept.Backs.ResultValue.Select((x, i) => (x, i))) {
                <iframe sandbox="allow-scripts" srcdoc=@back style="height: @(80/_indexCount)vh; width: 100%; resize: vertical;"></iframe>
                <EditConceptDetail_Card Command=@_ccCommands.ElementAtOrDefault(i) UpdateCommand=@(command => _updateCardCommand(i, command)) />
              }
            } else {
              <span>
                Error: @EditConcept.Backs.ErrorValue
              </span>
            }
          </div>
        </div>
      </div>
      <div class="row">
        <div class="col-sm">
          @if (EditConcept.Kind.TryGetCopySourceLeafId(out var leafId)) {
            <span>Copied from</span>
            <a href="leaf/@leafId">
              Card
            </a>
          }
          @if (EditConcept.Kind.IsNewExample_Title) {
            <span>Example from</span>
            <a href="concept/@EditConcept.Ids.ConceptId">
              Concept
            </a>
          }
        </div>
        <div class="col-sm">
          <div class="row mx-1">
            <span class="btn-group w-100">
              <InputText @bind-Value=@EditConcept.EditSummary class="form-control w-100" placeholder="Edit Summary" />
              <button type="button" class="btn btn-primary" @onclick=@UpdateCard>Save</button>
            </span>
          </div>
          <div class="row float-right">
            <DataAnnotationsValidator />
            <ValidationSummary />
            @if (_savedExampleId != default) {
              <span>
                Saved! Link to
                <a href="concept?example=@_savedExampleId">
                  card.
                </a>
              </span>
            }
          </div>
        </div>
      </div>
    </fieldset>
  </EditForm>
}

@code {
  [Parameter] public ViewEditConceptCommand EditConcept { get; set; }
  [Parameter] public bool NewEditConceptOnSave { get; set; }
  [Parameter] public List<ViewGromplateWithAllLeafs> Gromplates { get; set; }
  [CascadingParameter] Task<UserClaims> UserTask { get; set; }
  private List<EditCardCommand> _ccCommands = new List<EditCardCommand>();
  private UserClaims _user = UserClaims.init;
  private List<ViewTemplateRevision> _selectedTemplateRevisions;
  private Guid _selectedGromplateId;
  private Guid _selectedTemplateRevisionId;
  private bool _isDisabled;
  private Guid _savedExampleId;

  private void _updateCardCommand(int i, EditCardCommand command) {
    while (_ccCommands.ElementAtOrDefault(i) == default) {
      _ccCommands.Add(EditCardCommand.init);
    }
    _ccCommands[i] = command;
  }

  public override async Task SetParametersAsync(ParameterView parameters) {
    await base.SetParametersAsync(parameters);
    _user = await UserTask;
    if (Gromplates == null) {
      Gromplates = await DbExecutor.QueryAsync(db => SanitizeGromplate.GetMineWith(db, _user.Id, EditConcept.TemplateRevision.GromplateId));
    }
    if (EditConcept == null) {
      EditConcept = new ViewEditConceptCommand("Initial creation", new List<EditFieldAndValue>(), Gromplates.First().Leafs.First(), UpsertKind.NewNewOriginal_TagIds(SetModule.Empty<string>()), null, UpsertIdsC.Create());
    }
    UpdateSelectedGromplate(EditConcept.TemplateRevision.GromplateId, EditConcept.TemplateRevision.Id);
    StateHasChanged();
  }

  //private void _SetOption(int newId) {
  //  EditConcept.EditCard.CardSettingId = newId;
  //}

  async Task UpdateCard() {
    if (EditConcept.Backs.IsOk) {
      if (EditConcept.Kind.IsNewCopy_SourceLeafId_TagIds) {
        EditConcept.Ids.CardIds = FSharpList<Guid>.Empty;
      }
      EditConcept.Ids.CardIds = Ulid.resizeList(EditConcept.Backs.ResultValue.Count(), EditConcept.Ids.CardIds);
      _isDisabled = true;
      var result = await DbExecutor.QueryAsync(db => SanitizeConceptRepository.Update(db, _user.Id, _ccCommands.ToFList(), EditConcept));
      if (result.IsOk) {
        ToastService.ShowInfo("Saved!");
        _savedExampleId = result.ResultValue;
        if (NewEditConceptOnSave) {
          var fieldValues = EditConcept.FieldValues.Select(x => new EditFieldAndValue(x.EditField, "")).ToList();
          EditConcept = new ViewEditConceptCommand(EditConcept.EditSummary, fieldValues, EditConcept.TemplateRevision, UpsertKind.NewNewOriginal_TagIds(SetModule.Empty<string>()), null, UpsertIdsC.Create());
          UpdateSelectedGromplate(EditConcept.TemplateRevision.GromplateId, EditConcept.TemplateRevision.Id);
          _isDisabled = false;
        }
      } else {
        ToastService.ShowError(result.ErrorValue);
        _isDisabled = false;
      }
    } else {
      ToastService.ShowError("Card is in an invalid state. Your cloze syntax is probably screwy.");
      _isDisabled = false;
    }
  }

  void UpdateSelectedGromplate(Guid gromplateId, Guid? leafId = null) {
    _selectedGromplateId = gromplateId;
    _selectedTemplateRevisions = Gromplates.Single(t => t.Id == gromplateId).Leafs;
    UpdateSelectedTemplateRevision(leafId ?? _selectedTemplateRevisions.First().Id);
  }

  void UpdateSelectedTemplateRevision(Guid leafId) {
    _selectedTemplateRevisionId = leafId;
    EditConcept.TemplateRevision = Gromplates.SelectMany(x => x.Leafs).Single(x => x.Id == leafId);
    var valuesByField = EditConcept.FieldValues.ToDictionary(fv => fv.EditField.Name, fv => fv.Value);
    EditConcept.FieldValues = EditConcept.TemplateRevision.Fields
      .Select(ViewFieldModule.copyTo)
      .Select(field =>
        (valuesByField.ContainsKey(field.Name)
          ? valuesByField[field.Name] ?? ""
          : "")
          .Apply(value =>
            new EditFieldAndValue(
              field,
              value ?? "")
      )).ToList();
  }

  Task OnKeyDown(Microsoft.AspNetCore.Components.Web.KeyboardEventArgs eventArgs) =>
    eventArgs.CtrlKey && eventArgs.Key == "Enter"
      ? UpdateCard()
      : Task.CompletedTask;

  private int _indexCount = 1;
  private void trySetIndexCount() {
    var newIndexCount = EditConcept.Backs.ResultValue.Count();
    if (_indexCount != newIndexCount) {
      _indexCount = newIndexCount;
    }
  }

}
