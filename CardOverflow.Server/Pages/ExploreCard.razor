@page "/cardinstance/{InstanceId:int}"

@using Microsoft.FSharp.Core
@using CardOverflow.Pure
@using System.Linq
@using CardOverflow.Entity
@using CardOverflow.Legacy
@using CardOverflow.Debug
@using CardOverflow.Api
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Identity
@using CardOverflow.Sanitation
@using CardOverflow.Server.Data
@inject DbExecutor DbExecutor
@inject IToastService ToastService
@inject NavigationManager NavigationManager
@inject TimeProvider TimeProvider

@if (Card == null || Selected == null) {
  <p><em>@_LoadingMessage</em></p>
} else {
  <div class="row">
    <div class="col-xl">
      @if (!Selected.IsLatest) {
        <div class="alert alert-warning" role="alert">
          This is an old revision created
          <span title=@Selected.Created>
            @(ViewLogic.timestampToPretty(Selected.Created, TimeProvider.utcNow)).
          </span>
          The present URL is a permanent link to this revision, which may differ significantly from the
          <a href="card/@Selected.CardId">
            current revision.
          </a>
          <a href="carddiff/@Selected.Id">
            Here's the difference
          </a>
          between this old revision and the current revision. Only the card is old - other information like Tags, Comments, and Branches are current.
        </div>
      }
      <ExploreCardIFrameHeader Card=@Card Instance=@Selected />
      @foreach (var i in Selected.Indexes) {
        <div class="row">
          <div class=@(_isAcquired() ? "col-10" : "col")>
            <ResizingIframe BranchInstance=@((Selected.Id, i)) Back />
          </div>
          @if (_isAcquired()) {
            <div class="col-2">
              <ExploreCardAcquired AcquiredCard=@(AcquiredCards.Single(x => x.BranchInstanceMeta.Id == Selected.Id && x.Index == i)) CardStateUpdated=@_CardStateUpdated />
            </div>
          }
        </div>
      }
    </div>
  </div>
  <div class="row">
    <div class="col-xl">
      <ExploreCardTag Card=@Card />
      <ExploreCardRelationship Card=@Card />
    </div>
    <div class="col-xl">
      <ExploreCardComments Card=@Card />
    </div>
    <div class="col-xl">
      <ExploreCardBranch Branches=@Card.Branches
                         InstanceSelected=@(x => Selected = x)
                         Status=@Card.AcquiredStatus
                         UpdateStatus=@(x => Card.AcquiredStatus = x)
                         Selected=@Selected
                         Root=@Card.Instance
                         UpdateAcquiredCards=@(x => AcquiredCards = x) />
    </div>
  </div>
}

@code {
  [Parameter] public int CardId { get; set; }
  [Parameter] public int InstanceId { get; set; }
  [CascadingParameter] UserEntity User { get; set; }
  CardOverflow.Pure.ExploreCard Card;
  BranchInstanceMeta Selected;
  List<AcquiredCard> AcquiredCards = new List<AcquiredCard>();
  private string _LoadingMessage = "Loading...";
  private bool _isAcquired() => AcquiredCards.Any(x => x.BranchInstanceMeta.Id == Selected.Id);

  public override async Task SetParametersAsync(ParameterView parameters) {
    await base.SetParametersAsync(parameters);
    if (InstanceId == 0) {
      var x = await DbExecutor.QueryAsync(db => ExploreCardRepository.get(db, User?.Id ?? 0, CardId));
      if (x.IsOk) {
        Card = x.ResultValue;
        Selected = Card.Instance;
      } else {
        showError(x.ErrorValue);
      }
    } else {
      var x = await DbExecutor.QueryAsync(db => ExploreCardRepository.instance(db, User?.Id ?? 0, InstanceId));
      if (x.IsOk) {
        var (instance, card) = x.ResultValue;
        Card = card;
        Selected = Card.Instance;
        if (instance.Id != card.Instance.Id) {
          Selected = instance;
        }
      } else {
        showError(x.ErrorValue);
      }
    }
    if (User != null && Card != null) {
      var r = await DbExecutor.QueryAsync(db => CardRepository.GetAcquired(db, User.Id, Card.Id));
      if (r.IsOk) {
        AcquiredCards = r.ResultValue;
      } // the only error so far is due to not acquiring the card, so intentionally not showing it.
    }
    StateHasChanged();
  }

  private void showError(string error) {
    ToastService.ShowError(error);
    _LoadingMessage = error;
  }

  private void _CardStateUpdated(CardState state) {
    if (state.IsSuspended && AcquiredCards.All(x => x.CardState.IsSuspended)) {
      Card.Summary.Users--;
    } else if (!state.IsSuspended && AcquiredCards.All(x => !x.CardState.IsSuspended)) {
      Card.Summary.Users++;
    }
  }

}
