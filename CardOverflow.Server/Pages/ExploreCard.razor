@page "/card/{Id:int}"
@using Microsoft.FSharp.Core
@using CardOverflow.Entity
@using CardOverflow.Debug
@using CardOverflow.Pure
@using CardOverflow.Api
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Identity
@using CardOverflow.Sanitation
@using CardOverflow.Server.Data
@inject CardOverflowDb Db
@inject IJSRuntime Js

@if (Card == null) {
  <p><em>Loading...</em></p>
} else {
  <div>
    Gotten by <span class="badge badge-success">@Card.Users</span>
    @if (User == null) {
      <p>Log in to Get</p>
    } else {
      @if (Card.LatestInstance.IsAcquired) {
        <button class="btn btn-secondary" disabled>
          Gotten
        </button>
      } else {
        <button class="btn btn-primary" onclick=@(() => Acquire(Card.LatestInstance.Id))>
          Get
        </button>
      }
    }
    Description: @Card.Description
  </div>
  <div>
    <iframe sandbox="allow-scripts allow-same-origin" src="/card/rawback/@Id" scrolling="no" @ref="iframe" onload=@iframeloaded
            style="width: 1px; min-width: 100%; height:100px;"></iframe>
  </div>
  <div class="text-right">
    By @Card.Author
  </div>
  <div>
    <h3>Tags</h3>
    <ul class="d-flex flex-wrap list-unstyled">
      @foreach (var tag in @Card.Tags.Where(x => !x.IsAcquired).OrderByDescending(x => x.Count).ThenBy(x => x.Name)) {
        <li class="m-1">
          <button type="button" class="btn btn-outline-primary btn-sm" onclick=@(() => AcquireTag(tag.Name)) disabled=@(!Card?.LatestInstance?.IsAcquired ?? true)>
            <span class="badge badge-success">@tag.Count</span> @tag.Name
          </button>
        </li>
      }
    </ul>
    @if (User != null) {
      <h3>Your Tags</h3>
      <ul class="d-flex flex-wrap list-unstyled">
        @foreach (var tag in @Card.Tags.Where(x => x.IsAcquired).OrderByDescending(x => x.Count).ThenBy(x => x.Name)) {
          <li class="m-1">
            <button type="button" class="btn btn-primary btn-sm" onclick=@(() => DeleteTag(tag.Name))>
              <span class="badge badge-success">@tag.Count</span> @tag.Name
            </button>
          </li>
        }
        @if (Card.LatestInstance.IsAcquired) {
          <TagAdder CardId=@Card.Id />
        }
      </ul>
    }
  </div>
  <Relationship Card=@Card />
  <div>
    <h3>Comments</h3>
    <ul class="list-group">
      @foreach (var comment in @Card.Comments) {
        <li class="list-group-item border-0">
          @comment.User: @comment.Text
        </li>
      }
      <Comment CardId=@Card.Id />
    </ul>
  </div>
}

@code {
  [Parameter]
  public int Id { get; set; }
  CardOverflow.Pure.ExploreCard Card;
  [CascadingParameter]
  UserEntity User { get; set; }
  private ElementRef iframe;

  public override async Task SetParametersAsync(ParameterCollection parameters) {
    await base.SetParametersAsync(parameters);
    Card = await CardRepository.Get(Db, Id, User?.Id ?? 0);
    StateHasChanged();
  }

  async Task Acquire(int cardId) {
    await CardRepository.AcquireCardsAsync(Db, User.Id, new List<int> { cardId });
    Card.LatestInstance.IsAcquired = true;
    Card.Users++;
    StateHasChanged();
  }

  void AcquireTag(string name) {
    if (SanitizeTagRepository.AddTo(Db, new TagText { Text = name }, User.Id, Card.Id).IsOk) {
      Card.Tags.Single(x => x.Name == name).IsAcquired = true;
      StateHasChanged();
    } else {
      // medTODO show error
    }
  }

  void DeleteTag(string tag) { // highTODO figure out why the button isn't being removed until refresh. Also if you delete multiple, it's offset by one
    if (SanitizeTagRepository.DeleteFrom(Db, tag, User.Id, Card.Id).IsOk) {
      Card.Tags.Single(x => x.Name == tag).IsAcquired = false;
      StateHasChanged();
    } else {
      // medTODO show error
    }
  }

  async Task iframeloaded() => await Js.InvokeAsync<string>("resizeIframe", iframe);

}
