@page "/Card/{Id:int}"
@using Microsoft.FSharp.Core
@using CardOverflow.Entity
@using CardOverflow.Debug
@using CardOverflow.Pure
@using CardOverflow.Api
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Identity
@using CardOverflow.Sanitation
@using CardOverflow.Server.Data
@inject CardOverflowDb Db

@if (Card == null) {
  <p><em>Loading...</em></p>
} else {
  <table class="table">
    <thead>
      <tr>
        <th>Description</th>
        <th>Maintainer</th>
        <th>Card</th>
        <th>Comments</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>@Card.Description</td>
        <td>@Card.Author</td>
        <td>
          @if (User == null) {
            <p>Log in to verb</p>
          } else {
            @if (Card.LatestInstance.IsAcquired) {
              <button class="btn btn-secondary" disabled>
                Verb, but past tense (Needs a better name)
              </button>
            } else {
              <button class="btn btn-primary" onclick=@(() => @Acquire(Card.LatestInstance.Id))>
                Verb (Needs a better name)
              </button>
            }
          }
          <iframe sandbox allow-scripts class="concept-iframe" srcdoc=@Card.LatestInstance.FrontBackFrontSynthBackSynth.Item2></iframe>
        </td>
        <td>
          <ul>
            @foreach (var comment in @Card.Comments) {
              <li>
                @comment.User: @comment.Text
              </li>
            }
            <Comment CardId=@Card.Id />
          </ul>
        </td>
      </tr>
    </tbody>
  </table>
}

@code {
  [Parameter]
  public int Id { get; set; }
  CardOverflow.Pure.ExploreCard Card;
  [CascadingParameter]
  UserEntity User { get; set; }

  protected override async Task OnInitAsync() {
    Card = await CardRepository.Get(Db, Id, User?.Id ?? 0);
  }

  async Task Acquire(int cardId) {
    await CardRepository.AcquireCardsAsync(Db, User.Id, new List<int> { cardId });
    Card.LatestInstance.IsAcquired = true;
    StateHasChanged();
  }

}
