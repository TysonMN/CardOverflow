@page "/cardinstance/{InstanceId:int}"

@using Microsoft.FSharp.Core
@using CardOverflow.Entity
@using CardOverflow.Legacy
@using CardOverflow.Debug
@using CardOverflow.Pure
@using CardOverflow.Api
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Identity
@using CardOverflow.Sanitation
@using CardOverflow.Server.Data
@inject DbExecutor DbExecutor
@inject IToastService ToastService
@inject NavigationManager NavigationManager

@if (Card == null) {
  <p><em>@_LoadingMessage</em></p>
} else {
  <div class="d-flex justify-content-between align-items-center">
    <div>
      <ExploreCardState Card=@Card AcquiredCard=@AcquiredCard UpdateAcquiredCard=@(x => AcquiredCard = x) UpdateCard=@(x => Card = x) />
    </div>
    <div>
      By @Card.Author
      @if (Card.AuthorId == User?.Id) {
        <a href="card/@Card.Id/edit" title="Edit">
          <span class="oi oi-pencil" />
        </a>
      } else {
        <a href="curate/card/copy/@Card.Instance.Id" title="Edit a Copy">
          <span class="fas fa-copy" />
        </a>
      }
      <a href="curate/card/branch/@Card.Id" title="Add a Branch">
        <span class="fas fa-code-branch" />
      </a>
      <a href="/card/@Card.Id/revision" title="Revisions">
        <i class="fas fa-history"></i>
      </a>
      @if (Card.Instance.IsLatest) {
        <span class="fas fa-sync text-success" title="Up to date" />
      } else {
        <a href="carddiff/@Card.Instance.Id">
          <span class="fas fa-sync text-danger" title="Out of date" />
        </a>
      }
    </div>
  </div>
  <div>
    <ResizingIframe CardInstanceId=@Card.Instance.Id Back />
  </div>
  <div>
    @if (Card.IsAcquired) {
      <h3>Card Settings</h3>
      <CardSettingSelector SettingSelected=_SetOption SelectedId=@AcquiredCard.CardSettingId />
    }
    <div class="d-flex justify-content-between">
      <h3>Tags</h3>
      @if (Card.IsAcquired) {
        <TagAdder CardId=@Card.Id />
      }
    </div>
    <ul class="d-flex flex-wrap list-unstyled">
      @foreach (var tag in @Card.Tags.Where(x => x.IsAcquired).OrderByDescending(x => x.Count).ThenBy(x => x.Name)) {
        <li class="m-1">
          <button type="button" class="btn btn-primary btn-sm" @onclick=@(() => DeleteTag(tag.Name))>
            <span class="badge badge-success">@tag.Count</span> @tag.Name
          </button>
        </li>
      }
      @foreach (var tag in @Card.Tags.Where(x => !x.IsAcquired).OrderByDescending(x => x.Count).ThenBy(x => x.Name)) {
        <li class="m-1">
          <button type="button" class="btn btn-outline-primary btn-sm" @onclick=@(() => AcquireTag(tag.Name)) disabled=@(!Card?.Instance?.IsAcquired ?? true)>
            <span class="badge badge-success">@tag.Count</span> @tag.Name
          </button>
        </li>
      }
    </ul>
  </div>
  <Relationship Card=@Card />
  <div>
    <h3>Comments</h3>
    <ul class="list-group">
      @foreach (var comment in @Card.Comments) {
        <li class="list-group-item border-0">
          @comment.User: @comment.Text
        </li>
      }
      <Comment CardId=@Card.Id />
    </ul>
  </div>
}

@code {
  [Parameter] public int CardId { get; set; }
  [Parameter] public int InstanceId { get; set; }
  [CascadingParameter] UserEntity User { get; set; }
  CardOverflow.Pure.ExploreCard Card;
  AcquiredCard AcquiredCard;
  private string _LoadingMessage = "Loading...";

  public override async Task SetParametersAsync(ParameterView parameters) {
    await base.SetParametersAsync(parameters);
    var x = InstanceId == 0
      ? await DbExecutor.QueryAsync(db => ExploreCardRepository.get(db, User?.Id ?? 0, CardId))
      : await DbExecutor.QueryAsync(db => ExploreCardRepository.instance(db, User?.Id ?? 0, InstanceId));
    if (x.IsOk) {
      Card = x.ResultValue;
    } else {
      ToastService.ShowError(x.ErrorValue);
      _LoadingMessage = x.ErrorValue;
    }
    if (User != null && Card != null) {
      var r = await DbExecutor.QueryAsync(db => CardRepository.GetAcquired(db, User.Id, Card.Id));
      if (r.IsOk) {
        AcquiredCard = r.ResultValue;
      } // the only error so far is due to not acquiring the card, so intentionally not showing it.
    }
    StateHasChanged();
  }

  private async Task _SetOption(int newId) {
    var r = await DbExecutor.QueryAsync(db => SanitizeCardSettingRepository.setCard(db, User.Id, AcquiredCard.AcquiredCardId, newId));
    if (r.IsOk) {
      ToastService.ShowInfo("Card setting saved!");
    } else {
      ToastService.ShowError(r.ErrorValue);
    }
  }

  async Task AcquireTag(string name) {
    var x = await DbExecutor.QueryAsync(db => SanitizeTagRepository.AddTo(db, new TagText { Text = name }, User.Id, Card.Id));
    if (x.IsOk) {
      Card.Tags.Single(t => t.Name == name).IsAcquired = true;
      Card.Tags.Single(t => t.Name == name).Count++;
      StateHasChanged();
    } else {
      ToastService.ShowError(x.ErrorValue);
    }
  }

  async Task DeleteTag(string tag) {
    var x = await DbExecutor.QueryAsync(db => SanitizeTagRepository.DeleteFrom(db, tag, User.Id, Card.Id));
    if (x.IsOk) {
      Card.Tags.Single(t => t.Name == tag).IsAcquired = false;
      Card.Tags.Single(t => t.Name == tag).Count--;
      StateHasChanged();
    } else {
      ToastService.ShowError(x.ErrorValue);
    }
  }

}
