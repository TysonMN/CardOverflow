@page "/cardinstance/{InstanceId:int}"

@using Microsoft.FSharp.Core
@using CardOverflow.Pure
@using System.Linq
@using CardOverflow.Entity
@using CardOverflow.Legacy
@using CardOverflow.Debug
@using CardOverflow.Pure
@using CardOverflow.Api
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Identity
@using CardOverflow.Sanitation
@using CardOverflow.Server.Data
@inject DbExecutor DbExecutor
@inject IToastService ToastService
@inject NavigationManager NavigationManager

@if (Card == null) {
  <p><em>@_LoadingMessage</em></p>
} else {
  <div class="row">
    <div class="col-xl">
      <ExploreCardIFrameHeader Card=@Card AcquiredCard=@AcquiredCard Instance=@Card.Instance />
      <ResizingIframe CardInstanceId=@Card.Instance.Id Back />
    </div>
    @if (Instance != null) {
      <div class="col-xl">
        <ExploreCardIFrameHeader Card=@Card AcquiredCard=@AcquiredCard Instance=@Instance />
        <ResizingIframe CardInstanceId=@Instance.Id Back />
      </div>
    }
  </div>
  <div class="row">
    <div class="col-xl">
      <ExploreCardTag Card=@Card />
      <ExploreCardRelationship Card=@Card />
    </div>
    <div class="col-xl">
      @if (Card.IsAnyAcquired) {
        <ExploreCardAcquired AcquiredCard=@AcquiredCard />
      }
      <ExploreCardComments Card=@Card />
    </div>
    <div class="col-xl">
      <ExploreCardComments Card=@Card />
    </div>
  </div>
}

@code {
  [Parameter] public int CardId { get; set; }
  [Parameter] public int InstanceId { get; set; }
  [CascadingParameter] UserEntity User { get; set; }
  CardOverflow.Pure.ExploreCard Card;
  CardInstanceMeta Instance;
  AcquiredCard AcquiredCard;
  private string _LoadingMessage = "Loading...";

  public override async Task SetParametersAsync(ParameterView parameters) {
    await base.SetParametersAsync(parameters);
    if (InstanceId == 0) {
      var x = await DbExecutor.QueryAsync(db => ExploreCardRepository.get(db, User?.Id ?? 0, CardId));
      if (x.IsOk) {
        Card = x.ResultValue;
      } else {
        showError(x.ErrorValue);
      }
    } else {
      var x = await DbExecutor.QueryAsync(db => ExploreCardRepository.instance(db, User?.Id ?? 0, InstanceId));
      if (x.IsOk) {
        var (instance, card) = x.ResultValue;
        Card = card;
        if (instance.Id != card.Instance.Id) {
          Instance = instance;
        }
      } else {
        showError(x.ErrorValue);
      }
    }
    if (User != null && Card != null) {
      var r = await DbExecutor.QueryAsync(db => CardRepository.GetAcquired(db, User.Id, Card.Id));
      if (r.IsOk) {
        AcquiredCard = r.ResultValue;
      } // the only error so far is due to not acquiring the card, so intentionally not showing it.
    }
    StateHasChanged();
  }

  private void showError(string error) {
    ToastService.ShowError(error);
    _LoadingMessage = error;
  }

}
