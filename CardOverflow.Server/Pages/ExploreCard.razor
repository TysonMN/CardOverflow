@using Microsoft.FSharp.Core
@using CardOverflow.Entity
@using CardOverflow.Debug
@using CardOverflow.Pure
@using CardOverflow.Api
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Identity
@using CardOverflow.Sanitation
@using CardOverflow.Server.Data
@inject DbExecutor DbExecutor
@inject IToastService ToastService
@inherits OwningComponentBase<CardOverflowDb>

@if (Card == null) {
  <p><em>Loading...</em></p>
} else {
  <div class="d-flex justify-content-between align-items-center">
    <div>
      Gotten by <span class="badge badge-success">@Card.Summary.Users</span>
      @if (User == null) {
        <p>Log in to Get</p>
      } else {
        @if (Card.LatestMeta.IsAcquired) {
          <button class="btn btn-secondary" disabled>
            Gotten
          </button>
        } else {
          <button class="btn btn-primary" @onclick=@(() => Acquire(Card.LatestMeta.Id))>
            Get
          </button>
        }
      }
    </div>
    <div>
      By @Card.Author
      @if (Card.AuthorId == User.Id) {
        <a href="card/@Card.Id/edit" title="Edit">
          <span class="oi oi-pencil"></span>
        </a>
      }
      <a href="/card/@Card.Id/revision">
        <i class="fas fa-history"></i>
      </a>
    </div>
  </div>
  <div>
    <ResizingIframe SrcUrl=@("/card/" + @Id + "/back/")></ResizingIframe>
  </div>
  <div>
    <h3>Tags</h3>
    <ul class="d-flex flex-wrap list-unstyled">
      @foreach (var tag in @Card.Tags.Where(x => !x.IsAcquired).OrderByDescending(x => x.Count).ThenBy(x => x.Name)) {
        <li class="m-1">
          <button type="button" class="btn btn-outline-primary btn-sm" @onclick=@(() => AcquireTag(tag.Name)) disabled=@(!Card?.LatestMeta?.IsAcquired ?? true)>
            <span class="badge badge-success">@tag.Count</span> @tag.Name
          </button>
        </li>
      }
    </ul>
    @if (User != null) {
      <h3>Your Tags</h3>
      <ul class="d-flex flex-wrap list-unstyled">
        @foreach (var tag in @Card.Tags.Where(x => x.IsAcquired).OrderByDescending(x => x.Count).ThenBy(x => x.Name)) {
          <li class="m-1">
            <button type="button" class="btn btn-primary btn-sm" @onclick=@(() => DeleteTag(tag.Name))>
              <span class="badge badge-success">@tag.Count</span> @tag.Name
            </button>
          </li>
        }
        @if (Card.LatestMeta.IsAcquired) {
          <TagAdder CardId=@Card.Id />
        }
      </ul>
    }
  </div>
  <Relationship Card=@Card />
  <div>
    <h3>Comments</h3>
    <ul class="list-group">
      @foreach (var comment in @Card.Comments) {
        <li class="list-group-item border-0">
          @comment.User: @comment.Text
        </li>
      }
      <Comment CardId=@Card.Id />
    </ul>
  </div>
}

@code {
  [Parameter]
  public int Id { get; set; }
  CardOverflow.Pure.ExploreCard Card;
  [CascadingParameter]
  UserEntity User { get; set; }

  public override async Task SetParametersAsync(ParameterView parameters) {
    await base.SetParametersAsync(parameters);
    Card = await DbExecutor.QueryAsync(db => CardRepository.Get(db, User?.Id ?? 0, Id));
    StateHasChanged();
  }

  async Task Acquire(int cardId) {
    await CardRepository.AcquireCardAsync(Service, User.Id, cardId);
    Card.LatestMeta.IsAcquired = true;
    Card.Summary.Users++;
    StateHasChanged();
  }

  void AcquireTag(string name) {
    var x = SanitizeTagRepository.AddTo(Service, new TagText { Text = name }, User.Id, Card.Id);
    if (x.IsOk) {
      Card.Tags.Single(t => t.Name == name).IsAcquired = true;
      StateHasChanged();
    } else {
      ToastService.ShowError(x.ErrorValue);
    }
  }

  void DeleteTag(string tag) {
    var x = SanitizeTagRepository.DeleteFrom(Service, tag, User.Id, Card.Id);
    if (x.IsOk) {
      Card.Tags.Single(t => t.Name == tag).IsAcquired = false;
      StateHasChanged();
    } else {
      ToastService.ShowError(x.ErrorValue);
    }
  }

}
