@page "/Card/{Id:int}"
@using Microsoft.FSharp.Core
@using CardOverflow.Entity
@using CardOverflow.Debug
@using CardOverflow.Pure
@using CardOverflow.Api
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Identity
@using CardOverflow.Sanitation
@using CardOverflow.Server.Data
@inject CardOverflowDb Db

@if (Card == null) {
  <p><em>Loading...</em></p>
} else {
  <div>
    Gotten by @Card.Users
    @if (User == null) {
      <p>Log in to Get</p>
    } else {
      @if (Card.LatestInstance.IsAcquired) {
        <button class="btn btn-secondary" disabled>
          Gotten
        </button>
      } else {
        <button class="btn btn-primary" onclick=@(() => @Acquire(Card.LatestInstance.Id))>
          Get
        </button>
      }
    }
    Description: @Card.Description
  </div>
  <div>
    <iframe sandbox allow-scripts class="concept-iframe" srcdoc=@Card.LatestInstance.FrontBackFrontSynthBackSynth.Item2></iframe>
  </div>
  <div class="text-right">
    By @Card.Author
  </div>
  <div>
    <h3>Tags</h3>
    <ul>
      @foreach (var tag in @Card.Tags) {
        <li>
          @tag.Item2 - @tag.Item1
        </li>
      }
      <TagAdder CardId=@Card.Id />
    </ul>
  </div>
  <div>
    <h3>Comments</h3>
    <ul>
      @foreach (var comment in @Card.Comments) {
        <li>
          @comment.User: @comment.Text
        </li>
      }
      <Comment CardId=@Card.Id />
    </ul>
  </div>
}

@code {
  [Parameter]
  public int Id { get; set; }
  CardOverflow.Pure.ExploreCard Card;
  [CascadingParameter]
  UserEntity User { get; set; }

  protected override async Task OnInitAsync() {
    Card = await CardRepository.Get(Db, Id, User?.Id ?? 0);
  }

  async Task Acquire(int cardId) {
    await CardRepository.AcquireCardsAsync(Db, User.Id, new List<int> { cardId });
    Card.LatestInstance.IsAcquired = true;
    StateHasChanged();
  }

}
