@page "/Curate"
@using Microsoft.FSharp.Core
@using CardOverflow.Entity
@using CardOverflow.Debug
@using CardOverflow.Pure
@using CardOverflow.Api
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Identity
@using CardOverflow.Sanitation
@inherits OwningComponentBase<CardOverflowDb>

@if (cards == null) {
  <p><em>Loading...</em></p>
} else {
  <div>
    <table class="table">
      <tr>
        <th>Preview</th>
        <th>Name</th>
        <th>Tags</th>
      </tr>
      @foreach (var card in cards) {
        <tr>
          <td>
            <div class="curate-tooltip-target">
              &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
              <div class="oi oi-eye@(card.CardInstanceMeta.IsAcquired ? " text-success" : "")" aria-hidden="true"></div>
              &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
              <div class="curate-tooltip-content">
                <ResizingIframe SrcUrl=@("/cardinstance/" + card.CardInstanceMeta.Id + "/front")></ResizingIframe>
              </div>
            </div>
          </td>
          <td>
            <a href="/Curate/Card/@card.CardId">
              @card.CardInstanceMeta.StrippedFront
            </a>
          </td>
          <td>
            <ul class="d-flex flex-wrap list-unstyled">
              @foreach (var tag in @card.Tags) {
                <li class="m-1">
                  @tag,
                </li>
              }
            </ul>
          </td>
        </tr>
      }
    </table>
    <Pager Details=@details PageChanged=@PageChanged />
  </div>
}

@code {
  [CascadingParameter]
  UserEntity User { get; set; }
  IList<AcquiredCard> cards;
  PagedListDetails details;

  protected override async Task OnInitializedAsync() {
    await PageChanged(1);
  }

  async Task PageChanged(int pageNumber) {
    var pagedList = await CardRepository.GetAcquiredPages(Service, User?.Id ?? 0, pageNumber);
    details = pagedList.Details;
    cards = pagedList.Results.Select(x => x.ResultValue).ToList(); // medTODO show errors
  }

}
