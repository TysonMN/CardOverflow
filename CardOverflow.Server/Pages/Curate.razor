@page "/curate"
@page "/card/{SelectedCardId:int}/curate"
@using Microsoft.FSharp.Core
@using CardOverflow.Entity
@using CardOverflow.Debug
@using CardOverflow.Pure
@using CardOverflow.Api
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Identity
@using CardOverflow.Sanitation
@inject IToastService ToastService
@inject DbExecutor DbExecutor

<div class="row">
  <div class="col-sm-2">
    <CurateCardFilters Query=@search.Query DeckClicked=@SearchClicked />
  </div>
  <div class="col-sm-10">
    <div class="d-flex justify-content-between align-items-center">
      <SearchBar SearchClicked="@SearchClicked" BackLink="/curate/" CreateLink=@(x => $"/card/{x}/curate/") Ids=@cards?.Select(x => x.CardId.ToString())?.ToList() SelectedId=@SelectedCardId.ToString() Query=@search.Query />
    </div>
    @if (SelectedCardId == null) {
      <div>
        @if (cards == null) {
          <p><em>Loading...</em></p>
        } else {
          <table class="table">
            <tr>
              <th>Preview</th>
              <th>Name</th>
              <th style="min-width: 4rem;">Due</th>
              <th>Tags</th>
            </tr>
            @foreach (var card in cards) {
              <tr>
                <td>
                  <div class="curate-tooltip-target">
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                    <div class="oi oi-eye@(card.CardInstanceMeta.IsAcquired ? " text-success" : "")" aria-hidden="true"></div>
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                    <div class="curate-tooltip-content">
                      <ResizingIframe SrcUrl=@("/cardinstance/" + card.CardInstanceMeta.Id + "/front") />
                    </div>
                  </div>
                </td>
                <td>
                  <a href="/card/@card.CardId/curate">
                    @card.CardInstanceMeta.StrippedFront
                  </a>
                </td>
                <td>
                  <span class="@((card.Due - DateTime.UtcNow) >= TimeSpan.Zero ? "" : "text-danger" )">
                    @(ViewLogic.toString(card.Due - DateTime.UtcNow))
                  </span>
                </td>
                <td>
                  @(String.Join(", ", card.Tags))
                </td>
              </tr>
            }
          </table>
        }
        <Pager Details=@details PageChanged=@PageChanged />
      </div>
    } else {
      <ExploreCard CardId=@SelectedCardId.Value />
    }
  </div>
</div>

@code {
  [CascadingParameter] UserEntity User { get; set; }
  [Parameter] public int? SelectedCardId { get; set; }
  private SearchCommand search = new SearchCommand { Query = "" };
  private List<AcquiredCard> cards;
  private PagedListDetails details;

  public override async Task SetParametersAsync(ParameterView parameters) {
    await base.SetParametersAsync(parameters);
    if (SelectedCardId == null && cards == null) {
      await PageChanged(1);
      StateHasChanged();
    }
  }

  async Task PageChanged(int pageNumber) {
    var pagedList = await DbExecutor.QueryAsync(db => SanitizeCardRepository.GetAcquiredPages(db, User?.Id ?? 0, pageNumber, search));
    details = pagedList.Details;
    cards = pagedList.Results.Where(x => x.IsOk).Select(x => x.ResultValue).ToList();
    if (pagedList.Results.Any(x => x.IsError)) {
      foreach (var error in pagedList.Results.Where(x => x.IsError).Select(x => x.ErrorValue)) {
        ToastService.ShowError(error);
      }
      ToastService.ShowError("Please contact us with these errors.");
    }
  }

  Task SearchClicked(SearchCommand newSearch) {
    SelectedCardId = null;
    search = newSearch;
    return PageChanged(1);
  }

}
