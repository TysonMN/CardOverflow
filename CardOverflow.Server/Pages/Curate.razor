@page "/curate"
@page "/card/{SelectedInstanceId:int}/curate"
@attribute [Authorize]

@using Microsoft.FSharp.Core
@using CardOverflow.Entity
@using CardOverflow.Debug
@using CardOverflow.Pure
@using CardOverflow.Api
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Identity
@using CardOverflow.Sanitation
@inject IToastService ToastService
@inject DbExecutor DbExecutor

@if (User == null) {
  <div>Loading...</div>
} else {
  <div class="row">
    <div class="col-sm-2">
      <CurateCardFilters Query=@search.Query DeckClicked=@SearchClicked />
    </div>
    <div class="col-sm-10">
      <div class="d-flex justify-content-between align-items-center">
        <SearchBar SearchClicked="@SearchClicked" BackLink="/curate/" CreateLink=@(x => $"/card/{x}/curate/") Ids=@cards?.Select(x => x.BranchInstanceMeta.Id.ToString())?.ToList() SelectedId=@SelectedInstanceId.ToString() Query=@search.Query />
      </div>
      @if (SelectedInstanceId == null) {
        <div>
          @if (cards == null) {
            <p><em>Loading...</em></p>
          } else {
            <table class="table">
              <tr>
                <th>Preview</th>
                <th>Name</th>
                <th style="min-width: 4rem;">Due</th>
                <th>Tags</th>
              </tr>
              @foreach (var card in cards) {
                <tr>
                  <td>
                    <div class="curate-tooltip-target">
                      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                      <span class="oi oi-eye@(card.BranchInstanceMeta.IsAcquired ? " text-success" : "")" aria-hidden="true" />
                      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                      <div class="curate-tooltip-content">
                        <ResizingIframeBranch BranchInstanceId=@card.BranchInstanceMeta.Id MaxIndexInclusive=@card.BranchInstanceMeta.MaxIndexInclusive Front />
                      </div>
                    </div>
                  </td>
                  <td>
                    <a href="/card/@card.BranchInstanceMeta.Id/curate">
                      @card.BranchInstanceMeta.StrippedFront
                    </a>
                  </td>
                  <td>
                    <Due DueDate=@card.Due/>
                  </td>
                  <td>
                    @(String.Join(", ", card.Tags))
                  </td>
                </tr>
              }
            </table>
          }
          <Pager Details=@details PageChanged=@PageChanged />
        </div>
      } else {
        <ExploreStack InstanceId=@SelectedInstanceId.Value />
      }
    </div>
  </div>
}

@code {
  [CascadingParameter] UserEntity User { get; set; }
  [Parameter] public int? SelectedInstanceId { get; set; }
  private SearchCommand search = new SearchCommand("", SearchOrder.Popularity);
  private List<AcquiredCard> cards;
  private PagedListDetails details;

  public override async Task SetParametersAsync(ParameterView parameters) {
    await base.SetParametersAsync(parameters);
    if (User != null) {
      if (SelectedInstanceId == null && cards == null) {
        await PageChanged(1);
        StateHasChanged();
      }
      if (SelectedInstanceId != null) {
        if (cards == null || (cards != null && !cards.Any(card => card.BranchInstanceMeta.Id == SelectedInstanceId.Value))) {
          var x = await DbExecutor.QueryAsync(db => AcquiredCardRepository.getAcquiredInstanceFromInstance(db, User.Id, SelectedInstanceId.Value));
          if (x.IsOk) {
            SelectedInstanceId = x.ResultValue;
          } else {
            SelectedInstanceId = null;
            ToastService.ShowError(x.ErrorValue);
          }
          StateHasChanged();
        }
      }
    }
  }

  async Task PageChanged(int pageNumber) {
    var pagedList = await DbExecutor.QueryAsync(db => SanitizeStackRepository.GetAcquiredPages(db, User?.Id ?? 0, pageNumber, search));
    details = pagedList.Details;
    cards = pagedList.Results.Where(x => x.IsOk).Select(x => x.ResultValue).ToList();
    if (pagedList.Results.Any(x => x.IsError)) {
      foreach (var error in pagedList.Results.Where(x => x.IsError).Select(x => x.ErrorValue)) {
        ToastService.ShowError(error);
      }
      ToastService.ShowError("Please contact us with these errors.");
    }
  }

  Task SearchClicked(SearchCommand newSearch) {
    SelectedInstanceId = null;
    search = newSearch;
    return PageChanged(1);
  }

}
