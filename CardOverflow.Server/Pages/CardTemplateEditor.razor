@page "/CardTemplate/{TemplateId:int}"
@using Microsoft.AspNetCore.Mvc
@using Microsoft.FSharp.Core
@using CardOverflow.Entity
@using CardOverflow.Debug
@using CardOverflow.Pure
@using CardOverflow.Api
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Identity
@using CardOverflow.Sanitation
@using CardOverflow.Server.Data
@using Microsoft.AspNetCore.WebUtilities
@inject NavigationManager NavigationManager
@inject IToastService ToastService
@inherits OwningComponentBase<CardOverflowDb>

<h1>Card Template</h1>
@if (Template == null) {
  <p><em>@LoadingMessage</em></p>
} else {
  <di class="row">
    <div class="col-sm">
      @if (SelectedInstance == 0) {
        <CardTemplateEditorDetail IsDisabled=false Instance=@Editable />
      } else {
        <CardTemplateEditorDetail IsDisabled=true Instance=@Template.Instances.Single(x => x.Id == SelectedInstance) />
      }
    </div>
    <div class="col-sm-1 list-group">
      <h5>Revisions</h5>
      <button class="list-group-item list-group-item-action @(SelectedInstance == 0 ? "active" : "")"
              @onclick=@(() => Select(0))>
        Edit
      </button>
      @foreach (var instance in Template.Instances) {
        <button class="list-group-item list-group-item-action @(SelectedInstance == instance.Id ? "active" : "")"
                @onclick=@(() => Select(instance.Id))>
          @instance.Created
          @instance.EditSummary
        </button>
      }
    </div>
  </di>
}

@code {
  [Parameter]
  public int TemplateId { get; set; }
  [CascadingParameter]
  UserEntity User { get; set; }
  string LoadingMessage = "Loading...";
  ViewCardTemplateWithAllInstances Template;
  ViewCardTemplateInstance Editable;
  int SelectedInstance;

  protected override async Task OnInitializedAsync() {
    var x = await SanitizeCardTemplate.AllInstances(Service, TemplateId);
    if (x.IsOk) {
      Template = x.ResultValue;
      Editable = Template.Editable;
      SelectedInstance =
        NavigationManager.Uri
          .Apply(NavigationManager.ToAbsoluteUri).Query
          .Apply(QueryHelpers.ParseQuery)
          .TryGetValue("InstanceId", out var token) &&
        int.TryParse(token.First(), out int possibleId) &&
        Template.Instances.Any(i => i.Id == possibleId)
        ? possibleId
        : 0;
    } else {
      LoadingMessage = x.ErrorValue;
      ToastService.ShowError(x.ErrorValue);
    }
  }

  void Select(int id) =>
    SelectedInstance = id;

}
