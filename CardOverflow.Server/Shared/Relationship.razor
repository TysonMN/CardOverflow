@using Microsoft.FSharp.Core
@using CardOverflow.Entity
@using CardOverflow.Debug
@using CardOverflow.Pure
@using CardOverflow.Api
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Identity
@using CardOverflow.Sanitation
@using CardOverflow.Server.Data
@inject CardOverflowDb Db
@inject UserContentHttpClient UserContentHttpClient;

<h3>Relationships</h3>
<ul class="list-unstyled">
  @foreach (var relationship in Card.Relationships.Where(x => !x.IsAcquired)) {
    <li>
      <button type="button" class="btn btn-outline-primary btn-sm" onclick=@(() => Acquire(relationship.Name, relationship.CardId))>
        <span class="curate-tooltip-target">
          <span class="oi oi-eye@(relationship.IsAcquired ? " text-success" : "")" aria-hidden="true"></span>
          <span class="badge badge-success">@relationship.Users</span>
          <div class="curate-tooltip-content">
            @* https://stackoverflow.com/questions/19739001/which-is-the-difference-between-srcdoc-and-src-datatext-html-in-an/ *@
            <iframe sandbox allow-scripts class="curate-iframe-tooltip" src="/card/rawfront/@relationship.CardId"></iframe>
          </div>
        </span>
        @relationship.PrimaryName<sub><small>@relationship.SecondaryName</small></sub>
      </button>
      <a href="/card/@relationship.CardId">@MappingTools.stripHtmlTags(htmlByCardId[relationship.CardId])</a>
    </li>
  }
</ul>
@if (User != null) {
  <h3>Your Relationships</h3>
  <ul class="list-unstyled">
    @foreach (var relationship in Card.Relationships.Where(x => x.IsAcquired)) {
      <li>
        <button type="button" class="btn btn-primary btn-sm" onclick=@(() => Unacquire(relationship.Name, relationship.CardId))>
          <span class="curate-tooltip-target">
            <span class="oi oi-eye@(relationship.IsAcquired ? " text-success" : "")" aria-hidden="true"></span>
            <span class="badge badge-success">@relationship.Users</span>
            <div class="curate-tooltip-content">
              @* https://stackoverflow.com/questions/19739001/which-is-the-difference-between-srcdoc-and-src-datatext-html-in-an/ *@
              <iframe sandbox allow-scripts class="curate-iframe-tooltip" src="/card/rawfront/@relationship.CardId"></iframe>
            </div>
          </span>
          @relationship.PrimaryName<sub><small>@relationship.SecondaryName</small></sub>
        </button>
        <a href="/card/@relationship.CardId">@MappingTools.stripHtmlTags(htmlByCardId[relationship.CardId])</a>
      </li>
    }
  </ul>
}
@if (Card.LatestInstance.IsAcquired) {
  <EditForm Model="@Command" OnValidSubmit=@Add>
    <div class="form-row">
      <div class="form-group col-md-4">
        <label for="RelationName">How are they related?</label>
        <InputText @bind-value="@Command.Name" class="form-control" id="RelationName" placeholder="Name of the relationship" /> @*this seems to break validation: @bind-value:event="oninput"*@
      </div>
      <div class="form-group col-md-7">
        <label for="TargetCardUrl">Related card URL</label>
        <InputText @bind-value="@Command.TargetLink" class="form-control" id="TargetCardUrl" placeholder="buffbrains.io/card/1234" /> @*this seems to break validation: @bind-value:event="oninput"*@
      </div>
      <div class="form-group col-md-1">
        <label>&nbsp;</label>
        <button type="submit" class="btn btn-primary form-control">Add</button>
      </div>
    </div>
    <ValidationSummary />
    <DataAnnotationsValidator />
  </EditForm>
}

@code {
  [Parameter]
  CardOverflow.Pure.ExploreCard Card { get; set; }
  [CascadingParameter]
  UserEntity User { get; set; }
  AddRelationshipCommand Command;
  IDictionary<int, string> htmlByCardId = new Dictionary<int, string>();

  public override async Task SetParametersAsync(ParameterCollection parameters) {
    await base.SetParametersAsync(parameters);
    Command = new AddRelationshipCommand { SourceId = Card.Id };
    htmlByCardId = Card.Relationships.ToDictionary(x => x.CardId, x => ""); // medTODO after you upgrade to 3.0, is this still needed?
    htmlByCardId = (await Card.Relationships
      .Select(async x => (x.CardId, await UserContentHttpClient.GetFront(x.CardId)))
      .Apply(Task.WhenAll))
      .ToDictionary(x => x.CardId, x => x.Item2);
    StateHasChanged();
  }

  async Task Add() {
    var x = SanitizeRelationshipRepository.Add(Db, User.Id, Command);
    if (x.IsOk) {
      await x.ResultValue;
      var targetId = SanitizeRelationshipRepository.GetCardId(Command.TargetLink).ResultValue;
      Card.Relationships = Card.Relationships.Append(new ViewRelationship(Command.Name, targetId, true, 1)).ToList();
    } else {
      // medTODO show error
    }
  }

  async Task Acquire(string name, int targetId) {
    var x = SanitizeRelationshipRepository.Add(Db, User.Id, new AddRelationshipCommand(name, Card.Id, targetId.ToString()));
    if (x.IsOk) {
      await x.ResultValue;
      Card.Relationships.Single(r => r.CardId == targetId && r.Name == name).IsAcquired = true;
      Card.Relationships.Single(r => r.CardId == targetId && r.Name == name).Users++;
      StateHasChanged();
    } else {
      // medTODO show error
    }
  }

  async Task Unacquire(string name, int targetId) {
    await SanitizeRelationshipRepository.Remove(Db, Card.Id, targetId, User.Id, name);
    Card.Relationships.Single(r => r.CardId == targetId && r.Name == name).IsAcquired = false;
    Card.Relationships.Single(r => r.CardId == targetId && r.Name == name).Users--;
    StateHasChanged();
  }

}
