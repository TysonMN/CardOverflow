@using Microsoft.FSharp.Core
@using CardOverflow.Entity
@using CardOverflow.Debug
@using CardOverflow.Pure
@using CardOverflow.Api
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Identity
@using CardOverflow.Sanitation
@using CardOverflow.Server.Data
@inject CardOverflowDb Db
@inject TimeProvider Time

<AuthorizeView>
  <Authorized Context="AuthorizedContext">
    <li>
      @if (isSaved) {
        <p>@AuthorizedContext.User.Identity.Name: @WriteComment.Text</p>
      } else {
        <EditForm Model="@WriteComment" OnValidSubmit="@(() => SaveComment(AuthorizedContext.User.Identity.Name))">
          <div class="form-group">
            <InputText @bind-value="@WriteComment.Text" /> @*this seems to break validation: @bind-value:event="oninput"*@
            <button type="submit" class="btn btn-primary">Save</button>
            <DataAnnotationsValidator />
            <ValidationSummary />
          </div>
        </EditForm>
      }
    </li>
  </Authorized>
</AuthorizeView>

@code {
  [Parameter]
  int FacetId { get; set; }
  CommentText WriteComment = new CommentText();
  bool isSaved;

  async Task SaveComment(string email) {
    await SanitizeCommentRepository.AddAndSaveAsync(Db, Time, WriteComment, FacetId, email);
    isSaved = true;
  }

}
