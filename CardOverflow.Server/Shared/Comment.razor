@using Microsoft.FSharp.Core
@using CardOverflow.Entity
@using CardOverflow.Debug
@using CardOverflow.Pure
@using CardOverflow.Api
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Identity
@using CardOverflow.Sanitation
@using CardOverflow.Server.Data
@inject TimeProvider Time
@inject DbExecutor DbExecutor

@if (User != null) {
  <li class="list-group-item border-0">
    @if (isSaved) {
      <p>@User.DisplayName : @WriteComment.Text</p>
    } else {
      <EditForm Model=@WriteComment OnValidSubmit=@SaveComment>
        <div class="form-group form-inline btn-group">
          <InputText @bind-Value=@WriteComment.Text class="form-control" /> @*this seems to break validation: @bind-Value:event="oninput"*@
          <button type="submit" class="btn btn-primary">
            Save
          </button>
        </div>
        <DataAnnotationsValidator />
        <ValidationSummary />
      </EditForm>
    }
  </li>
}

@code {
  [CascadingParameter]
  UserEntity User { get; set; }
  [Parameter]
  public int CardId { get; set; }
  CommentText WriteComment = new CommentText();
  bool isSaved;

  async Task SaveComment() {
    await DbExecutor.CommandAsync(db => SanitizeCommentRepository.AddAndSaveAsync(db, Time, WriteComment, CardId, User.Email));
    isSaved = true;
  }

}
