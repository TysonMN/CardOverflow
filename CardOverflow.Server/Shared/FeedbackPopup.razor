@using Microsoft.FSharp.Core
@using CardOverflow.Entity
@using CardOverflow.Debug
@using CardOverflow.Pure
@using CardOverflow.Api
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Identity
@using CardOverflow.Sanitation
@using CardOverflow.Server.Data
@inherits OwningComponentBase<CardOverflowDb>

@if (User != null) {
  <div style="position: fixed; bottom: 0px; right: 20px;">
    @if (!isExpanded) {
      <button class="btn btn-secondary btn-sm" @onclick=ToggleExpand>
        Feedback <span class="oi oi-chevron-top"></span>
      </button>
    } else {
      <div class="card bg-light p-3">
        @if (isSaved) {
          <button class="btn btn-link text-success" @onclick=ToggleExpand>Thanks for your feedback! 🙏</button>
        } else {
          <div class="card-title" style="width: 500px;">
            <div class="d-flex justify-content-between">
              <h4>Submit comments, bugs, or ideas!</h4>
              <button class="btn btn-link text-danger" @onclick=ToggleExpand><span class="oi oi-x"></span></button>
            </div>
          </div>
          <EditForm Model="@feedbackPayload" OnValidSubmit=@Save>
            <div class="form-group">
              <div class="control-group">
                <div class="form-group floating-label-form-group controls mb-0 pb-2">
                  <InputText @bind-Value="@feedbackPayload.Title" class="form-control" placeholder="Title" /> @*this seems to break validation: @bind-Value*@
                  <ValidationMessage For="@(() => feedbackPayload.Title)" />
                </div>
              </div>
              <div class="control-group">
                <div class="form-group floating-label-form-group controls mb-0 pb-2">
                  <InputTextArea @bind-Value="@feedbackPayload.Description" class="form-control" rows="6" placeholder="Description" /> @*this seems to break validation: @bind-Value:event="oninput"*@
                  <ValidationMessage For="@(() => feedbackPayload.Description)" />
                </div>
              </div>
              <div class="form-group">
                <label class="d-inline-block">Priority:</label>
                <InputSelect @bind-Value=feedbackPayload.Priority class="form-control d-inline-block" style="width: auto;">
                  <option value="1">Critical</option>
                  <option value="2">Important</option>
                  <option value="3">Nice to have</option>
                  <option value="4">Other</option>
                </InputSelect>
                <ValidationMessage For="@(() => feedbackPayload.Priority)" />
              </div>
              <div>
                <button type="submit" class="btn btn-primary">Submit!</button>
              </div>
              <DataAnnotationsValidator />
            </div>
          </EditForm>
        }
      </div>
    }
  </div>
}

@code {
  [CascadingParameter]
  UserEntity User { get; set; }
  Feedback feedbackPayload = new Feedback() { Priority = "3" };
  bool isExpanded;
  bool isSaved;

  void ToggleExpand() =>
    isExpanded = !isExpanded;

  async Task Save() {
    await SanitizeFeedback.addAndSaveAsync(Service, User.Id, feedbackPayload);
    isSaved = true;
  }

}
