@using ThoughtDesign.WebLibrary
@using System.Security.Claims
@using CardOverflow.Entity
@using CardOverflow.Debug
@using CardOverflow.Api
@using CardOverflow.Pure
@using CardOverflow.Sanitation
@inherits LayoutComponentBase
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject CardOverflowDb Db
@inject UrlProvider UrlProvider

<CascadingValue Value=@_userTask>
  <BlazoredToasts Timeout="10" />
  <div class="sidebar">
    <NavMenu />
  </div>

  <div class="main">
    @* Keep this div to make the Study page look ok. *@
    <div class="content px-4">
      @Body
      <FeedbackPopup />
    </div>
  </div>
</CascadingValue>

@code {
  Task<UserClaims> _userTask;

  protected override void OnInitialized() {
    _userTask = AuthenticationStateProvider.GetAuthenticationStateAsync().ContinueWith(x => toUserClaims(x.Result));
  }

  private UserClaims toUserClaims(AuthenticationState state) {
    if (state.User.Identity.IsAuthenticated) {
      var userId = state.User.Claims.Single(x =>
          x.Type == "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier" &&
          x.OriginalIssuer == UrlProvider.IdentityProvider.TrimEnd('/') &&
          x.Issuer == UrlProvider.IdentityProvider.TrimEnd('/')
        ).Value.Apply(int.Parse);
      var email = state.User.Claims.Single(x =>
          x.Type == "name" &&
          x.OriginalIssuer == "OpenIdConnect" &&
          x.Issuer == "OpenIdConnect"
        ).Value;
      return new UserClaims(userId, "", email); //highTODO add real DisplayName
    }
    return UserClaims.init;
  }

}
